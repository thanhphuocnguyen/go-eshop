basePath: /api/v1
definitions:
  api.Address:
    properties:
      city:
        type: string
      district:
        type: string
      phone:
        type: string
      street:
        type: string
      ward:
        type: string
    type: object
  api.AddressResponse:
    properties:
      city:
        type: string
      createdAt:
        type: string
      default:
        type: boolean
      district:
        type: string
      id:
        type: string
      phone:
        type: string
      street:
        type: string
      ward:
        type: string
    type: object
  api.ApiError:
    properties:
      code:
        type: string
      details:
        type: string
      stack:
        description: Hide in production
        type: string
    type: object
  api.ApiResponse-api_AddressResponse:
    properties:
      data:
        $ref: '#/definitions/api.AddressResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_AttributeResponse:
    properties:
      data:
        $ref: '#/definitions/api.AttributeResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_CartDetailResponse:
    properties:
      data:
        $ref: '#/definitions/api.CartDetailResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_CategoryResponse:
    properties:
      data:
        $ref: '#/definitions/api.CategoryResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_DiscountDetailResponseModel:
    properties:
      data:
        $ref: '#/definitions/api.DiscountDetailResponseModel'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_DiscountListItemResponseModel:
    properties:
      data:
        $ref: '#/definitions/api.DiscountListItemResponseModel'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_LoginResponse:
    properties:
      data:
        $ref: '#/definitions/api.LoginResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_OrderDetailResponse:
    properties:
      data:
        $ref: '#/definitions/api.OrderDetailResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_OrderListResponse:
    properties:
      data:
        $ref: '#/definitions/api.OrderListResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_PaymentResponse:
    properties:
      data:
        $ref: '#/definitions/api.PaymentResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_ProductListModel:
    properties:
      data:
        $ref: '#/definitions/api.ProductListModel'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_ProductRatingModel:
    properties:
      data:
        $ref: '#/definitions/api.ProductRatingModel'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_RefreshTokenResponse:
    properties:
      data:
        $ref: '#/definitions/api.RefreshTokenResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-api_UserResponse:
    properties:
      data:
        $ref: '#/definitions/api.UserResponse'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-array_api_AddressResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.AddressResponse'
        type: array
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-array_api_AttributeResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.AttributeResponse'
        type: array
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-array_api_ImageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.ImageResponse'
        type: array
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-array_api_OrderListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.OrderListResponse'
        type: array
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-array_api_ProductRatingModel:
    properties:
      data:
        items:
          $ref: '#/definitions/api.ProductRatingModel'
        type: array
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-array_api_UserResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.UserResponse'
        type: array
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-bool:
    properties:
      data:
        type: boolean
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-gin_H:
    properties:
      data:
        $ref: '#/definitions/gin.H'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-repository_UpdateUserRow:
    properties:
      data:
        $ref: '#/definitions/repository.UpdateUserRow'
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-string:
    properties:
      data:
        type: string
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.ApiResponse-uuid_UUID:
    properties:
      data:
        type: string
      error:
        $ref: '#/definitions/api.ApiError'
      message:
        type: string
      meta:
        $ref: '#/definitions/api.MetaInfo'
      pagination:
        $ref: '#/definitions/api.Pagination'
      success:
        type: boolean
    type: object
  api.AttributeResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
      values:
        items:
          $ref: '#/definitions/api.AttributeValue'
        type: array
    type: object
  api.AttributeValue:
    properties:
      code:
        type: string
      displayOrder:
        type: integer
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
    type: object
  api.AttributeValueRequest:
    properties:
      code:
        type: string
      displayOrder:
        minimum: 0
        type: integer
      isActive:
        type: boolean
      name:
        type: string
    required:
    - code
    type: object
  api.CartDetailResponse:
    properties:
      cartItems:
        items:
          $ref: '#/definitions/api.CartItemResponse'
        type: array
      createdAt:
        type: string
      id:
        type: string
      totalPrice:
        type: number
      updatedAt:
        type: string
    type: object
  api.CartItemResponse:
    properties:
      attributes:
        items:
          $ref: '#/definitions/repository.AttributeDataSnapshot'
        type: array
      discount:
        type: integer
      id:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      price:
        type: number
      productId:
        type: string
      quantity:
        type: integer
      sku:
        type: string
      stock:
        type: integer
      variantId:
        type: string
    required:
    - id
    - productId
    - variantId
    type: object
  api.CategoryLinkedProduct:
    properties:
      id:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      variantCount:
        type: integer
    type: object
  api.CategoryResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/api.CategoryLinkedProduct'
        type: array
      published:
        type: boolean
      remarkable:
        type: boolean
      slug:
        type: string
      updatedAt:
        type: string
    type: object
  api.CheckoutRequest:
    properties:
      address:
        $ref: '#/definitions/api.Address'
      addressId:
        type: string
      email:
        type: string
      fullName:
        type: string
      paymentGateway:
        enum:
        - stripe
        type: string
      paymentMethod:
        enum:
        - code
        - stripe
        type: string
      paymentReceiptEmail:
        type: string
    required:
    - paymentMethod
    type: object
  api.CreateAddressRequest:
    properties:
      city:
        type: string
      district:
        type: string
      isDefault:
        type: boolean
      phone:
        maxLength: 15
        minLength: 10
        type: string
      street:
        type: string
      ward:
        maxLength: 100
        type: string
    required:
    - city
    - district
    - phone
    - street
    type: object
  api.CreateAttributeRequest:
    properties:
      name:
        type: string
      values:
        items:
          $ref: '#/definitions/api.AttributeValueRequest'
        type: array
    required:
    - name
    type: object
  api.CreateCategoryRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      displayOrder:
        type: integer
      image:
        $ref: '#/definitions/multipart.FileHeader'
      name:
        maxLength: 255
        minLength: 3
        type: string
      remarkable:
        type: boolean
      slug:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - name
    - slug
    type: object
  api.CreateDiscountRequest:
    properties:
      categories:
        items:
          type: string
        type: array
      code:
        maxLength: 32
        minLength: 5
        type: string
      description:
        maxLength: 1000
        type: string
      discountType:
        enum:
        - percentage
        - fixed_amount
        type: string
      discountValue:
        type: number
      expiresAt:
        type: string
      isActive:
        type: boolean
      maxDiscountAmount:
        type: number
      minPurchaseAmount:
        type: number
      products:
        description: Related entities
        items:
          type: string
        type: array
      startsAt:
        type: string
      usageLimit:
        minimum: 0
        type: integer
      users:
        items:
          type: string
        type: array
    required:
    - code
    - discountType
    - discountValue
    - isActive
    - startsAt
    type: object
  api.DiscountDetailResponseModel:
    properties:
      code:
        type: string
      createdAt:
        type: string
      description:
        type: string
      discountType:
        type: string
      discountValue:
        type: number
      expiresAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      maxDiscount:
        type: number
      minPurchase:
        type: number
      startsAt:
        type: string
      updatedAt:
        type: string
      usageHistory:
        items:
          $ref: '#/definitions/api.DiscountUsageHistory'
        type: array
      usageLimit:
        type: integer
      usedCount:
        type: integer
    type: object
  api.DiscountListItemResponseModel:
    properties:
      code:
        type: string
      createdAt:
        type: string
      description:
        type: string
      discountType:
        type: string
      discountValue:
        type: number
      expiresAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      maxDiscount:
        type: number
      minPurchase:
        type: number
      startsAt:
        type: string
      updatedAt:
        type: string
      usageLimit:
        type: integer
      usedCount:
        type: integer
    type: object
  api.DiscountUsageHistory:
    properties:
      amount:
        type: number
      customerName:
        type: string
      date:
        format: "2006-01-02"
        type: string
      discountAmount:
        type: number
      id:
        type: string
      orderId:
        type: string
    type: object
  api.ImageResponse:
    properties:
      assignments:
        items:
          type: string
        type: array
      externalId:
        type: string
      fileSize:
        type: integer
      id:
        type: string
      mimeType:
        type: string
      url:
        type: string
    type: object
  api.LoginRequest:
    properties:
      email:
        maxLength: 255
        minLength: 6
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - password
    type: object
  api.LoginResponse:
    properties:
      accessToken:
        type: string
      accessTokenExpiresIn:
        type: string
      refreshToken:
        type: string
      refreshTokenExpiresAt:
        type: string
      sessionId:
        type: string
    type: object
  api.MetaInfo:
    properties:
      method:
        type: string
      path:
        type: string
      requestId:
        type: string
      timestamp:
        type: string
    type: object
  api.OrderDetailResponse:
    properties:
      createdAt:
        type: string
      customerEmail:
        type: string
      customerName:
        type: string
      id:
        type: string
      paymentInfo:
        $ref: '#/definitions/api.PaymentInfoModel'
      products:
        items:
          $ref: '#/definitions/api.OrderItemResponse'
        type: array
      shippingInfo:
        $ref: '#/definitions/repository.ShippingAddressSnapshot'
      status:
        $ref: '#/definitions/repository.OrderStatus'
      total:
        type: number
    type: object
  api.OrderItemResponse:
    properties:
      attributesSnapshot:
        items:
          $ref: '#/definitions/repository.AttributeDataSnapshot'
        type: array
      id:
        type: string
      imageUrl:
        type: string
      lineTotal:
        type: number
      name:
        type: string
      quantity:
        type: integer
      rating:
        $ref: '#/definitions/api.RatingModel'
      variantId:
        type: string
    type: object
  api.OrderListResponse:
    properties:
      createdAt:
        type: string
      customerEmail:
        type: string
      customerName:
        type: string
      id:
        type: string
      paymentStatus:
        $ref: '#/definitions/repository.PaymentStatus'
      status:
        $ref: '#/definitions/repository.OrderStatus'
      total:
        type: number
      totalItems:
        type: integer
      updatedAt:
        type: string
    type: object
  api.Pagination:
    properties:
      hasNextPage:
        type: boolean
      hasPreviousPage:
        type: boolean
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  api.PaymentInfoModel:
    properties:
      amount:
        type: number
      clientSecret:
        type: string
      gateway:
        type: string
      id:
        type: string
      intentId:
        type: string
      method:
        type: string
      refundId:
        type: string
      status:
        type: string
    type: object
  api.PaymentRequest:
    properties:
      orderId:
        type: string
      paymentMethod:
        enum:
        - cod
        - stripe
        type: string
    required:
    - orderId
    - paymentMethod
    type: object
  api.PaymentResponse:
    properties:
      details: {}
      gateway:
        $ref: '#/definitions/repository.PaymentGateway'
      id:
        type: string
      status:
        $ref: '#/definitions/repository.PaymentStatus'
    type: object
  api.ProductListModel:
    properties:
      avgRating:
        type: number
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      imageId:
        type: string
      imageUrl:
        type: string
      maxPrice:
        type: number
      minPrice:
        type: number
      name:
        type: string
      reviewCount:
        type: integer
      sku:
        type: string
      slug:
        type: string
      updatedAt:
        type: string
      variantCount:
        type: integer
    type: object
  api.ProductRatingModel:
    properties:
      helpfulVotes:
        type: integer
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/api.RatingImageModel'
        type: array
      isApproved:
        type: boolean
      isVisible:
        type: boolean
      name:
        type: string
      productName:
        type: string
      rating:
        type: number
      reviewContent:
        type: string
      reviewTitle:
        type: string
      unhelpfulVotes:
        type: integer
      userId:
        type: string
      verifiedPurchase:
        type: boolean
    type: object
  api.RatingImageModel:
    properties:
      id:
        type: string
      url:
        type: string
    type: object
  api.RatingModel:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      rating:
        type: number
      title:
        type: string
    type: object
  api.RefreshTokenResponse:
    properties:
      accessToken:
        type: string
      accessTokenExpiresAt:
        type: string
    type: object
  api.RegisterRequestBody:
    properties:
      address:
        $ref: '#/definitions/api.CreateAddressRequest'
      email:
        maxLength: 255
        minLength: 6
        type: string
      fullname:
        maxLength: 32
        minLength: 3
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - address
    - email
    - fullname
    - password
    - phone
    - username
    type: object
  api.UpdateAddressRequest:
    properties:
      address1:
        type: string
      city:
        type: string
      district:
        type: string
      isDefault:
        type: boolean
      phone:
        type: string
      ward:
        type: string
    type: object
  api.UpdateAttributeRequest:
    properties:
      name:
        type: string
      values:
        items:
          $ref: '#/definitions/api.UpdateAttributeValueRequest'
        type: array
    required:
    - name
    type: object
  api.UpdateAttributeValueRequest:
    properties:
      code:
        type: string
      displayOrder:
        minimum: 0
        type: integer
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
    required:
    - code
    type: object
  api.UpdateCartItemQtyRequest:
    properties:
      quantity:
        type: integer
    required:
    - quantity
    type: object
  api.UpdateCategoryRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      displayOrder:
        type: integer
      image:
        $ref: '#/definitions/multipart.FileHeader'
      name:
        maxLength: 255
        minLength: 3
        type: string
      published:
        type: boolean
      remarkable:
        type: boolean
      slug:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  api.UpdateUserRequest:
    properties:
      email:
        maxLength: 255
        minLength: 6
        type: string
      fullname:
        maxLength: 32
        minLength: 3
        type: string
      phone:
        maxLength: 15
        minLength: 8
        type: string
      userId:
        type: string
    required:
    - userId
    type: object
  api.UserResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/api.AddressResponse'
        type: array
      createdAt:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      passwordChangedAt:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/repository.UserRole'
      updatedAt:
        type: string
      username:
        type: string
      verifiedEmail:
        type: boolean
      verifiedPhone:
        type: boolean
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  multipart.FileHeader:
    properties:
      filename:
        type: string
      header:
        $ref: '#/definitions/textproto.MIMEHeader'
      size:
        type: integer
    type: object
  repository.AttributeDataSnapshot:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  repository.CreateProductTxArgs:
    properties:
      attributes:
        items:
          type: string
        minItems: 1
        type: array
      brand_id:
        type: string
      category_id:
        type: string
      collection_id:
        type: string
      description:
        maxLength: 5000
        minLength: 6
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      price:
        type: number
      short_description:
        maxLength: 2000
        type: string
      sku:
        type: string
      slug:
        type: string
      variants:
        items:
          $ref: '#/definitions/repository.CreateProductVariantTxParams'
        type: array
    required:
    - name
    - price
    - sku
    type: object
  repository.CreateProductVariantTxParams:
    properties:
      attributes:
        items:
          $ref: '#/definitions/repository.ProductAttributesTxParam'
        minItems: 1
        type: array
      is_active:
        type: boolean
      price:
        type: number
      stock_qty:
        minimum: 0
        type: integer
      weight:
        minimum: 0
        type: number
    required:
    - price
    - stock_qty
    type: object
  repository.OrderStatus:
    enum:
    - pending
    - confirmed
    - delivering
    - delivered
    - cancelled
    - refunded
    - completed
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusDelivering
    - OrderStatusDelivered
    - OrderStatusCancelled
    - OrderStatusRefunded
    - OrderStatusCompleted
  repository.PaymentGateway:
    enum:
    - stripe
    - paypal
    - visa
    - mastercard
    - apple_pay
    - postpaid
    - momo
    - zalo_pay
    - vn_pay
    type: string
    x-enum-varnames:
    - PaymentGatewayStripe
    - PaymentGatewayPaypal
    - PaymentGatewayVisa
    - PaymentGatewayMastercard
    - PaymentGatewayApplePay
    - PaymentGatewayPostpaid
    - PaymentGatewayMomo
    - PaymentGatewayZaloPay
    - PaymentGatewayVnPay
  repository.PaymentStatus:
    enum:
    - pending
    - success
    - failed
    - cancelled
    - refunded
    - processing
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusSuccess
    - PaymentStatusFailed
    - PaymentStatusCancelled
    - PaymentStatusRefunded
    - PaymentStatusProcessing
  repository.ProductAttributesTxParam:
    properties:
      id:
        type: string
      value_id:
        type: string
    required:
    - id
    - value_id
    type: object
  repository.ShippingAddressSnapshot:
    properties:
      city:
        type: string
      district:
        type: string
      phone:
        type: string
      street:
        type: string
      ward:
        type: string
    required:
    - city
    - district
    - phone
    - street
    - ward
    type: object
  repository.UpdateProductImages:
    properties:
      assignments:
        items:
          type: string
        type: array
      id:
        type: string
      omitempty:
        type: boolean
      role:
        type: string
    type: object
  repository.UpdateProductTxParams:
    properties:
      attributes:
        items:
          type: string
        type: array
      brand_id:
        type: string
      category_id:
        type: string
      collection_id:
        type: string
      description:
        maxLength: 5000
        minLength: 6
        type: string
      images:
        items:
          $ref: '#/definitions/repository.UpdateProductImages'
        type: array
      name:
        maxLength: 100
        minLength: 3
        type: string
      price:
        type: number
      short_description:
        maxLength: 2000
        type: string
      sku:
        type: string
      slug:
        type: string
      stock:
        type: integer
      variants:
        items:
          $ref: '#/definitions/repository.UpdateProductVariantTxParams'
        type: array
    type: object
  repository.UpdateProductVariantTxParams:
    properties:
      attributes:
        items:
          $ref: '#/definitions/repository.ProductAttributesTxParam'
        minItems: 1
        type: array
      id:
        type: string
      is_active:
        type: boolean
      price:
        type: number
      stock_qty:
        minimum: 0
        type: integer
      weight:
        minimum: 0
        type: number
    required:
    - price
    - stock_qty
    type: object
  repository.UpdateUserRow:
    properties:
      createdAt:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      role:
        $ref: '#/definitions/repository.UserRole'
      updatedAt:
        type: string
      username:
        type: string
      verifiedEmail:
        type: boolean
      verifiedPhone:
        type: boolean
    type: object
  repository.UserRole:
    enum:
    - admin
    - user
    - moderator
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleUser
    - UserRoleModerator
  textproto.MIMEHeader:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
host: localhost:4000
info:
  contact: {}
  description: This is a sample server for a simple e-commerce API.
  title: E-Commerce API
paths:
  /address:
    get:
      consumes:
      - application/json
      description: Get list of addresses
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_AddressResponse'
      summary: Get list of addresses
      tags:
      - address
    post:
      consumes:
      - application/json
      description: Create a new address
      parameters:
      - description: Create Address
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.CreateAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AddressResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Create a new address
      tags:
      - address
  /address/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Remove an address
      tags:
      - address
    put:
      consumes:
      - application/json
      description: Update an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Address
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.UpdateAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AddressResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Update an address
      tags:
      - address
  /address/{id}/default:
    put:
      consumes:
      - application/json
      description: Set default address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Set default address
      tags:
      - address
  /admin/brands/{id}:
    get:
      consumes:
      - application/json
      description: Get a Brand by ID
      operationId: get-Brand-by-id
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Get a Brand by ID
      tags:
      - Admin
  /admin/categories:
    post:
      consumes:
      - application/json
      description: Create a new Category
      operationId: create-Category
      parameters:
      - description: Category request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new Category
      tags:
      - Categories
  /admin/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Category
      operationId: delete-Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Category
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get a Category by ID
      operationId: get-Category-by-id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update a Category
      operationId: update-Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Category
      tags:
      - Admin
  /admin/collections:
    get:
      consumes:
      - application/json
      description: Get a list of Collections
      operationId: get-Collections
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a list of Collections
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Create a new Collection
      operationId: create-Collection
      parameters:
      - description: Collection info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new Collection
      tags:
      - Admin
  /admin/collections/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Collection
      operationId: delete-Collection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Collection
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get a Collection by ID
      operationId: get-Collection-by-id
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Collection by ID
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Update a Collection
      operationId: update-Collection
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Collection info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Collection
      tags:
      - Admin
  /admin/orders:
    get:
      consumes:
      - application/json
      description: Get all orders with pagination and filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
      security:
      - BearerAuth: []
      summary: Get all orders (Admin endpoint)
      tags:
      - Admin
  /admin/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderDetailResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderDetailResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderDetailResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderDetailResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderDetailResponse'
      security:
      - BearerAuth: []
      summary: Get order details by ID (Admin endpoint)
      tags:
      - Admin
  /admin/ratings:
    get:
      consumes:
      - application/json
      description: Get ratings for a specific product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_ProductRatingModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      summary: Get product ratings
      tags:
      - ratings
  /admin/ratings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product rating by ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      security:
      - BearerAuth: []
      summary: Delete a rating
      tags:
      - Admin
      - ratings
  /admin/ratings/{id}/approve:
    post:
      consumes:
      - application/json
      description: Approve a product rating by ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      security:
      - BearerAuth: []
      summary: Approve a rating
      tags:
      - Admin
      - ratings
  /admin/ratings/{id}/ban:
    post:
      consumes:
      - application/json
      description: Ban a user from rating by setting their rating to invisible
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      security:
      - BearerAuth: []
      summary: Ban a user from rating
      tags:
      - Admin
      - ratings
  /admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Get user info
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
      summary: Get user info
      tags:
      - Admin
  /attributes:
    get:
      consumes:
      - application/json
      description: Get all attributes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_AttributeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_AttributeResponse'
      summary: Get all attributes
      tags:
      - attributes
    post:
      consumes:
      - application/json
      description: Create an attribute
      parameters:
      - description: Attribute name
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.CreateAttributeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
      summary: Create an attribute
      tags:
      - attributes
  /attributes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an attribute
      parameters:
      - description: Attribute ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      summary: Delete an attribute
      tags:
      - attributes
    get:
      consumes:
      - application/json
      description: Get an attribute
      parameters:
      - description: Attribute ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
      summary: Get an attribute
      tags:
      - attributes
    put:
      consumes:
      - application/json
      description: Update an attribute
      parameters:
      - description: Attribute ID
        in: path
        name: id
        required: true
        type: integer
      - description: Attribute name
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.UpdateAttributeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_AttributeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_AttributeResponse'
      summary: Update an attribute
      tags:
      - attributes
  /brands:
    get:
      consumes:
      - application/json
      description: Get a list of brands
      operationId: get-brands
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
      summary: Get a list of brands
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Create a new Brand
      operationId: create-Brand
      parameters:
      - description: Brand request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Create a new Brand
      tags:
      - Admin
  /brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Brand
      operationId: delete-Brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Delete a Brand
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Update a Brand
      operationId: update-Brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      - description: Brand request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
      summary: Update a Brand
      tags:
      - Admin
  /cart:
    get:
      consumes:
      - application/json
      description: get cart details by user ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CartDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get cart details by user ID
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: create a new cart for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CartDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new cart
      tags:
      - carts
  /cart/checkoutHandler:
    post:
      consumes:
      - application/json
      description: update product items in the cart
      parameters:
      - description: Checkout input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.CheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update product items in the cart
      tags:
      - carts
  /cart/clear:
    put:
      consumes:
      - application/json
      description: clear the cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Clear the cart
      tags:
      - carts
  /cart/item/{id}:
    delete:
      consumes:
      - application/json
      description: remove a product from the cart
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product from the cart
      tags:
      - carts
  /cart/item/{variant_id}:
    post:
      consumes:
      - application/json
      description: add a product to the cart
      parameters:
      - description: Add product to cart input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.UpdateCartItemQtyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-uuid_UUID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Add a product to the cart
      tags:
      - carts
  /categories:
    get:
      consumes:
      - application/json
      description: Get a list of Categories
      operationId: get-Categories
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a list of Categories
      tags:
      - Categories
  /categories/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Get a list of Products by Category Slug
      operationId: get-Products-by-Category-Slug
      parameters:
      - description: Category Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a list of Products by Category Slug
      tags:
      - Categories
  /collections/{slug}:
    get:
      consumes:
      - application/json
      description: Get a list of Collections
      operationId: get-Shop-Collection-by-slug
      parameters:
      - description: Collection slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a list of Collections
      tags:
      - Collections
  /discounts:
    get:
      consumes:
      - application/json
      description: Get all discounts
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Search by code
        in: query
        name: search
        type: string
      - default: percentage
        description: Discount type
        in: query
        name: discountType
        type: string
      - default: true
        description: Is active
        in: query
        name: isActive
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_DiscountListItemResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Get all discounts
      tags:
      - discounts
    post:
      consumes:
      - application/json
      description: Create a new discount
      parameters:
      - description: Discount info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.CreateDiscountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.ApiResponse-api_DiscountDetailResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Create a new discount
      tags:
      - discounts
  /discounts/{id}:
    get:
      consumes:
      - application/json
      description: Get discount by ID
      parameters:
      - description: Discount ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_DiscountDetailResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Get discount by ID
      tags:
      - discounts
  /images/{publicID}:
    delete:
      consumes:
      - application/json
      description: remove a product by external ID
      parameters:
      - description: Product ID
        in: path
        name: publicID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product by external ID
      tags:
      - images
  /images/product/{product_id}:
    delete:
      consumes:
      - application/json
      description: remove a product image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product image by ID
      tags:
      - images
    get:
      consumes:
      - application/json
      description: get list of product image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_ImageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get list of product image by ID
      tags:
      - images
    post:
      consumes:
      - application/json
      description: upload product images by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_ImageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Upload product images
      tags:
      - images
  /order/{order_id}:
    get:
      consumes:
      - application/json
      description: Get order detail by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OrderDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.OrderDetailResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.OrderDetailResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.OrderDetailResponse'
      security:
      - BearerAuth: []
      summary: Get order detail
      tags:
      - orders
  /order/{order_id}/cancel:
    put:
      consumes:
      - application/json
      description: Cancel order by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
      security:
      - BearerAuth: []
      summary: Cancel order
      tags:
      - orders
  /order/{order_id}/confirm-received:
    put:
      consumes:
      - application/json
      description: confirm received order payment info
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      security:
      - BearerAuth: []
      summary: confirm received order payment info
      tags:
      - orders
  /order/{order_id}/refund:
    put:
      consumes:
      - application/json
      description: Refund order by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
      security:
      - BearerAuth: []
      summary: Refund order
      tags:
      - orders
  /order/{order_id}/status:
    put:
      consumes:
      - application/json
      description: Change order status by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_OrderListResponse'
      security:
      - BearerAuth: []
      summary: Change order status
      tags:
      - orders
  /order/list:
    get:
      consumes:
      - application/json
      description: List orders of the current user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by payment status
        in: query
        name: payment_status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_OrderListResponse'
      security:
      - BearerAuth: []
      summary: List orders
      tags:
      - orders
  /payment:
    post:
      consumes:
      - application/json
      description: Initiate payment
      parameters:
      - description: Payment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      security:
      - BearerAuth: []
      summary: Initiate payment
      tags:
      - payment
  /payment/{id}:
    get:
      consumes:
      - application/json
      description: Get payment  by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      security:
      - BearerAuth: []
      summary: Get payment  by order ID
      tags:
      - payment
  /payment/{payment_id}:
    get:
      consumes:
      - application/json
      description: Change payment status
      parameters:
      - description: Payment ID
        in: path
        name: payment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      security:
      - BearerAuth: []
      summary: Change payment status
      tags:
      - payment
  /products:
    get:
      consumes:
      - application/json
      description: get list of products
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: pageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
      summary: Get list of products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: create a new product with the input payload
      parameters:
      - description: Product input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/repository.CreateProductTxArgs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Create a new product
      tags:
      - products
  /products/{product_id}:
    delete:
      consumes:
      - application/json
      description: remove a product by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Remove a product by ID
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get a product detail by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
      summary: Get a product detail by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update a product by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Product input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/repository.UpdateProductTxParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductListModel'
      summary: Update a product by ID
      tags:
      - products
  /ratings:
    post:
      consumes:
      - application/json
      description: Post a product rating
      parameters:
      - description: Order Item ID
        in: formData
        name: order_item_id
        required: true
        type: string
      - description: Rating (1-5)
        in: formData
        name: rating
        required: true
        type: number
      - description: Review Title
        in: formData
        name: title
        required: true
        type: string
      - description: Review Content
        in: formData
        name: content
        required: true
        type: string
      - description: Images
        in: formData
        name: files
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_ProductRatingModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      security:
      - BearerAuth: []
      summary: Post a rating
      tags:
      - ratings
  /ratings/{rating_id}/helpful:
    post:
      consumes:
      - application/json
      description: Post a helpful rating
      parameters:
      - description: Rating ID
        in: body
        name: rating_id
        required: true
        schema:
          type: string
      - description: Helpful
        in: body
        name: helpful
        required: true
        schema:
          type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      security:
      - BearerAuth: []
      summary: Post a helpful rating
      tags:
      - ratings
  /ratings/{rating_id}/reply:
    post:
      consumes:
      - application/json
      description: Post a reply to a product rating
      parameters:
      - description: Rating ID
        in: path
        name: rating_id
        required: true
        type: string
      - description: Reply Content
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      security:
      - BearerAuth: []
      summary: Post a reply to a rating
      tags:
      - ratings
  /ratings/orders/{order_id}:
    get:
      consumes:
      - application/json
      description: Get ratings for a specific order
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_ProductRatingModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      security:
      - BearerAuth: []
      summary: Get order ratings
      tags:
      - ratings
  /ratings/products/{product_id}:
    get:
      consumes:
      - application/json
      description: Get ratings for a specific product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_ProductRatingModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      summary: Get product ratings
      tags:
      - ratings
  /shop/brands:
    get:
      consumes:
      - application/json
      description: Get a list of brands for the shop
      operationId: get-shop-brands
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Get a list of brands for the shop
      tags:
      - Brands
  /shop/brands/{slug}:
    get:
      consumes:
      - application/json
      description: Get a list of brands for the shop
      operationId: get-shop-brand-by-slug
      parameters:
      - description: Brand slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Get a list of brands for the shop
      tags:
      - Brands
  /users:
    get:
      consumes:
      - application/json
      description: Get user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Get user info
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.RegisterRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_UserResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    patch:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-repository_UpdateUserRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: Update user info
      tags:
      - users
  /users/list:
    get:
      consumes:
      - application/json
      description: List users
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-array_api_UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      summary: List users
      tags:
      - users
  /users/loginHandler:
    post:
      consumes:
      - application/json
      description: Login to the system
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-api_LoginResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_LoginResponse'
      summary: Login to the system
      tags:
      - users
  /users/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-api_RefreshTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-api_RefreshTokenResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-api_RefreshTokenResponse'
      summary: Refresh token
      tags:
      - users
  /users/verify-email:
    get:
      consumes:
      - application/json
      description: Verify email
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      - description: Verify code
        in: query
        name: verify_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      security:
      - BearerAuth: []
      summary: Verify email
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Send verify email
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-gin_H'
      security:
      - BearerAuth: []
      summary: Send verify email
      tags:
      - users
  /webhook/stripe:
    post:
      consumes:
      - application/json
      description: Stripe webhook
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ApiResponse-bool'
      summary: Stripe webhook
      tags:
      - webhook
swagger: "2.0"
