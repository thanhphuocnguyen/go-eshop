basePath: /api/v1
definitions:
  api.AddressResponse:
    properties:
      address_1:
        type: string
      address_2:
        type: string
      city:
        type: string
      district:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      phone:
        type: string
      ward:
        type: string
    type: object
  api.CreateAddressParams:
    properties:
      address_1:
        type: string
      address_2:
        type: string
      city:
        type: string
      district:
        type: string
      is_default:
        type: boolean
      phone:
        maxLength: 15
        minLength: 10
        type: string
      ward:
        type: string
    required:
    - address_1
    - city
    - district
    - phone
    type: object
  api.GenericListResponse-api_productListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.productListResponse'
        type: array
      error:
        type: string
      message:
        type: string
      total:
        type: integer
    type: object
  api.GenericResponse-api_AddressResponse:
    properties:
      data:
        $ref: '#/definitions/api.AddressResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_cartResponse:
    properties:
      data:
        $ref: '#/definitions/api.cartResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_loginResponse:
    properties:
      data:
        $ref: '#/definitions/api.loginResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_productResponse:
    properties:
      data:
        $ref: '#/definitions/api.productResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_userResponse:
    properties:
      data:
        $ref: '#/definitions/api.userResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-array_api_AddressResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.AddressResponse'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-array_sqlc_Image:
    properties:
      data:
        items:
          $ref: '#/definitions/sqlc.Image'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-bool:
    properties:
      data:
        type: boolean
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-postgres_CheckoutCartTxResult:
    properties:
      data:
        $ref: '#/definitions/postgres.CheckoutCartTxResult'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-sqlc_Cart:
    properties:
      data:
        $ref: '#/definitions/sqlc.Cart'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-sqlc_CartItem:
    properties:
      data:
        $ref: '#/definitions/sqlc.CartItem'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-sqlc_CreateUserRow:
    properties:
      data:
        $ref: '#/definitions/sqlc.CreateUserRow'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-sqlc_Order:
    properties:
      data:
        $ref: '#/definitions/sqlc.Order'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-sqlc_Product:
    properties:
      data:
        $ref: '#/definitions/sqlc.Product'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-sqlc_UpdateUserRow:
    properties:
      data:
        $ref: '#/definitions/sqlc.UpdateUserRow'
      error:
        type: string
      message:
        type: string
    type: object
  api.UpdateAddressParams:
    properties:
      address_1:
        type: string
      address_2:
        type: string
      city:
        type: string
      district:
        type: string
      is_default:
        type: boolean
      phone:
        type: string
      ward:
        type: string
    type: object
  api.addProductToCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    required:
    - product_id
    - quantity
    type: object
  api.addressResponse:
    properties:
      address:
        type: string
      address_2:
        type: string
      city:
        type: string
      district:
        type: string
      phone:
        type: string
      ward:
        type: string
    type: object
  api.cartItemResponse:
    properties:
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  api.cartResponse:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/api.cartItemResponse'
        type: array
      checked_out:
        type: string
      created_at:
        type: string
      id:
        type: integer
      total_price:
        type: number
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  api.checkoutRequest:
    properties:
      address_id:
        type: integer
      payment_method:
        enum:
        - credit_card
        - paypal
        - cod
        - debit_card
        - apple_pay
        - wallet
        - postpaid
        type: string
    required:
    - address_id
    - payment_method
    type: object
  api.createProductRequest:
    properties:
      description:
        maxLength: 1000
        minLength: 10
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    required:
    - description
    - name
    - price
    - sku
    - stock
    type: object
  api.createUserRequest:
    properties:
      email:
        maxLength: 255
        minLength: 6
        type: string
      full_name:
        maxLength: 32
        minLength: 3
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - full_name
    - password
    - phone
    - username
    type: object
  api.listOrderResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/api.orderResponse'
        type: array
    type: object
  api.loginResponse:
    properties:
      refresh_token:
        type: string
      refresh_token_expire_at:
        type: string
      session_id:
        type: string
      token:
        type: string
      token_expire_at:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.loginUserRequest:
    properties:
      password:
        maxLength: 32
        minLength: 6
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  api.orderDetailResponse:
    properties:
      id:
        type: integer
      payment_status:
        $ref: '#/definitions/sqlc.PaymentStatus'
      products:
        items:
          $ref: '#/definitions/api.productListResponse'
        type: array
      status:
        $ref: '#/definitions/sqlc.OrderStatus'
      total:
        type: number
    type: object
  api.orderResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payment_status:
        $ref: '#/definitions/sqlc.PaymentStatus'
      status:
        $ref: '#/definitions/sqlc.OrderStatus'
      total:
        type: number
      total_items:
        type: integer
      updated_at:
        type: string
    type: object
  api.productImage:
    properties:
      id:
        type: integer
      image_url:
        type: string
      is_primary:
        type: boolean
    type: object
  api.productListResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  api.productResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/api.productImage'
        type: array
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  api.updateCartItemRequest:
    properties:
      quantity:
        type: integer
    required:
    - quantity
    type: object
  api.updateProductRequest:
    properties:
      description:
        maxLength: 1000
        minLength: 10
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    type: object
  api.updateUserRequest:
    properties:
      email:
        maxLength: 255
        minLength: 6
        type: string
      full_name:
        maxLength: 32
        minLength: 3
        type: string
      role:
        $ref: '#/definitions/sqlc.UserRole'
      user_id:
        minimum: 1
        type: integer
    required:
    - user_id
    type: object
  api.userResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/api.addressResponse'
        type: array
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      password_changed_at:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  big.Int:
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  pgtype.Bool:
    properties:
      bool:
        type: boolean
      valid:
        type: boolean
    type: object
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Int8:
    properties:
      int64:
        type: integer
      valid:
        type: boolean
    type: object
  pgtype.Numeric:
    properties:
      exp:
        type: integer
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      int:
        $ref: '#/definitions/big.Int'
      naN:
        type: boolean
      valid:
        type: boolean
    type: object
  pgtype.Text:
    properties:
      string:
        type: string
      valid:
        type: boolean
    type: object
  pgtype.Timestamp:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        description: Time zone will be ignored when encoding to PostgreSQL.
        type: string
      valid:
        type: boolean
    type: object
  pgtype.Timestamptz:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        type: string
      valid:
        type: boolean
    type: object
  postgres.CheckoutCartTxResult:
    properties:
      cancelled_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      confirmed_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      created_at:
        type: string
      delivered_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/sqlc.OrderItem'
        type: array
      payment:
        $ref: '#/definitions/sqlc.Payment'
      refunded_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      status:
        $ref: '#/definitions/sqlc.OrderStatus'
      total_price:
        $ref: '#/definitions/pgtype.Numeric'
      updated_at:
        type: string
      user_address_id:
        type: integer
      user_id:
        type: integer
    type: object
  sqlc.Cart:
    properties:
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  sqlc.CartItem:
    properties:
      cart_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  sqlc.CreateUserRow:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/sqlc.UserRole'
      updated_at:
        type: string
      username:
        type: string
      verified_email:
        type: boolean
      verified_phone:
        type: boolean
    type: object
  sqlc.Image:
    properties:
      created_at:
        $ref: '#/definitions/pgtype.Timestamp'
      external_id:
        $ref: '#/definitions/pgtype.Text'
      id:
        type: integer
      image_url:
        type: string
      is_primary:
        $ref: '#/definitions/pgtype.Bool'
      product_id:
        $ref: '#/definitions/pgtype.Int8'
      updated_at:
        $ref: '#/definitions/pgtype.Timestamp'
      variant_id:
        $ref: '#/definitions/pgtype.Int8'
    type: object
  sqlc.NullPaymentGateway:
    properties:
      payment_gateway:
        $ref: '#/definitions/sqlc.PaymentGateway'
      valid:
        description: Valid is true if PaymentGateway is not NULL
        type: boolean
    type: object
  sqlc.Order:
    properties:
      cancelled_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      confirmed_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      created_at:
        type: string
      delivered_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      id:
        type: integer
      refunded_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      status:
        $ref: '#/definitions/sqlc.OrderStatus'
      total_price:
        $ref: '#/definitions/pgtype.Numeric'
      updated_at:
        type: string
      user_address_id:
        type: integer
      user_id:
        type: integer
    type: object
  sqlc.OrderItem:
    properties:
      created_at:
        type: string
      id:
        type: integer
      order_id:
        type: integer
      price:
        $ref: '#/definitions/pgtype.Numeric'
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  sqlc.OrderStatus:
    enum:
    - pending
    - confirmed
    - delivering
    - delivered
    - cancelled
    - refunded
    - completed
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusDelivering
    - OrderStatusDelivered
    - OrderStatusCancelled
    - OrderStatusRefunded
    - OrderStatusCompleted
  sqlc.Payment:
    properties:
      amount:
        $ref: '#/definitions/pgtype.Numeric'
      created_at:
        $ref: '#/definitions/pgtype.Timestamp'
      gateway:
        $ref: '#/definitions/sqlc.NullPaymentGateway'
      id:
        type: integer
      method:
        $ref: '#/definitions/sqlc.PaymentMethod'
      order_id:
        type: integer
      status:
        $ref: '#/definitions/sqlc.PaymentStatus'
      transaction_id:
        $ref: '#/definitions/pgtype.Text'
      updated_at:
        $ref: '#/definitions/pgtype.Timestamp'
    type: object
  sqlc.PaymentGateway:
    enum:
    - stripe
    - paypal
    - razorpay
    - visa
    - mastercard
    - amex
    - apple_pay
    - google_pay
    - amazon_pay
    - phone_pe
    - paytm
    - upi
    - wallet
    - cod
    - postpaid
    type: string
    x-enum-varnames:
    - PaymentGatewayStripe
    - PaymentGatewayPaypal
    - PaymentGatewayRazorpay
    - PaymentGatewayVisa
    - PaymentGatewayMastercard
    - PaymentGatewayAmex
    - PaymentGatewayApplePay
    - PaymentGatewayGooglePay
    - PaymentGatewayAmazonPay
    - PaymentGatewayPhonePe
    - PaymentGatewayPaytm
    - PaymentGatewayUpi
    - PaymentGatewayWallet
    - PaymentGatewayCod
    - PaymentGatewayPostpaid
  sqlc.PaymentMethod:
    enum:
    - credit_card
    - paypal
    - cod
    - debit_card
    - apple_pay
    - wallet
    - postpaid
    type: string
    x-enum-varnames:
    - PaymentMethodCreditCard
    - PaymentMethodPaypal
    - PaymentMethodCod
    - PaymentMethodDebitCard
    - PaymentMethodApplePay
    - PaymentMethodWallet
    - PaymentMethodPostpaid
  sqlc.PaymentStatus:
    enum:
    - pending
    - success
    - failed
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusSuccess
    - PaymentStatusFailed
  sqlc.Product:
    properties:
      archived:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        $ref: '#/definitions/pgtype.Numeric'
      sku:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  sqlc.UpdateUserRow:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/sqlc.UserRole'
      updated_at:
        type: string
      username:
        type: string
      verified_email:
        type: boolean
      verified_phone:
        type: boolean
    type: object
  sqlc.UserRole:
    enum:
    - admin
    - user
    - moderator
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleUser
    - UserRoleModerator
host: localhost:4000
info:
  contact: {}
  description: This is a sample server for a simple e-commerce API.
  title: E-Commerce API
paths:
  /address:
    get:
      consumes:
      - application/json
      description: Get list of addresses
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-array_api_AddressResponse'
      summary: Get list of addresses
      tags:
      - address
    post:
      consumes:
      - application/json
      description: Create a new address
      parameters:
      - description: Create Address
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.CreateAddressParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_AddressResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new address
      tags:
      - address
  /address/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove an address
      tags:
      - address
    put:
      consumes:
      - application/json
      description: Update an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Address
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.UpdateAddressParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_AddressResponse'
      summary: Update an address
      tags:
      - address
  /carts:
    get:
      consumes:
      - application/json
      description: get cart details by user ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_cartResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get cart details by user ID
      tags:
      - carts
    post:
      consumes:
      - application/json
      description: create a new cart for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new cart
      tags:
      - carts
  /carts/checkout:
    post:
      consumes:
      - application/json
      description: update product items in the cart
      parameters:
      - description: Update cart items input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.checkoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-postgres_CheckoutCartTxResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update product items in the cart
      tags:
      - carts
  /carts/clear:
    delete:
      consumes:
      - application/json
      description: clear the cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Clear the cart
      tags:
      - carts
  /carts/products:
    delete:
      consumes:
      - application/json
      description: remove a product from the cart
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product from the cart
      tags:
      - carts
    post:
      consumes:
      - application/json
      description: add a product to the cart
      parameters:
      - description: Add product to cart input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.addProductToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_CartItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Add a product to the cart
      tags:
      - carts
    put:
      consumes:
      - application/json
      description: update product items in the cart
      parameters:
      - description: Update cart items input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.updateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_CartItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update product items in the cart
      tags:
      - carts
  /orders:
    get:
      consumes:
      - application/json
      description: List orders of the current user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.listOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - ApiKeyAuth: []
      summary: List orders
      tags:
      - orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get order detail by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.orderDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - ApiKeyAuth: []
      summary: Get order detail
      tags:
      - orders
  /orders/{id}/cancel:
    put:
      consumes:
      - application/json
      description: Cancel order by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - ApiKeyAuth: []
      summary: Cancel order
      tags:
      - orders
  /orders/{id}/payment:
    put:
      consumes:
      - application/json
      description: Change order payment status by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Payment Status
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sqlc.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - ApiKeyAuth: []
      summary: Change order payment status
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Change order status by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sqlc.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - ApiKeyAuth: []
      summary: Change order status
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: get list of products
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.GenericListResponse-api_productListResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get list of products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: create a new product with the input payload
      parameters:
      - description: Product input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.createProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new product
      tags:
      - products
  /products/{product_id}:
    delete:
      consumes:
      - application/json
      description: remove a product by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product by ID
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get a product detail by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_productResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a product detail by ID
      tags:
      - product detail
    put:
      consumes:
      - application/json
      description: update a product by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Product input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.updateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a product by ID
      tags:
      - products
  /products/{product_id}/images:
    get:
      consumes:
      - application/json
      description: get list of product images by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-array_sqlc_Image'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get list of product images by ID
      tags:
      - products
  /products/{product_id}/images/{image_id}/primary:
    put:
      consumes:
      - application/json
      description: set a product image as primary by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Set a product image as primary by ID
      tags:
      - products
  /products/{product_id}/remove-image:
    delete:
      consumes:
      - application/json
      description: remove a product image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product image by ID
      tags:
      - products
  /products/{product_id}/upload-image:
    post:
      consumes:
      - application/json
      description: upload a product image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-array_sqlc_Image'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Upload a product image by ID
      tags:
      - products
  /users:
    get:
      consumes:
      - application/json
      description: Get user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_userResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get user info
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_CreateUserRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    patch:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-sqlc_UpdateUserRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update user info
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login to the system
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_loginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Login to the system
      tags:
      - users
swagger: "2.0"
