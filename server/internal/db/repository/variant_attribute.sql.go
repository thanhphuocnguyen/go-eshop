// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: variant_attribute.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateBulkVariantAttributesParams struct {
	VariantID   int64  `json:"variant_id"`
	AttributeID int32  `json:"attribute_id"`
	Value       string `json:"value"`
}

const createVariantAttribute = `-- name: CreateVariantAttribute :one
INSERT INTO variant_attributes (
    variant_id,
    attribute_id,
    value
) VALUES (
    $1, $2, $3
) RETURNING variant_attribute_id, variant_id, attribute_id, value, created_at, updated_at
`

type CreateVariantAttributeParams struct {
	VariantID   int64  `json:"variant_id"`
	AttributeID int32  `json:"attribute_id"`
	Value       string `json:"value"`
}

func (q *Queries) CreateVariantAttribute(ctx context.Context, arg CreateVariantAttributeParams) (VariantAttribute, error) {
	row := q.db.QueryRow(ctx, createVariantAttribute, arg.VariantID, arg.AttributeID, arg.Value)
	var i VariantAttribute
	err := row.Scan(
		&i.VariantAttributeID,
		&i.VariantID,
		&i.AttributeID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVariantAttribute = `-- name: GetVariantAttribute :one
SELECT
    variant_attribute_id, variant_id, attribute_id, value, created_at, updated_at
FROM
    variant_attributes
WHERE
    variant_attribute_id = $1
LIMIT 1
`

func (q *Queries) GetVariantAttribute(ctx context.Context, variantAttributeID int32) (VariantAttribute, error) {
	row := q.db.QueryRow(ctx, getVariantAttribute, variantAttributeID)
	var i VariantAttribute
	err := row.Scan(
		&i.VariantAttributeID,
		&i.VariantID,
		&i.AttributeID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVariantAttributes = `-- name: GetVariantAttributes :many
SELECT
    variant_attribute_id, variant_id, attribute_id, value, created_at, updated_at
FROM
    variant_attributes
WHERE
    variant_id = $1
`

func (q *Queries) GetVariantAttributes(ctx context.Context, variantID int64) ([]VariantAttribute, error) {
	rows, err := q.db.Query(ctx, getVariantAttributes, variantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VariantAttribute
	for rows.Next() {
		var i VariantAttribute
		if err := rows.Scan(
			&i.VariantAttributeID,
			&i.VariantID,
			&i.AttributeID,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeVariantAttribute = `-- name: RemoveVariantAttribute :exec
DELETE FROM
    variant_attributes
WHERE
    variant_attribute_id = $1
`

func (q *Queries) RemoveVariantAttribute(ctx context.Context, variantAttributeID int32) error {
	_, err := q.db.Exec(ctx, removeVariantAttribute, variantAttributeID)
	return err
}

const updateVariantAttribute = `-- name: UpdateVariantAttribute :one
UPDATE
    variant_attributes
SET
    value = COALESCE($2, value)
WHERE
    variant_attribute_id = $1
RETURNING variant_attribute_id, variant_id, attribute_id, value, created_at, updated_at
`

type UpdateVariantAttributeParams struct {
	VariantAttributeID int32       `json:"variant_attribute_id"`
	Value              pgtype.Text `json:"value"`
}

func (q *Queries) UpdateVariantAttribute(ctx context.Context, arg UpdateVariantAttributeParams) (VariantAttribute, error) {
	row := q.db.QueryRow(ctx, updateVariantAttribute, arg.VariantAttributeID, arg.Value)
	var i VariantAttribute
	err := row.Scan(
		&i.VariantAttributeID,
		&i.VariantID,
		&i.AttributeID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
