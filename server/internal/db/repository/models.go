// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CardType string

const (
	CardTypeDebit  CardType = "debit"
	CardTypeCredit CardType = "credit"
)

func (e *CardType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardType(s)
	case string:
		*e = CardType(s)
	default:
		return fmt.Errorf("unsupported scan type for CardType: %T", src)
	}
	return nil
}

type NullCardType struct {
	CardType CardType `json:"card_type"`
	Valid    bool     `json:"valid"` // Valid is true if CardType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardType) Scan(value interface{}) error {
	if value == nil {
		ns.CardType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardType), nil
}

type CartStatus string

const (
	CartStatusActive     CartStatus = "active"
	CartStatusCheckedOut CartStatus = "checked_out"
)

func (e *CartStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CartStatus(s)
	case string:
		*e = CartStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CartStatus: %T", src)
	}
	return nil
}

type NullCartStatus struct {
	CartStatus CartStatus `json:"cart_status"`
	Valid      bool       `json:"valid"` // Valid is true if CartStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCartStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CartStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CartStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCartStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CartStatus), nil
}

type EntityType string

const (
	EntityTypeProduct        EntityType = "product"
	EntityTypeProductVariant EntityType = "product_variant"
	EntityTypeCategory       EntityType = "category"
	EntityTypeBrand          EntityType = "brand"
	EntityTypeUser           EntityType = "user"
	EntityTypeOrder          EntityType = "order"
	EntityTypeCart           EntityType = "cart"
	EntityTypePayment        EntityType = "payment"
)

func (e *EntityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntityType(s)
	case string:
		*e = EntityType(s)
	default:
		return fmt.Errorf("unsupported scan type for EntityType: %T", src)
	}
	return nil
}

type NullEntityType struct {
	EntityType EntityType `json:"entity_type"`
	Valid      bool       `json:"valid"` // Valid is true if EntityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntityType) Scan(value interface{}) error {
	if value == nil {
		ns.EntityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntityType), nil
}

type ImageRole string

const (
	ImageRoleGallery    ImageRole = "gallery"
	ImageRoleThumbnail  ImageRole = "thumbnail"
	ImageRoleBanner     ImageRole = "banner"
	ImageRoleAvatar     ImageRole = "avatar"
	ImageRoleCover      ImageRole = "cover"
	ImageRoleLogo       ImageRole = "logo"
	ImageRoleIcon       ImageRole = "icon"
	ImageRoleBackground ImageRole = "background"
	ImageRoleProduct    ImageRole = "product"
	ImageRoleCategory   ImageRole = "category"
	ImageRoleBrand      ImageRole = "brand"
	ImageRoleUser       ImageRole = "user"
	ImageRoleOrder      ImageRole = "order"
	ImageRoleCart       ImageRole = "cart"
	ImageRolePayment    ImageRole = "payment"
)

func (e *ImageRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageRole(s)
	case string:
		*e = ImageRole(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageRole: %T", src)
	}
	return nil
}

type NullImageRole struct {
	ImageRole ImageRole `json:"image_role"`
	Valid     bool      `json:"valid"` // Valid is true if ImageRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageRole) Scan(value interface{}) error {
	if value == nil {
		ns.ImageRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageRole), nil
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "pending"
	OrderStatusConfirmed  OrderStatus = "confirmed"
	OrderStatusDelivering OrderStatus = "delivering"
	OrderStatusDelivered  OrderStatus = "delivered"
	OrderStatusCancelled  OrderStatus = "cancelled"
	OrderStatusRefunded   OrderStatus = "refunded"
	OrderStatusCompleted  OrderStatus = "completed"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type PaymentGateway string

const (
	PaymentGatewayStripe     PaymentGateway = "stripe"
	PaymentGatewayPaypal     PaymentGateway = "paypal"
	PaymentGatewayVisa       PaymentGateway = "visa"
	PaymentGatewayMastercard PaymentGateway = "mastercard"
	PaymentGatewayApplePay   PaymentGateway = "apple_pay"
	PaymentGatewayPostpaid   PaymentGateway = "postpaid"
	PaymentGatewayMomo       PaymentGateway = "momo"
	PaymentGatewayZaloPay    PaymentGateway = "zalo_pay"
	PaymentGatewayVnPay      PaymentGateway = "vn_pay"
)

func (e *PaymentGateway) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentGateway(s)
	case string:
		*e = PaymentGateway(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentGateway: %T", src)
	}
	return nil
}

type NullPaymentGateway struct {
	PaymentGateway PaymentGateway `json:"payment_gateway"`
	Valid          bool           `json:"valid"` // Valid is true if PaymentGateway is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentGateway) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentGateway, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentGateway.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentGateway) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentGateway), nil
}

type PaymentMethod string

const (
	PaymentMethodCreditCard   PaymentMethod = "credit_card"
	PaymentMethodPaypal       PaymentMethod = "paypal"
	PaymentMethodStripe       PaymentMethod = "stripe"
	PaymentMethodApplePay     PaymentMethod = "apple_pay"
	PaymentMethodBankTransfer PaymentMethod = "bank_transfer"
	PaymentMethodCod          PaymentMethod = "cod"
)

func (e *PaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethod(s)
	case string:
		*e = PaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentMethod struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethod), nil
}

type PaymentStatus string

const (
	PaymentStatusPending    PaymentStatus = "pending"
	PaymentStatusSuccess    PaymentStatus = "success"
	PaymentStatusFailed     PaymentStatus = "failed"
	PaymentStatusCancelled  PaymentStatus = "cancelled"
	PaymentStatusRefunded   PaymentStatus = "refunded"
	PaymentStatusProcessing PaymentStatus = "processing"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "admin"
	UserRoleUser      UserRole = "user"
	UserRoleModerator UserRole = "moderator"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Attribute struct {
	ID        int32     `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

type AttributeValue struct {
	ID           int32     `json:"id"`
	AttributeID  int32     `json:"attribute_id"`
	Name         string    `json:"name"`
	Code         string    `json:"code"`
	IsActive     *bool     `json:"is_active"`
	DisplayOrder int16     `json:"display_order"`
	CreatedAt    time.Time `json:"created_at"`
}

type Brand struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	ImageUrl     *string   `json:"image_url"`
	ImageID      *string   `json:"image_id"`
	Description  *string   `json:"description"`
	Slug         string    `json:"slug"`
	Remarkable   *bool     `json:"remarkable"`
	DisplayOrder *int32    `json:"display_order"`
	Published    bool      `json:"published"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type Cart struct {
	ID        uuid.UUID   `json:"id"`
	UserID    pgtype.UUID `json:"user_id"`
	SessionID *string     `json:"session_id"`
	OrderID   pgtype.UUID `json:"order_id"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedAt time.Time   `json:"created_at"`
}

type CartItem struct {
	ID        uuid.UUID `json:"id"`
	CartID    uuid.UUID `json:"cart_id"`
	VariantID uuid.UUID `json:"variant_id"`
	Quantity  int16     `json:"quantity"`
	AddedAt   time.Time `json:"added_at"`
}

type Category struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Description  *string   `json:"description"`
	ImageUrl     *string   `json:"image_url"`
	ImageID      *string   `json:"image_id"`
	Published    bool      `json:"published"`
	Remarkable   *bool     `json:"remarkable"`
	Slug         string    `json:"slug"`
	DisplayOrder *int32    `json:"display_order"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type Collection struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	ImageUrl     *string   `json:"image_url"`
	ImageID      *string   `json:"image_id"`
	Description  *string   `json:"description"`
	Slug         string    `json:"slug"`
	Remarkable   *bool     `json:"remarkable"`
	DisplayOrder *int32    `json:"display_order"`
	Published    bool      `json:"published"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type FeaturedProduct struct {
	ID         int32       `json:"id"`
	FeaturedID *int32      `json:"featured_id"`
	ProductID  pgtype.UUID `json:"product_id"`
	SortOrder  int16       `json:"sort_order"`
}

type FeaturedSection struct {
	ID          int32     `json:"id"`
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	ImageUrl    *string   `json:"image_url"`
	ImageID     *string   `json:"image_id"`
	Description *string   `json:"description"`
	Remarkable  *bool     `json:"remarkable"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type Image struct {
	ID         int32     `json:"id"`
	ExternalID string    `json:"external_id"`
	Url        string    `json:"url"`
	AltText    *string   `json:"alt_text"`
	Caption    *string   `json:"caption"`
	MimeType   *string   `json:"mime_type"`
	FileSize   *int64    `json:"file_size"`
	Width      *int32    `json:"width"`
	Height     *int32    `json:"height"`
	UploadedAt time.Time `json:"uploaded_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type ImageAssignment struct {
	ID           int32     `json:"id"`
	ImageID      int32     `json:"image_id"`
	EntityID     uuid.UUID `json:"entity_id"`
	EntityType   string    `json:"entity_type"`
	DisplayOrder int16     `json:"display_order"`
	Role         string    `json:"role"`
	CreatedAt    time.Time `json:"created_at"`
}

type Order struct {
	ID              uuid.UUID               `json:"id"`
	CustomerID      uuid.UUID               `json:"customer_id"`
	CustomerEmail   string                  `json:"customer_email"`
	CustomerName    string                  `json:"customer_name"`
	CustomerPhone   string                  `json:"customer_phone"`
	ShippingAddress ShippingAddressSnapshot `json:"shipping_address"`
	TotalPrice      pgtype.Numeric          `json:"total_price"`
	Status          OrderStatus             `json:"status"`
	ConfirmedAt     pgtype.Timestamptz      `json:"confirmed_at"`
	DeliveredAt     pgtype.Timestamptz      `json:"delivered_at"`
	CancelledAt     pgtype.Timestamptz      `json:"cancelled_at"`
	ShippingMethod  *string                 `json:"shipping_method"`
	RefundedAt      pgtype.Timestamptz      `json:"refunded_at"`
	OrderDate       time.Time               `json:"order_date"`
	UpdatedAt       time.Time               `json:"updated_at"`
	CreatedAt       time.Time               `json:"created_at"`
}

type OrderItem struct {
	ID                   uuid.UUID               `json:"id"`
	OrderID              uuid.UUID               `json:"order_id"`
	VariantID            uuid.UUID               `json:"variant_id"`
	Quantity             int16                   `json:"quantity"`
	PricePerUnitSnapshot pgtype.Numeric          `json:"price_per_unit_snapshot"`
	LineTotalSnapshot    pgtype.Numeric          `json:"line_total_snapshot"`
	ProductNameSnapshot  string                  `json:"product_name_snapshot"`
	VariantSkuSnapshot   string                  `json:"variant_sku_snapshot"`
	AttributesSnapshot   []AttributeDataSnapshot `json:"attributes_snapshot"`
	CreatedAt            time.Time               `json:"created_at"`
	UpdatedAt            time.Time               `json:"updated_at"`
}

type Payment struct {
	ID                     uuid.UUID          `json:"id"`
	OrderID                uuid.UUID          `json:"order_id"`
	Amount                 pgtype.Numeric     `json:"amount"`
	Status                 PaymentStatus      `json:"status"`
	PaymentMethod          PaymentMethod      `json:"payment_method"`
	PaymentGateway         NullPaymentGateway `json:"payment_gateway"`
	RefundID               *string            `json:"refund_id"`
	GatewayPaymentIntentID *string            `json:"gateway_payment_intent_id"`
	GatewayChargeID        *string            `json:"gateway_charge_id"`
	ErrorCode              *string            `json:"error_code"`
	ErrorMessage           []byte             `json:"error_message"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
}

type PaymentTransaction struct {
	ID                     uuid.UUID          `json:"id"`
	PaymentID              uuid.UUID          `json:"payment_id"`
	Amount                 pgtype.Numeric     `json:"amount"`
	Status                 PaymentStatus      `json:"status"`
	GatewayTransactionID   *string            `json:"gateway_transaction_id"`
	GatewayResponseCode    *string            `json:"gateway_response_code"`
	GatewayResponseMessage []byte             `json:"gateway_response_message"`
	TransactionDate        pgtype.Timestamptz `json:"transaction_date"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
}

type Product struct {
	ID               uuid.UUID      `json:"id"`
	Name             string         `json:"name"`
	Description      string         `json:"description"`
	ShortDescription *string        `json:"short_description"`
	Attributes       []int32        `json:"attributes"`
	BasePrice        pgtype.Numeric `json:"base_price"`
	BaseSku          string         `json:"base_sku"`
	Slug             string         `json:"slug"`
	IsActive         *bool          `json:"is_active"`
	CategoryID       pgtype.UUID    `json:"category_id"`
	CollectionID     pgtype.UUID    `json:"collection_id"`
	BrandID          pgtype.UUID    `json:"brand_id"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
}

type ProductVariant struct {
	ID          uuid.UUID      `json:"id"`
	ProductID   uuid.UUID      `json:"product_id"`
	Description *string        `json:"description"`
	Sku         string         `json:"sku"`
	Price       pgtype.Numeric `json:"price"`
	Stock       int32          `json:"stock"`
	Weight      pgtype.Numeric `json:"weight"`
	IsActive    *bool          `json:"is_active"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	Blocked      bool      `json:"blocked"`
	ExpiredAt    time.Time `json:"expired_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	ID                uuid.UUID `json:"id"`
	Role              UserRole  `json:"role"`
	Username          string    `json:"username"`
	Email             string    `json:"email"`
	Phone             string    `json:"phone"`
	Fullname          string    `json:"fullname"`
	HashedPassword    string    `json:"hashed_password"`
	VerifiedEmail     bool      `json:"verified_email"`
	VerifiedPhone     bool      `json:"verified_phone"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	CreatedAt         time.Time `json:"created_at"`
}

type UserAddress struct {
	ID        int64     `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Phone     string    `json:"phone"`
	Street    string    `json:"street"`
	Ward      *string   `json:"ward"`
	District  string    `json:"district"`
	City      string    `json:"city"`
	Default   bool      `json:"default"`
	Deleted   bool      `json:"deleted"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type UserPaymentInfo struct {
	ID             int32              `json:"id"`
	UserID         pgtype.UUID        `json:"user_id"`
	CardNumber     string             `json:"card_number"`
	CardholderName string             `json:"cardholder_name"`
	ExpirationDate pgtype.Date        `json:"expiration_date"`
	BillingAddress string             `json:"billing_address"`
	Default        *bool              `json:"default"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type VariantAttributeValue struct {
	VariantID        uuid.UUID `json:"variant_id"`
	AttributeValueID int32     `json:"attribute_value_id"`
}

type VerifyEmail struct {
	ID         int32     `json:"id"`
	UserID     uuid.UUID `json:"user_id"`
	Email      string    `json:"email"`
	VerifyCode string    `json:"verify_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}
