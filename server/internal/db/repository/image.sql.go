// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: image.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (external_id, url, alt_text, caption, mime_type, file_size, width, height) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, external_id, url, alt_text, caption, mime_type, file_size, width, height, uploaded_at, updated_at
`

type CreateImageParams struct {
	ExternalID string      `json:"external_id"`
	Url        string      `json:"url"`
	AltText    pgtype.Text `json:"alt_text"`
	Caption    pgtype.Text `json:"caption"`
	MimeType   pgtype.Text `json:"mime_type"`
	FileSize   pgtype.Int8 `json:"file_size"`
	Width      pgtype.Int4 `json:"width"`
	Height     pgtype.Int4 `json:"height"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.ExternalID,
		arg.Url,
		arg.AltText,
		arg.Caption,
		arg.MimeType,
		arg.FileSize,
		arg.Width,
		arg.Height,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Url,
		&i.AltText,
		&i.Caption,
		&i.MimeType,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.UploadedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createImageAssignment = `-- name: CreateImageAssignment :one
INSERT INTO image_assignments (image_id, entity_id, entity_type, display_order, role) VALUES ($1, $2, $3, $4, $5) RETURNING id, image_id, entity_id, entity_type, display_order, role, created_at
`

type CreateImageAssignmentParams struct {
	ImageID      int32     `json:"image_id"`
	EntityID     uuid.UUID `json:"entity_id"`
	EntityType   string    `json:"entity_type"`
	DisplayOrder int16     `json:"display_order"`
	Role         string    `json:"role"`
}

func (q *Queries) CreateImageAssignment(ctx context.Context, arg CreateImageAssignmentParams) (ImageAssignment, error) {
	row := q.db.QueryRow(ctx, createImageAssignment,
		arg.ImageID,
		arg.EntityID,
		arg.EntityType,
		arg.DisplayOrder,
		arg.Role,
	)
	var i ImageAssignment
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.EntityID,
		&i.EntityType,
		&i.DisplayOrder,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProductImage = `-- name: DeleteProductImage :exec
DELETE FROM images WHERE id = $1
`

func (q *Queries) DeleteProductImage(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProductImage, id)
	return err
}

const deleteProductImageAssignment = `-- name: DeleteProductImageAssignment :exec
DELETE FROM image_assignments WHERE image_id = $1 AND entity_id = $2 AND entity_type = $3
`

type DeleteProductImageAssignmentParams struct {
	ImageID    int32     `json:"image_id"`
	EntityID   uuid.UUID `json:"entity_id"`
	EntityType string    `json:"entity_type"`
}

func (q *Queries) DeleteProductImageAssignment(ctx context.Context, arg DeleteProductImageAssignmentParams) error {
	_, err := q.db.Exec(ctx, deleteProductImageAssignment, arg.ImageID, arg.EntityID, arg.EntityType)
	return err
}

const getImageFromID = `-- name: GetImageFromID :one
SELECT id, external_id, url, alt_text, caption, mime_type, file_size, width, height, uploaded_at, updated_at FROM images WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImageFromID(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRow(ctx, getImageFromID, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Url,
		&i.AltText,
		&i.Caption,
		&i.MimeType,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.UploadedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductImageByEntityID = `-- name: GetProductImageByEntityID :one
SELECT image_assignments.id, image_id, entity_id, entity_type, display_order, role, created_at, images.id, external_id, url, alt_text, caption, mime_type, file_size, width, height, uploaded_at, updated_at FROM image_assignments
JOIN images ON images.id = image_assignments.image_id
WHERE entity_id = $1 LIMIT 1
`

type GetProductImageByEntityIDRow struct {
	ID           int32       `json:"id"`
	ImageID      int32       `json:"image_id"`
	EntityID     uuid.UUID   `json:"entity_id"`
	EntityType   string      `json:"entity_type"`
	DisplayOrder int16       `json:"display_order"`
	Role         string      `json:"role"`
	CreatedAt    time.Time   `json:"created_at"`
	ID_2         int32       `json:"id_2"`
	ExternalID   string      `json:"external_id"`
	Url          string      `json:"url"`
	AltText      pgtype.Text `json:"alt_text"`
	Caption      pgtype.Text `json:"caption"`
	MimeType     pgtype.Text `json:"mime_type"`
	FileSize     pgtype.Int8 `json:"file_size"`
	Width        pgtype.Int4 `json:"width"`
	Height       pgtype.Int4 `json:"height"`
	UploadedAt   time.Time   `json:"uploaded_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) GetProductImageByEntityID(ctx context.Context, entityID uuid.UUID) (GetProductImageByEntityIDRow, error) {
	row := q.db.QueryRow(ctx, getProductImageByEntityID, entityID)
	var i GetProductImageByEntityIDRow
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.EntityID,
		&i.EntityType,
		&i.DisplayOrder,
		&i.Role,
		&i.CreatedAt,
		&i.ID_2,
		&i.ExternalID,
		&i.Url,
		&i.AltText,
		&i.Caption,
		&i.MimeType,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.UploadedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductImageByExternalID = `-- name: GetProductImageByExternalID :one
SELECT id, external_id, url, alt_text, caption, mime_type, file_size, width, height, uploaded_at, updated_at FROM images WHERE external_id = $1 LIMIT 1
`

func (q *Queries) GetProductImageByExternalID(ctx context.Context, externalID string) (Image, error) {
	row := q.db.QueryRow(ctx, getProductImageByExternalID, externalID)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Url,
		&i.AltText,
		&i.Caption,
		&i.MimeType,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.UploadedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductImagesProductID = `-- name: GetProductImagesProductID :many
SELECT image_assignments.id, image_id, entity_id, entity_type, display_order, role, created_at, images.id, external_id, url, alt_text, caption, mime_type, file_size, width, height, uploaded_at, updated_at FROM image_assignments
JOIN images ON images.id = image_assignments.image_id
WHERE entity_id = $1 AND entity_type = 'product' ORDER BY display_order
`

type GetProductImagesProductIDRow struct {
	ID           int32       `json:"id"`
	ImageID      int32       `json:"image_id"`
	EntityID     uuid.UUID   `json:"entity_id"`
	EntityType   string      `json:"entity_type"`
	DisplayOrder int16       `json:"display_order"`
	Role         string      `json:"role"`
	CreatedAt    time.Time   `json:"created_at"`
	ID_2         int32       `json:"id_2"`
	ExternalID   string      `json:"external_id"`
	Url          string      `json:"url"`
	AltText      pgtype.Text `json:"alt_text"`
	Caption      pgtype.Text `json:"caption"`
	MimeType     pgtype.Text `json:"mime_type"`
	FileSize     pgtype.Int8 `json:"file_size"`
	Width        pgtype.Int4 `json:"width"`
	Height       pgtype.Int4 `json:"height"`
	UploadedAt   time.Time   `json:"uploaded_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) GetProductImagesProductID(ctx context.Context, entityID uuid.UUID) ([]GetProductImagesProductIDRow, error) {
	rows, err := q.db.Query(ctx, getProductImagesProductID, entityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductImagesProductIDRow{}
	for rows.Next() {
		var i GetProductImagesProductIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ImageID,
			&i.EntityID,
			&i.EntityType,
			&i.DisplayOrder,
			&i.Role,
			&i.CreatedAt,
			&i.ID_2,
			&i.ExternalID,
			&i.Url,
			&i.AltText,
			&i.Caption,
			&i.MimeType,
			&i.FileSize,
			&i.Width,
			&i.Height,
			&i.UploadedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductImage = `-- name: UpdateProductImage :exec
UPDATE images 
SET 
    url = COALESCE($2, url),
    external_id = COALESCE($3, external_id) 
WHERE id = $1
`

type UpdateProductImageParams struct {
	ID         int32       `json:"id"`
	Url        pgtype.Text `json:"url"`
	ExternalID pgtype.Text `json:"external_id"`
}

func (q *Queries) UpdateProductImage(ctx context.Context, arg UpdateProductImageParams) error {
	_, err := q.db.Exec(ctx, updateProductImage, arg.ID, arg.Url, arg.ExternalID)
	return err
}
