// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart_item.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addProductToCart = `-- name: AddProductToCart :one
INSERT INTO cart_items 
    (cart_id, product_id, variant_id, quantity) 
VALUES 
    ($1, $2, $3, $4) 
RETURNING cart_id, cart_item_id, product_id, variant_id, quantity, created_at
`

type AddProductToCartParams struct {
	CartID    uuid.UUID `json:"cart_id"`
	ProductID int64     `json:"product_id"`
	VariantID int64     `json:"variant_id"`
	Quantity  int16     `json:"quantity"`
}

func (q *Queries) AddProductToCart(ctx context.Context, arg AddProductToCartParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, addProductToCart,
		arg.CartID,
		arg.ProductID,
		arg.VariantID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.CartID,
		&i.CartItemID,
		&i.ProductID,
		&i.VariantID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items WHERE cart_id = $1
`

func (q *Queries) ClearCart(ctx context.Context, cartID uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearCart, cartID)
	return err
}

const countCartItem = `-- name: CountCartItem :one
SELECT COUNT(*) FROM cart_items WHERE cart_id = $1
`

func (q *Queries) CountCartItem(ctx context.Context, cartID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItem, cartID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT cart_id, cart_item_id, product_id, variant_id, quantity, created_at FROM cart_items WHERE cart_item_id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, cartItemID int32) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, cartItemID)
	var i CartItem
	err := row.Scan(
		&i.CartID,
		&i.CartItemID,
		&i.ProductID,
		&i.VariantID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getCartItemByVariantID = `-- name: GetCartItemByVariantID :one
SELECT cart_id, cart_item_id, product_id, variant_id, quantity, created_at 
FROM 
    cart_items 
WHERE 
    variant_id = $1
LIMIT 1
`

func (q *Queries) GetCartItemByVariantID(ctx context.Context, variantID int64) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByVariantID, variantID)
	var i CartItem
	err := row.Scan(
		&i.CartID,
		&i.CartItemID,
		&i.ProductID,
		&i.VariantID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getCartItemWithProduct = `-- name: GetCartItemWithProduct :one
SELECT ci.cart_id, ci.cart_item_id, ci.product_id, ci.variant_id, ci.quantity, ci.created_at, 
    p.name AS product_name,
    pv.price, pv.stock_quantity, pv.sku,
    img.image_url
FROM cart_items ci
JOIN products AS p ON ci.product_id = p.product_id
JOIN product_variants AS pv ON ci.variant_id = p.variant_id
JOIN variant_attributes AS va ON pv.variant_id = va.variant_id
LEFT JOIN images as img ON p.product_id = img.product_id AND img.primary = true
WHERE ci.cart_item_id = $1
ORDER BY ci.created_at DESC, ci.cart_item_id DESC, p.product_id, pv.variant_id, va.attribute_id
`

type GetCartItemWithProductRow struct {
	CartID        uuid.UUID      `json:"cart_id"`
	CartItemID    int32          `json:"cart_item_id"`
	ProductID     int64          `json:"product_id"`
	VariantID     int64          `json:"variant_id"`
	Quantity      int16          `json:"quantity"`
	CreatedAt     time.Time      `json:"created_at"`
	ProductName   string         `json:"product_name"`
	Price         pgtype.Numeric `json:"price"`
	StockQuantity int32          `json:"stock_quantity"`
	Sku           pgtype.Text    `json:"sku"`
	ImageUrl      pgtype.Text    `json:"image_url"`
}

func (q *Queries) GetCartItemWithProduct(ctx context.Context, cartItemID int32) (GetCartItemWithProductRow, error) {
	row := q.db.QueryRow(ctx, getCartItemWithProduct, cartItemID)
	var i GetCartItemWithProductRow
	err := row.Scan(
		&i.CartID,
		&i.CartItemID,
		&i.ProductID,
		&i.VariantID,
		&i.Quantity,
		&i.CreatedAt,
		&i.ProductName,
		&i.Price,
		&i.StockQuantity,
		&i.Sku,
		&i.ImageUrl,
	)
	return i, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT cart_items.cart_id, cart_items.cart_item_id, cart_items.product_id, cart_items.variant_id, cart_items.quantity, cart_items.created_at, 
    p.name AS product_name,
    img.image_url AS image_url,
    pv.price, pv.stock_quantity, pv.sku,
    va.variant_attribute_id, va.value AS attribute_value,
    a.name AS attribute_name
FROM cart_items
JOIN products AS p ON cart_items.product_id = p.product_id
JOIN product_variants AS pv ON cart_items.variant_id = pv.variant_id
JOIN variant_attributes AS va ON pv.variant_id = va.variant_id
JOIN attributes AS a ON av.attribute_id = a.attribute_id
LEFT JOIN images as img ON p.product_id = img.product_id AND img.primary = true
WHERE cart_id = $1
ORDER BY cart_items.created_at DESC, cart_items.cart_item_id DESC, p.product_id, pv.variant_id, va.attribute_id
`

type GetCartItemsRow struct {
	CartID             uuid.UUID      `json:"cart_id"`
	CartItemID         int32          `json:"cart_item_id"`
	ProductID          int64          `json:"product_id"`
	VariantID          int64          `json:"variant_id"`
	Quantity           int16          `json:"quantity"`
	CreatedAt          time.Time      `json:"created_at"`
	ProductName        string         `json:"product_name"`
	ImageUrl           pgtype.Text    `json:"image_url"`
	Price              pgtype.Numeric `json:"price"`
	StockQuantity      int32          `json:"stock_quantity"`
	Sku                pgtype.Text    `json:"sku"`
	VariantAttributeID int32          `json:"variant_attribute_id"`
	AttributeValue     string         `json:"attribute_value"`
	AttributeName      string         `json:"attribute_name"`
}

func (q *Queries) GetCartItems(ctx context.Context, cartID uuid.UUID) ([]GetCartItemsRow, error) {
	rows, err := q.db.Query(ctx, getCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartItemsRow
	for rows.Next() {
		var i GetCartItemsRow
		if err := rows.Scan(
			&i.CartID,
			&i.CartItemID,
			&i.ProductID,
			&i.VariantID,
			&i.Quantity,
			&i.CreatedAt,
			&i.ProductName,
			&i.ImageUrl,
			&i.Price,
			&i.StockQuantity,
			&i.Sku,
			&i.VariantAttributeID,
			&i.AttributeValue,
			&i.AttributeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items SET quantity = $1 WHERE cart_item_id = $2 RETURNING cart_id, cart_item_id, product_id, variant_id, quantity, created_at
`

type UpdateCartItemQuantityParams struct {
	Quantity   int16 `json:"quantity"`
	CartItemID int32 `json:"cart_item_id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.Quantity, arg.CartItemID)
	return err
}
