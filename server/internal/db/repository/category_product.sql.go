// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category_product.sql

package repository

import (
	"context"
)

const addProductToCollection = `-- name: AddProductToCollection :one
INSERT INTO
    category_products (category_id, product_id, sort_order)
VALUES
    ($1, $2, $3)
RETURNING category_id, product_id, sort_order
`

type AddProductToCollectionParams struct {
	CategoryID int32 `json:"category_id"`
	ProductID  int64 `json:"product_id"`
	SortOrder  int16 `json:"sort_order"`
}

func (q *Queries) AddProductToCollection(ctx context.Context, arg AddProductToCollectionParams) (CategoryProduct, error) {
	row := q.db.QueryRow(ctx, addProductToCollection, arg.CategoryID, arg.ProductID, arg.SortOrder)
	var i CategoryProduct
	err := row.Scan(&i.CategoryID, &i.ProductID, &i.SortOrder)
	return i, err
}

const getCollectionProduct = `-- name: GetCollectionProduct :one
SELECT
    p.product_id, p.name, p.description, p.archived, p.created_at, p.updated_at
FROM
    products p
JOIN category_products cp ON p.product_id = cp.product_id
WHERE
    cp.category_id = $1
    AND cp.product_id = $2
`

type GetCollectionProductParams struct {
	CategoryID int32 `json:"category_id"`
	ProductID  int64 `json:"product_id"`
}

func (q *Queries) GetCollectionProduct(ctx context.Context, arg GetCollectionProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, getCollectionProduct, arg.CategoryID, arg.ProductID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCollectionProducts = `-- name: GetCollectionProducts :many
SELECT
    p.product_id, p.name, p.description, p.archived, p.created_at, p.updated_at
FROM
    products p
    JOIN category_products cp ON p.product_id = cp.product_id
WHERE
    cp.category_id = $1
`

func (q *Queries) GetCollectionProducts(ctx context.Context, categoryID int32) ([]Product, error) {
	rows, err := q.db.Query(ctx, getCollectionProducts, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxSortOrderInCollection = `-- name: GetMaxSortOrderInCollection :one
SELECT
    max(sort_order)::smallint
FROM
    category_products
WHERE
    category_id = $1
`

func (q *Queries) GetMaxSortOrderInCollection(ctx context.Context, categoryID int32) (int16, error) {
	row := q.db.QueryRow(ctx, getMaxSortOrderInCollection, categoryID)
	var column_1 int16
	err := row.Scan(&column_1)
	return column_1, err
}

const removeProductFromCollection = `-- name: RemoveProductFromCollection :exec
DELETE FROM
    category_products
WHERE
    category_id = $1
    AND product_id = $2
`

type RemoveProductFromCollectionParams struct {
	CategoryID int32 `json:"category_id"`
	ProductID  int64 `json:"product_id"`
}

func (q *Queries) RemoveProductFromCollection(ctx context.Context, arg RemoveProductFromCollectionParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCollection, arg.CategoryID, arg.ProductID)
	return err
}

const updateProductSortOrderInCollection = `-- name: UpdateProductSortOrderInCollection :exec
UPDATE
    category_products
SET
    sort_order = $3
WHERE
    category_id = $1
    AND product_id = $2
`

type UpdateProductSortOrderInCollectionParams struct {
	CategoryID int32 `json:"category_id"`
	ProductID  int64 `json:"product_id"`
	SortOrder  int16 `json:"sort_order"`
}

func (q *Queries) UpdateProductSortOrderInCollection(ctx context.Context, arg UpdateProductSortOrderInCollectionParams) error {
	_, err := q.db.Exec(ctx, updateProductSortOrderInCollection, arg.CategoryID, arg.ProductID, arg.SortOrder)
	return err
}
