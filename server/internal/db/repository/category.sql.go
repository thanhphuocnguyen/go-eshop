// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO categories (name, sort_order, image_url, published)
VALUES ($1, $2, $3, $4)
RETURNING category_id, name, sort_order, image_url, published, created_at, updated_at
`

type CreateCollectionParams struct {
	Name      string      `json:"name"`
	SortOrder int16       `json:"sort_order"`
	ImageUrl  pgtype.Text `json:"image_url"`
	Published bool        `json:"published"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCollection,
		arg.Name,
		arg.SortOrder,
		arg.ImageUrl,
		arg.Published,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.SortOrder,
		&i.ImageUrl,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCollection = `-- name: GetCollection :one
SELECT category_id, name, sort_order, image_url, published, created_at, updated_at
FROM categories
WHERE category_id = $1
LIMIT 1
`

func (q *Queries) GetCollection(ctx context.Context, categoryID int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCollection, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.SortOrder,
		&i.ImageUrl,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
