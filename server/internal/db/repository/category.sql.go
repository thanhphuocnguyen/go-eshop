// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCategories = `-- name: CountCategories :one
SELECT count(*)
FROM categories
WHERE category_id = COALESCE($1, category_id)
`

func (q *Queries) CountCategories(ctx context.Context, categoryID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, image_url, sort_order)
VALUES (
    $1,
    $2,
    COALESCE($3, COALESCE((SELECT MAX(sort_order) + 1 FROM categories), 1))
)
RETURNING category_id, name, image_url, sort_order, published, created_at
`

type CreateCategoryParams struct {
	Name      string      `json:"name"`
	ImageUrl  pgtype.Text `json:"image_url"`
	SortOrder interface{} `json:"sort_order"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.ImageUrl, arg.SortOrder)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.ImageUrl,
		&i.SortOrder,
		&i.Published,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE category_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, categoryID)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT 
    c.category_id, c.name, c.image_url, c.sort_order, c.published, c.created_at, 
    p.name as product_name, p.product_id, p.description,
    MIN(pv.price) as price_from, 
    MAX(pv.price) as price_to, 
    MAX(pv.discount) as discount, 
    MIN(pv.stock_quantity) as stock_quantity, 
    COUNT(pv.variant_id) as variant_count,
    img.image_id, img.image_url
FROM categories AS c
LEFT JOIN products AS p ON c.category_id = p.category_id
LEFT JOIN product_variants AS pv ON p.product_id = pv.product_id
LEFT JOIN images AS img ON p.product_id = img.product_id
WHERE c.published = $1
GROUP BY c.category_id, p.product_id, img.image_id, img.image_url
ORDER BY c.sort_order
`

type GetCategoriesRow struct {
	CategoryID    int32       `json:"category_id"`
	Name          string      `json:"name"`
	ImageUrl      pgtype.Text `json:"image_url"`
	SortOrder     int16       `json:"sort_order"`
	Published     bool        `json:"published"`
	CreatedAt     time.Time   `json:"created_at"`
	ProductName   pgtype.Text `json:"product_name"`
	ProductID     pgtype.UUID `json:"product_id"`
	Description   pgtype.Text `json:"description"`
	PriceFrom     interface{} `json:"price_from"`
	PriceTo       interface{} `json:"price_to"`
	Discount      interface{} `json:"discount"`
	StockQuantity interface{} `json:"stock_quantity"`
	VariantCount  int64       `json:"variant_count"`
	ImageID       pgtype.Int4 `json:"image_id"`
	ImageUrl_2    pgtype.Text `json:"image_url_2"`
}

func (q *Queries) GetCategories(ctx context.Context, published pgtype.Bool) ([]GetCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getCategories, published)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesRow
	for rows.Next() {
		var i GetCategoriesRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.ImageUrl,
			&i.SortOrder,
			&i.Published,
			&i.CreatedAt,
			&i.ProductName,
			&i.ProductID,
			&i.Description,
			&i.PriceFrom,
			&i.PriceTo,
			&i.Discount,
			&i.StockQuantity,
			&i.VariantCount,
			&i.ImageID,
			&i.ImageUrl_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByIDs = `-- name: GetCategoriesByIDs :many
SELECT 
    c.category_id, c.name, c.image_url, c.sort_order, c.published, c.created_at, 
    p.name as product_name, p.product_id, p.description,
    MIN(pv.price) as price_from, 
    MAX(pv.price) as price_to, 
    MAX(pv.discount) as discount, 
    MIN(pv.stock_quantity) as stock_quantity, 
    COUNT(pv.variant_id) as variant_count,
    img.image_id, img.image_url
FROM categories AS c
LEFT JOIN products AS p ON c.category_id = p.category_id
LEFT JOIN product_variants AS pv ON p.product_id = pv.product_id
LEFT JOIN images AS img ON p.product_id = img.product_id
WHERE c.category_id = ANY($1::int[]) AND c.published = $2
GROUP BY c.category_id, p.product_id, img.image_id, img.image_url
ORDER BY c.sort_order
`

type GetCategoriesByIDsParams struct {
	CategoryIds []int32     `json:"category_ids"`
	Published   pgtype.Bool `json:"published"`
}

type GetCategoriesByIDsRow struct {
	CategoryID    int32       `json:"category_id"`
	Name          string      `json:"name"`
	ImageUrl      pgtype.Text `json:"image_url"`
	SortOrder     int16       `json:"sort_order"`
	Published     bool        `json:"published"`
	CreatedAt     time.Time   `json:"created_at"`
	ProductName   pgtype.Text `json:"product_name"`
	ProductID     pgtype.UUID `json:"product_id"`
	Description   pgtype.Text `json:"description"`
	PriceFrom     interface{} `json:"price_from"`
	PriceTo       interface{} `json:"price_to"`
	Discount      interface{} `json:"discount"`
	StockQuantity interface{} `json:"stock_quantity"`
	VariantCount  int64       `json:"variant_count"`
	ImageID       pgtype.Int4 `json:"image_id"`
	ImageUrl_2    pgtype.Text `json:"image_url_2"`
}

func (q *Queries) GetCategoriesByIDs(ctx context.Context, arg GetCategoriesByIDsParams) ([]GetCategoriesByIDsRow, error) {
	rows, err := q.db.Query(ctx, getCategoriesByIDs, arg.CategoryIds, arg.Published)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesByIDsRow
	for rows.Next() {
		var i GetCategoriesByIDsRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.ImageUrl,
			&i.SortOrder,
			&i.Published,
			&i.CreatedAt,
			&i.ProductName,
			&i.ProductID,
			&i.Description,
			&i.PriceFrom,
			&i.PriceTo,
			&i.Discount,
			&i.StockQuantity,
			&i.VariantCount,
			&i.ImageID,
			&i.ImageUrl_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT c.category_id, c.name, c.image_url, c.sort_order, c.published, c.created_at FROM categories c WHERE c.category_id = $1 LIMIT 1
`

func (q *Queries) GetCategoryByID(ctx context.Context, categoryID int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.ImageUrl,
		&i.SortOrder,
		&i.Published,
		&i.CreatedAt,
	)
	return i, err
}

const getCategoryMaxSortOrder = `-- name: GetCategoryMaxSortOrder :one
SELECT COALESCE(MAX(sort_order)::smallint, 0) AS max_sort_order FROM categories
`

func (q *Queries) GetCategoryMaxSortOrder(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getCategoryMaxSortOrder)
	var max_sort_order interface{}
	err := row.Scan(&max_sort_order)
	return max_sort_order, err
}

type SeedCategoriesParams struct {
	Name      string      `json:"name"`
	ImageUrl  pgtype.Text `json:"image_url"`
	SortOrder int16       `json:"sort_order"`
	Published bool        `json:"published"`
}

const updateCategoryWith = `-- name: UpdateCategoryWith :one
UPDATE categories
SET 
    name = COALESCE($2, name), 
    image_url = COALESCE($3, image_url), 
    sort_order = COALESCE($4, sort_order), 
    published = COALESCE($5, published)
WHERE category_id = $1
RETURNING category_id, name, image_url, sort_order, published, created_at
`

type UpdateCategoryWithParams struct {
	CategoryID int32       `json:"category_id"`
	Name       pgtype.Text `json:"name"`
	ImageUrl   pgtype.Text `json:"image_url"`
	SortOrder  pgtype.Int2 `json:"sort_order"`
	Published  pgtype.Bool `json:"published"`
}

func (q *Queries) UpdateCategoryWith(ctx context.Context, arg UpdateCategoryWithParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategoryWith,
		arg.CategoryID,
		arg.Name,
		arg.ImageUrl,
		arg.SortOrder,
		arg.Published,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.ImageUrl,
		&i.SortOrder,
		&i.Published,
		&i.CreatedAt,
	)
	return i, err
}
