// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAddresses = `-- name: CountAddresses :one
SELECT
    COUNT(*)
FROM
    user_addresses
`

func (q *Queries) CountAddresses(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAddresses)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsers = `-- name: CountUsers :one
SELECT
    count(*)
FROM
    users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAddress = `-- name: CreateAddress :one
INSERT INTO 
    user_addresses (user_id, phone, street, ward, district, city, "default")
VALUES
    ($1, $2, $3, $4, $5, $6, $7) RETURNING id, user_id, phone, street, ward, district, city, "default", deleted, created_at, updated_at
`

type CreateAddressParams struct {
	UserID   uuid.UUID   `json:"user_id"`
	Phone    string      `json:"phone"`
	Street   string      `json:"street"`
	Ward     pgtype.Text `json:"ward"`
	District string      `json:"district"`
	City     string      `json:"city"`
	Default  bool        `json:"default"`
}

// User Address Queries
func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (UserAddress, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.UserID,
		arg.Phone,
		arg.Street,
		arg.Ward,
		arg.District,
		arg.City,
		arg.Default,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Phone,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Default,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (id,email,username,phone,fullname,hashed_password,role)
VALUES
    ($1,$2,$3,$4,$5,$6,$7)
RETURNING id, email, username, fullname, role, verified_email, verified_phone, created_at, updated_at
`

type CreateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	Username       string    `json:"username"`
	Phone          string    `json:"phone"`
	Fullname       string    `json:"fullname"`
	HashedPassword string    `json:"hashed_password"`
	Role           UserRole  `json:"role"`
}

type CreateUserRow struct {
	ID            uuid.UUID `json:"id"`
	Email         string    `json:"email"`
	Username      string    `json:"username"`
	Fullname      string    `json:"fullname"`
	Role          UserRole  `json:"role"`
	VerifiedEmail bool      `json:"verified_email"`
	VerifiedPhone bool      `json:"verified_phone"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Phone,
		arg.Fullname,
		arg.HashedPassword,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Fullname,
		&i.Role,
		&i.VerifiedEmail,
		&i.VerifiedPhone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails (id, email, verify_code) VALUES ($1, $2, $3) RETURNING id, user_id, email, verify_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	ID         int32  `json:"id"`
	Email      string `json:"email"`
	VerifyCode string `json:"verify_code"`
}

// Verification Token Queries
func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail, arg.ID, arg.Email, arg.VerifyCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
UPDATE
    user_addresses
SET
    deleted = TRUE,
    updated_at = now()
WHERE
    id = $1 AND user_id = $2
`

type DeleteAddressParams struct {
	ID     int64     `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.Exec(ctx, deleteAddress, arg.ID, arg.UserID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT
    id, user_id, phone, street, ward, district, city, "default", deleted, created_at, updated_at
FROM
    user_addresses
WHERE
    id = $1 AND user_id = $2 AND deleted = FALSE
LIMIT 1
`

type GetAddressParams struct {
	ID     int64     `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetAddress(ctx context.Context, arg GetAddressParams) (UserAddress, error) {
	row := q.db.QueryRow(ctx, getAddress, arg.ID, arg.UserID)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Phone,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Default,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddresses = `-- name: GetAddresses :many
SELECT
    id, user_id, phone, street, ward, district, city, "default", deleted, created_at, updated_at
FROM
    user_addresses
WHERE
    user_id = $1 AND deleted = FALSE
ORDER BY
    "default" DESC, id ASC
`

func (q *Queries) GetAddresses(ctx context.Context, userID uuid.UUID) ([]UserAddress, error) {
	rows, err := q.db.Query(ctx, getAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Phone,
			&i.Street,
			&i.Ward,
			&i.District,
			&i.City,
			&i.Default,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultAddress = `-- name: GetDefaultAddress :one
SELECT
    id, user_id, phone, street, ward, district, city, "default", deleted, created_at, updated_at
FROM
    user_addresses
WHERE
    user_id = $1 AND deleted = FALSE AND "default" = TRUE
LIMIT 1
`

func (q *Queries) GetDefaultAddress(ctx context.Context, userID uuid.UUID) (UserAddress, error) {
	row := q.db.QueryRow(ctx, getDefaultAddress, userID)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Phone,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Default,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, role, username, email, phone, fullname, hashed_password, verified_email, verified_phone, password_changed_at, updated_at, created_at
FROM
    users
WHERE
    email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Fullname,
		&i.HashedPassword,
		&i.VerifiedEmail,
		&i.VerifiedPhone,
		&i.PasswordChangedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, role, username, email, phone, fullname, hashed_password, verified_email, verified_phone, password_changed_at, updated_at, created_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Fullname,
		&i.HashedPassword,
		&i.VerifiedEmail,
		&i.VerifiedPhone,
		&i.PasswordChangedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id, role, username, email, phone, fullname, hashed_password, verified_email, verified_phone, password_changed_at, updated_at, created_at
FROM
    users
WHERE
    username = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Fullname,
		&i.HashedPassword,
		&i.VerifiedEmail,
		&i.VerifiedPhone,
		&i.PasswordChangedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getVerifyEmail = `-- name: GetVerifyEmail :one
SELECT id, user_id, email, verify_code, is_used, created_at, expired_at FROM verify_emails WHERE id = $1 AND email = $2
`

type GetVerifyEmailParams struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) GetVerifyEmail(ctx context.Context, arg GetVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmail, arg.ID, arg.Email)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyEmailByID = `-- name: GetVerifyEmailByID :one
SELECT id, user_id, email, verify_code, is_used, created_at, expired_at FROM verify_emails WHERE id = $1
`

func (q *Queries) GetVerifyEmailByID(ctx context.Context, id int32) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmailByID, id)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, role, username, email, phone, fullname, hashed_password, verified_email, verified_phone, password_changed_at, updated_at, created_at FROM users ORDER BY id LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Username,
			&i.Email,
			&i.Phone,
			&i.Fullname,
			&i.HashedPassword,
			&i.VerifiedEmail,
			&i.VerifiedPhone,
			&i.PasswordChangedAt,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetPrimaryAddress = `-- name: ResetPrimaryAddress :exec
UPDATE
    user_addresses
SET
    "default" = FALSE
WHERE
    user_id = $1 AND "default" = TRUE
`

func (q *Queries) ResetPrimaryAddress(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, resetPrimaryAddress, userID)
	return err
}

type SeedAddressesParams struct {
	UserID   uuid.UUID   `json:"user_id"`
	Phone    string      `json:"phone"`
	Street   string      `json:"street"`
	Ward     pgtype.Text `json:"ward"`
	District string      `json:"district"`
	City     string      `json:"city"`
	Default  bool        `json:"default"`
}

type SeedUsersParams struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	Username       string    `json:"username"`
	Phone          string    `json:"phone"`
	Fullname       string    `json:"fullname"`
	HashedPassword string    `json:"hashed_password"`
	Role           UserRole  `json:"role"`
}

const setPrimaryAddress = `-- name: SetPrimaryAddress :exec
UPDATE
    user_addresses
SET
    "default" = $1
WHERE
    id = $2 AND user_id = $3 AND deleted = FALSE
`

type SetPrimaryAddressParams struct {
	Default bool      `json:"default"`
	ID      int64     `json:"id"`
	UserID  uuid.UUID `json:"user_id"`
}

func (q *Queries) SetPrimaryAddress(ctx context.Context, arg SetPrimaryAddressParams) error {
	_, err := q.db.Exec(ctx, setPrimaryAddress, arg.Default, arg.ID, arg.UserID)
	return err
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE
    user_addresses
SET
    phone = coalesce($1, phone),
    street = coalesce($2, street),
    ward = coalesce($3, ward),
    district = coalesce($4, district),
    city = coalesce($5, city),
    "default" = coalesce($6, "default")
WHERE
    id = $7 AND user_id = $8 AND deleted = FALSE
RETURNING id, user_id, phone, street, ward, district, city, "default", deleted, created_at, updated_at
`

type UpdateAddressParams struct {
	Phone    pgtype.Text `json:"phone"`
	Street   pgtype.Text `json:"street"`
	Ward     pgtype.Text `json:"ward"`
	District pgtype.Text `json:"district"`
	City     pgtype.Text `json:"city"`
	Default  pgtype.Bool `json:"default"`
	ID       int64       `json:"id"`
	UserID   uuid.UUID   `json:"user_id"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (UserAddress, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.Phone,
		arg.Street,
		arg.Ward,
		arg.District,
		arg.City,
		arg.Default,
		arg.ID,
		arg.UserID,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Phone,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Default,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    email = coalesce($1, email),
    fullname = coalesce($2, fullname),
    role = coalesce($3, role),
    phone = coalesce($4, phone),
    verified_email = coalesce($5, verified_email),
    verified_phone = coalesce($6, verified_phone),
    hashed_password = coalesce($7, hashed_password),
    password_changed_at = coalesce($8, password_changed_at),
    updated_at = $9
WHERE
    id = $10
RETURNING id, email, username, fullname, role, verified_email, verified_phone, created_at, updated_at
`

type UpdateUserParams struct {
	Email             pgtype.Text        `json:"email"`
	Fullname          pgtype.Text        `json:"fullname"`
	Role              NullUserRole       `json:"role"`
	Phone             pgtype.Text        `json:"phone"`
	VerifiedEmail     pgtype.Bool        `json:"verified_email"`
	VerifiedPhone     pgtype.Bool        `json:"verified_phone"`
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	UpdatedAt         time.Time          `json:"updated_at"`
	ID                uuid.UUID          `json:"id"`
}

type UpdateUserRow struct {
	ID            uuid.UUID `json:"id"`
	Email         string    `json:"email"`
	Username      string    `json:"username"`
	Fullname      string    `json:"fullname"`
	Role          UserRole  `json:"role"`
	VerifiedEmail bool      `json:"verified_email"`
	VerifiedPhone bool      `json:"verified_phone"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Fullname,
		arg.Role,
		arg.Phone,
		arg.VerifiedEmail,
		arg.VerifiedPhone,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Fullname,
		&i.Role,
		&i.VerifiedEmail,
		&i.VerifiedPhone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE verify_emails
SET is_used = TRUE
WHERE id = $1 AND verify_code = $2 AND expired_at > now()
RETURNING id, user_id, email, verify_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailParams struct {
	ID         int32  `json:"id"`
	VerifyCode string `json:"verify_code"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVerifyEmail, arg.ID, arg.VerifyCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
