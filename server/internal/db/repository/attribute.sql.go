// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: attribute.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAttributes = `-- name: CountAttributes :one
SELECT COUNT(*) FROM attributes
`

func (q *Queries) CountAttributes(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAttributes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAttribute = `-- name: CreateAttribute :one
INSERT INTO attributes (
    attribute_name
) VALUES (
    $1
) RETURNING attribute_id, attribute_name
`

func (q *Queries) CreateAttribute(ctx context.Context, attributeName string) (Attribute, error) {
	row := q.db.QueryRow(ctx, createAttribute, attributeName)
	var i Attribute
	err := row.Scan(&i.AttributeID, &i.AttributeName)
	return i, err
}

const createAttributeValue = `-- name: CreateAttributeValue :one
INSERT INTO attribute_values (
    attribute_id,
    attribute_value
) VALUES (
    $1, $2
) RETURNING attribute_value_id, attribute_id, attribute_value
`

type CreateAttributeValueParams struct {
	AttributeID    int32  `json:"attribute_id"`
	AttributeValue string `json:"attribute_value"`
}

func (q *Queries) CreateAttributeValue(ctx context.Context, arg CreateAttributeValueParams) (AttributeValue, error) {
	row := q.db.QueryRow(ctx, createAttributeValue, arg.AttributeID, arg.AttributeValue)
	var i AttributeValue
	err := row.Scan(&i.AttributeValueID, &i.AttributeID, &i.AttributeValue)
	return i, err
}

const deleteAttribute = `-- name: DeleteAttribute :exec
DELETE FROM
    attributes
WHERE
    attribute_id = $1
`

func (q *Queries) DeleteAttribute(ctx context.Context, attributeID int32) error {
	_, err := q.db.Exec(ctx, deleteAttribute, attributeID)
	return err
}

const deleteAttributeValue = `-- name: DeleteAttributeValue :exec
DELETE FROM
    attribute_values
WHERE
    attribute_value_id = $1
`

func (q *Queries) DeleteAttributeValue(ctx context.Context, attributeValueID int32) error {
	_, err := q.db.Exec(ctx, deleteAttributeValue, attributeValueID)
	return err
}

const getAttributeByID = `-- name: GetAttributeByID :one
SELECT
    attribute_id, attribute_name
FROM
    attributes
WHERE
    attribute_id = $1
LIMIT 1
`

func (q *Queries) GetAttributeByID(ctx context.Context, attributeID int32) (Attribute, error) {
	row := q.db.QueryRow(ctx, getAttributeByID, attributeID)
	var i Attribute
	err := row.Scan(&i.AttributeID, &i.AttributeName)
	return i, err
}

const getAttributeByName = `-- name: GetAttributeByName :one
SELECT
    attribute_id, attribute_name
FROM
    attributes
WHERE
    attribute_name = $1
LIMIT 1
`

func (q *Queries) GetAttributeByName(ctx context.Context, attributeName string) (Attribute, error) {
	row := q.db.QueryRow(ctx, getAttributeByName, attributeName)
	var i Attribute
	err := row.Scan(&i.AttributeID, &i.AttributeName)
	return i, err
}

const getAttributeValueByID = `-- name: GetAttributeValueByID :one
SELECT
    attribute_value_id, attribute_id, attribute_value
FROM
    attribute_values
WHERE
    attribute_value_id = $1
LIMIT 1
`

func (q *Queries) GetAttributeValueByID(ctx context.Context, attributeValueID int32) (AttributeValue, error) {
	row := q.db.QueryRow(ctx, getAttributeValueByID, attributeValueID)
	var i AttributeValue
	err := row.Scan(&i.AttributeValueID, &i.AttributeID, &i.AttributeValue)
	return i, err
}

const getAttributeValueByValue = `-- name: GetAttributeValueByValue :one
SELECT
    attribute_value_id, attribute_id, attribute_value
FROM
    attribute_values
WHERE
    attribute_value = $1
LIMIT 1
`

func (q *Queries) GetAttributeValueByValue(ctx context.Context, attributeValue string) (AttributeValue, error) {
	row := q.db.QueryRow(ctx, getAttributeValueByValue, attributeValue)
	var i AttributeValue
	err := row.Scan(&i.AttributeValueID, &i.AttributeID, &i.AttributeValue)
	return i, err
}

const listAttributeValues = `-- name: ListAttributeValues :many
SELECT
    attribute_value_id, attribute_id, attribute_value
FROM
    attribute_values
WHERE
    attribute_id = $1
ORDER BY
    attribute_value_id
LIMIT $2
OFFSET $3
`

type ListAttributeValuesParams struct {
	AttributeID int32 `json:"attribute_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListAttributeValues(ctx context.Context, arg ListAttributeValuesParams) ([]AttributeValue, error) {
	rows, err := q.db.Query(ctx, listAttributeValues, arg.AttributeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AttributeValue
	for rows.Next() {
		var i AttributeValue
		if err := rows.Scan(&i.AttributeValueID, &i.AttributeID, &i.AttributeValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAttributes = `-- name: ListAttributes :many
SELECT
    attribute_id, attribute_name
FROM
    attributes
ORDER BY
    attribute_id
LIMIT $1
OFFSET $2
`

type ListAttributesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAttributes(ctx context.Context, arg ListAttributesParams) ([]Attribute, error) {
	rows, err := q.db.Query(ctx, listAttributes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attribute
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(&i.AttributeID, &i.AttributeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVariantAttributes = `-- name: ListVariantAttributes :many
SELECT
    variant_attribute_id, variant_id, attribute_value_id
FROM
    variant_attributes
WHERE
    variant_id = $1
ORDER BY
    variant_attribute_id
LIMIT $2
OFFSET $3
`

type ListVariantAttributesParams struct {
	VariantID pgtype.Int8 `json:"variant_id"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

func (q *Queries) ListVariantAttributes(ctx context.Context, arg ListVariantAttributesParams) ([]VariantAttribute, error) {
	rows, err := q.db.Query(ctx, listVariantAttributes, arg.VariantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VariantAttribute
	for rows.Next() {
		var i VariantAttribute
		if err := rows.Scan(&i.VariantAttributeID, &i.VariantID, &i.AttributeValueID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type SeedAttributeValuesParams struct {
	AttributeID    int32  `json:"attribute_id"`
	AttributeValue string `json:"attribute_value"`
}

const updateAttribute = `-- name: UpdateAttribute :one
UPDATE
    attributes
SET
    attribute_name = $2
WHERE
    attribute_id = $1
RETURNING attribute_id, attribute_name
`

type UpdateAttributeParams struct {
	AttributeID   int32  `json:"attribute_id"`
	AttributeName string `json:"attribute_name"`
}

func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) (Attribute, error) {
	row := q.db.QueryRow(ctx, updateAttribute, arg.AttributeID, arg.AttributeName)
	var i Attribute
	err := row.Scan(&i.AttributeID, &i.AttributeName)
	return i, err
}

const updateAttributeValue = `-- name: UpdateAttributeValue :one
UPDATE
    attribute_values
SET
    attribute_id = $2,
    attribute_value = $3
WHERE
    attribute_value_id = $1
RETURNING attribute_value_id, attribute_id, attribute_value
`

type UpdateAttributeValueParams struct {
	AttributeValueID int32  `json:"attribute_value_id"`
	AttributeID      int32  `json:"attribute_id"`
	AttributeValue   string `json:"attribute_value"`
}

func (q *Queries) UpdateAttributeValue(ctx context.Context, arg UpdateAttributeValueParams) (AttributeValue, error) {
	row := q.db.QueryRow(ctx, updateAttributeValue, arg.AttributeValueID, arg.AttributeID, arg.AttributeValue)
	var i AttributeValue
	err := row.Scan(&i.AttributeValueID, &i.AttributeID, &i.AttributeValue)
	return i, err
}
