// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attribute.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAttributes = `-- name: CountAttributes :one
SELECT COUNT(*) FROM attributes
`

func (q *Queries) CountAttributes(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAttributes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAttribute = `-- name: CreateAttribute :one
INSERT INTO attributes (name) VALUES ($1) RETURNING id, name, created_at
`

func (q *Queries) CreateAttribute(ctx context.Context, name string) (Attribute, error) {
	row := q.db.QueryRow(ctx, createAttribute, name)
	var i Attribute
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const createAttributeValue = `-- name: CreateAttributeValue :one
INSERT INTO attribute_values (attribute_id, value, display_value, display_order) VALUES ($1, $2, $3, $4) RETURNING id, attribute_id, value, is_active, display_value, display_order, created_at
`

type CreateAttributeValueParams struct {
	AttributeID  int32       `json:"attribute_id"`
	Value        string      `json:"value"`
	DisplayValue pgtype.Text `json:"display_value"`
	DisplayOrder int16       `json:"display_order"`
}

// Attribute values
func (q *Queries) CreateAttributeValue(ctx context.Context, arg CreateAttributeValueParams) (AttributeValue, error) {
	row := q.db.QueryRow(ctx, createAttributeValue,
		arg.AttributeID,
		arg.Value,
		arg.DisplayValue,
		arg.DisplayOrder,
	)
	var i AttributeValue
	err := row.Scan(
		&i.ID,
		&i.AttributeID,
		&i.Value,
		&i.IsActive,
		&i.DisplayValue,
		&i.DisplayOrder,
		&i.CreatedAt,
	)
	return i, err
}

type CreateBulkProductVariantAttributeParams struct {
	VariantID        uuid.UUID `json:"variant_id"`
	AttributeValueID int32     `json:"attribute_value_id"`
}

const createProductVariantAttribute = `-- name: CreateProductVariantAttribute :one
INSERT INTO variant_attribute_values (variant_id, attribute_value_id) VALUES ($1, $2) RETURNING variant_id, attribute_value_id
`

type CreateProductVariantAttributeParams struct {
	VariantID        uuid.UUID `json:"variant_id"`
	AttributeValueID int32     `json:"attribute_value_id"`
}

// Product Variant attributes
func (q *Queries) CreateProductVariantAttribute(ctx context.Context, arg CreateProductVariantAttributeParams) (VariantAttributeValue, error) {
	row := q.db.QueryRow(ctx, createProductVariantAttribute, arg.VariantID, arg.AttributeValueID)
	var i VariantAttributeValue
	err := row.Scan(&i.VariantID, &i.AttributeValueID)
	return i, err
}

const deleteAttribute = `-- name: DeleteAttribute :exec
DELETE FROM attributes WHERE id = $1
`

func (q *Queries) DeleteAttribute(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAttribute, id)
	return err
}

const deleteAttributeValue = `-- name: DeleteAttributeValue :exec
DELETE FROM attribute_values WHERE id = $1
`

func (q *Queries) DeleteAttributeValue(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAttributeValue, id)
	return err
}

const deleteProductVariantAttributes = `-- name: DeleteProductVariantAttributes :exec
DELETE FROM variant_attribute_values WHERE variant_id = $1
`

func (q *Queries) DeleteProductVariantAttributes(ctx context.Context, variantID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductVariantAttributes, variantID)
	return err
}

const getAttrValuesByAttrIDs = `-- name: GetAttrValuesByAttrIDs :many
SELECT id, attribute_id, value, is_active, display_value, display_order, created_at FROM attribute_values WHERE attribute_id = ANY($1::int[]) ORDER BY attribute_values.id
`

func (q *Queries) GetAttrValuesByAttrIDs(ctx context.Context, ids []int32) ([]AttributeValue, error) {
	rows, err := q.db.Query(ctx, getAttrValuesByAttrIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AttributeValue{}
	for rows.Next() {
		var i AttributeValue
		if err := rows.Scan(
			&i.ID,
			&i.AttributeID,
			&i.Value,
			&i.IsActive,
			&i.DisplayValue,
			&i.DisplayOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttributeByID = `-- name: GetAttributeByID :many
SELECT a.id, a.name, a.created_at, 
    av.value, av.id as attribute_value_id, av.is_active as attribute_value_is_active, 
    av.display_value as display_value, av.created_at as attribute_value_created_at, av.display_order as display_order
FROM attributes a
LEFT JOIN attribute_values as av ON a.id = av.attribute_id
WHERE a.id = $1
ORDER BY a.id, av.display_order
`

type GetAttributeByIDRow struct {
	ID                      int32              `json:"id"`
	Name                    string             `json:"name"`
	CreatedAt               time.Time          `json:"created_at"`
	Value                   pgtype.Text        `json:"value"`
	AttributeValueID        pgtype.Int4        `json:"attribute_value_id"`
	AttributeValueIsActive  pgtype.Bool        `json:"attribute_value_is_active"`
	DisplayValue            pgtype.Text        `json:"display_value"`
	AttributeValueCreatedAt pgtype.Timestamptz `json:"attribute_value_created_at"`
	DisplayOrder            pgtype.Int2        `json:"display_order"`
}

func (q *Queries) GetAttributeByID(ctx context.Context, id int32) ([]GetAttributeByIDRow, error) {
	rows, err := q.db.Query(ctx, getAttributeByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAttributeByIDRow{}
	for rows.Next() {
		var i GetAttributeByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.Value,
			&i.AttributeValueID,
			&i.AttributeValueIsActive,
			&i.DisplayValue,
			&i.AttributeValueCreatedAt,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttributeByIDs = `-- name: GetAttributeByIDs :many
SELECT id, name, created_at FROM attributes WHERE id = ANY($1::int[]) ORDER BY attributes.id
`

func (q *Queries) GetAttributeByIDs(ctx context.Context, ids []int32) ([]Attribute, error) {
	rows, err := q.db.Query(ctx, getAttributeByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attribute{}
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttributeByName = `-- name: GetAttributeByName :one
SELECT id, name, created_at FROM attributes WHERE name = $1 LIMIT 1
`

func (q *Queries) GetAttributeByName(ctx context.Context, name string) (Attribute, error) {
	row := q.db.QueryRow(ctx, getAttributeByName, name)
	var i Attribute
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getAttributeValueByID = `-- name: GetAttributeValueByID :one
SELECT id, attribute_id, value, is_active, display_value, display_order, created_at FROM attribute_values WHERE id = $1
`

func (q *Queries) GetAttributeValueByID(ctx context.Context, id int32) (AttributeValue, error) {
	row := q.db.QueryRow(ctx, getAttributeValueByID, id)
	var i AttributeValue
	err := row.Scan(
		&i.ID,
		&i.AttributeID,
		&i.Value,
		&i.IsActive,
		&i.DisplayValue,
		&i.DisplayOrder,
		&i.CreatedAt,
	)
	return i, err
}

const getAttributeValues = `-- name: GetAttributeValues :many
SELECT id, attribute_id, value, is_active, display_value, display_order, created_at FROM attribute_values WHERE attribute_id = $1 ORDER BY attribute_values.id
`

func (q *Queries) GetAttributeValues(ctx context.Context, attributeID int32) ([]AttributeValue, error) {
	rows, err := q.db.Query(ctx, getAttributeValues, attributeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AttributeValue{}
	for rows.Next() {
		var i AttributeValue
		if err := rows.Scan(
			&i.ID,
			&i.AttributeID,
			&i.Value,
			&i.IsActive,
			&i.DisplayValue,
			&i.DisplayOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttributeValuesByIDs = `-- name: GetAttributeValuesByIDs :many
SELECT id, attribute_id, value, is_active, display_value, display_order, created_at FROM attribute_values WHERE id = ANY($1::int[]) ORDER BY attribute_values.id
`

func (q *Queries) GetAttributeValuesByIDs(ctx context.Context, ids []int32) ([]AttributeValue, error) {
	rows, err := q.db.Query(ctx, getAttributeValuesByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AttributeValue{}
	for rows.Next() {
		var i AttributeValue
		if err := rows.Scan(
			&i.ID,
			&i.AttributeID,
			&i.Value,
			&i.IsActive,
			&i.DisplayValue,
			&i.DisplayOrder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttributes = `-- name: GetAttributes :many
SELECT 
    a.id, a.name, a.created_at, 
    av.value, av.id as attribute_value_id, av.is_active as attribute_value_is_active,
    av.display_value as display_value, av.created_at as attribute_value_created_at, av.display_order as display_order
FROM attributes as a
LEFT JOIN attribute_values as av ON a.id = av.attribute_id
ORDER BY a.id, av.display_order
`

type GetAttributesRow struct {
	ID                      int32              `json:"id"`
	Name                    string             `json:"name"`
	CreatedAt               time.Time          `json:"created_at"`
	Value                   pgtype.Text        `json:"value"`
	AttributeValueID        pgtype.Int4        `json:"attribute_value_id"`
	AttributeValueIsActive  pgtype.Bool        `json:"attribute_value_is_active"`
	DisplayValue            pgtype.Text        `json:"display_value"`
	AttributeValueCreatedAt pgtype.Timestamptz `json:"attribute_value_created_at"`
	DisplayOrder            pgtype.Int2        `json:"display_order"`
}

func (q *Queries) GetAttributes(ctx context.Context) ([]GetAttributesRow, error) {
	rows, err := q.db.Query(ctx, getAttributes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAttributesRow{}
	for rows.Next() {
		var i GetAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.Value,
			&i.AttributeValueID,
			&i.AttributeValueIsActive,
			&i.DisplayValue,
			&i.AttributeValueCreatedAt,
			&i.DisplayOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductVariantAttributeByID = `-- name: GetProductVariantAttributeByID :one
SELECT variant_id, attribute_value_id FROM variant_attribute_values WHERE variant_id = $1 LIMIT 1
`

func (q *Queries) GetProductVariantAttributeByID(ctx context.Context, variantID uuid.UUID) (VariantAttributeValue, error) {
	row := q.db.QueryRow(ctx, getProductVariantAttributeByID, variantID)
	var i VariantAttributeValue
	err := row.Scan(&i.VariantID, &i.AttributeValueID)
	return i, err
}

const getProductVariantAttributes = `-- name: GetProductVariantAttributes :many
SELECT variant_id, attribute_value_id FROM variant_attribute_values WHERE variant_id = $1 ORDER BY variant_attribute_values.attribute_value_id
`

func (q *Queries) GetProductVariantAttributes(ctx context.Context, variantID uuid.UUID) ([]VariantAttributeValue, error) {
	rows, err := q.db.Query(ctx, getProductVariantAttributes, variantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VariantAttributeValue{}
	for rows.Next() {
		var i VariantAttributeValue
		if err := rows.Scan(&i.VariantID, &i.AttributeValueID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttribute = `-- name: UpdateAttribute :one
UPDATE attributes SET name = $1 WHERE id = $2 RETURNING id, name, created_at
`

type UpdateAttributeParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) (Attribute, error) {
	row := q.db.QueryRow(ctx, updateAttribute, arg.Name, arg.ID)
	var i Attribute
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const updateAttributeValue = `-- name: UpdateAttributeValue :one
UPDATE 
    attribute_values 
SET 
    value = $2,
    is_active = COALESCE($3, is_active),
    display_value = COALESCE($4, display_value),
    display_order = COALESCE($5, display_order)
WHERE id = $1
RETURNING id, attribute_id, value, is_active, display_value, display_order, created_at
`

type UpdateAttributeValueParams struct {
	ID           int32       `json:"id"`
	Value        string      `json:"value"`
	IsActive     pgtype.Bool `json:"is_active"`
	DisplayValue pgtype.Text `json:"display_value"`
	DisplayOrder pgtype.Int2 `json:"display_order"`
}

func (q *Queries) UpdateAttributeValue(ctx context.Context, arg UpdateAttributeValueParams) (AttributeValue, error) {
	row := q.db.QueryRow(ctx, updateAttributeValue,
		arg.ID,
		arg.Value,
		arg.IsActive,
		arg.DisplayValue,
		arg.DisplayOrder,
	)
	var i AttributeValue
	err := row.Scan(
		&i.ID,
		&i.AttributeID,
		&i.Value,
		&i.IsActive,
		&i.DisplayValue,
		&i.DisplayOrder,
		&i.CreatedAt,
	)
	return i, err
}
