// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: attribute.sql

package repository

import (
	"context"
)

const countAttributes = `-- name: CountAttributes :one
SELECT COUNT(*) FROM attributes
`

func (q *Queries) CountAttributes(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAttributes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAttribute = `-- name: CreateAttribute :one
INSERT INTO attributes (
    name
) VALUES (
    $1
) RETURNING attribute_id, name, created_at, updated_at
`

func (q *Queries) CreateAttribute(ctx context.Context, name string) (Attribute, error) {
	row := q.db.QueryRow(ctx, createAttribute, name)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAttribute = `-- name: DeleteAttribute :exec
DELETE FROM
    attributes
WHERE
    attribute_id = $1
`

func (q *Queries) DeleteAttribute(ctx context.Context, attributeID int32) error {
	_, err := q.db.Exec(ctx, deleteAttribute, attributeID)
	return err
}

const getAttributeByID = `-- name: GetAttributeByID :one
SELECT
    attribute_id, name, created_at, updated_at
FROM
    attributes
WHERE
    attribute_id = $1
`

func (q *Queries) GetAttributeByID(ctx context.Context, attributeID int32) (Attribute, error) {
	row := q.db.QueryRow(ctx, getAttributeByID, attributeID)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttributeByName = `-- name: GetAttributeByName :one
SELECT
    attribute_id, name, created_at, updated_at
FROM
    attributes
WHERE
    name = $1
LIMIT 1
`

func (q *Queries) GetAttributeByName(ctx context.Context, name string) (Attribute, error) {
	row := q.db.QueryRow(ctx, getAttributeByName, name)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttributes = `-- name: GetAttributes :many
SELECT
    attribute_id, name, created_at, updated_at
FROM
    attributes
ORDER BY
    attributes.attribute_id
`

func (q *Queries) GetAttributes(ctx context.Context) ([]Attribute, error) {
	rows, err := q.db.Query(ctx, getAttributes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attribute
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(
			&i.AttributeID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttribute = `-- name: UpdateAttribute :one
UPDATE
    attributes
SET
    name = $2
WHERE
    attribute_id = $1
RETURNING attribute_id, name, created_at, updated_at
`

type UpdateAttributeParams struct {
	AttributeID int32  `json:"attribute_id"`
	Name        string `json:"name"`
}

func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) (Attribute, error) {
	row := q.db.QueryRow(ctx, updateAttribute, arg.AttributeID, arg.Name)
	var i Attribute
	err := row.Scan(
		&i.AttributeID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
