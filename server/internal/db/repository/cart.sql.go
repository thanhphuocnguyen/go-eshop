// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items WHERE id = $1
`

func (q *Queries) ClearCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearCart, id)
	return err
}

const countCartItems = `-- name: CountCartItems :one
SELECT COUNT(*) FROM cart_items WHERE id = $1
`

func (q *Queries) CountCartItems(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItems, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (id, user_id, session_id) VALUES ($1, $2, $3) RETURNING id, user_id, session_id, updated_at, created_at
`

type CreateCartParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	SessionID string    `json:"session_id"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.ID, arg.UserID, arg.SessionID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (id, cart_id, variant_id, quantity) VALUES ($1, $2, $3, $4) RETURNING id, cart_id, variant_id, quantity, added_at
`

type CreateCartItemParams struct {
	ID        uuid.UUID `json:"id"`
	CartID    uuid.UUID `json:"cart_id"`
	VariantID uuid.UUID `json:"variant_id"`
	Quantity  int16     `json:"quantity"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.ID,
		arg.CartID,
		arg.VariantID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCart = `-- name: GetCart :one
SELECT id, user_id, session_id, updated_at, created_at FROM carts WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetCart(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, cart_id, variant_id, quantity, added_at FROM cart_items WHERE id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, id uuid.UUID) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCartItemByProductID = `-- name: GetCartItemByProductID :one
SELECT id, cart_id, variant_id, quantity, added_at FROM cart_items WHERE id = $1 AND variant_id = $2
`

type GetCartItemByProductIDParams struct {
	ID        uuid.UUID `json:"id"`
	VariantID uuid.UUID `json:"variant_id"`
}

// Cart Item Section
func (q *Queries) GetCartItemByProductID(ctx context.Context, arg GetCartItemByProductIDParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByProductID, arg.ID, arg.VariantID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCartItemWithProduct = `-- name: GetCartItemWithProduct :one
SELECT 
    ci.id, ci.cart_id, ci.variant_id, ci.quantity, ci.added_at, 
    p.name AS product_name, p.brand_id, p.collection_id, p.category_id,
    pv.price, pv.stock, pv.sku, pv.image_url
FROM cart_items ci
JOIN product_variants AS pv ON ci.variant_id = p.id
JOIN products AS p ON p.id = ci.product_id
WHERE ci.id = $1
ORDER BY ci.added_at, ci.id, pv.id DESC
`

type GetCartItemWithProductRow struct {
	ID           uuid.UUID      `json:"id"`
	CartID       uuid.UUID      `json:"cart_id"`
	VariantID    uuid.UUID      `json:"variant_id"`
	Quantity     int16          `json:"quantity"`
	AddedAt      time.Time      `json:"added_at"`
	ProductName  string         `json:"product_name"`
	BrandID      pgtype.UUID    `json:"brand_id"`
	CollectionID pgtype.UUID    `json:"collection_id"`
	CategoryID   pgtype.UUID    `json:"category_id"`
	Price        pgtype.Numeric `json:"price"`
	Stock        int32          `json:"stock"`
	Sku          string         `json:"sku"`
	ImageUrl     pgtype.Text    `json:"image_url"`
}

func (q *Queries) GetCartItemWithProduct(ctx context.Context, id uuid.UUID) (GetCartItemWithProductRow, error) {
	row := q.db.QueryRow(ctx, getCartItemWithProduct, id)
	var i GetCartItemWithProductRow
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
		&i.ProductName,
		&i.BrandID,
		&i.CollectionID,
		&i.CategoryID,
		&i.Price,
		&i.Stock,
		&i.Sku,
		&i.ImageUrl,
	)
	return i, err
}

const getCartItemsByID = `-- name: GetCartItemsByID :many
SELECT ci.id, ci.cart_id, ci.variant_id, ci.quantity, ci.added_at, p.id, p.name, p.description, p.base_price, p.base_sku, p.slug, p.is_active, p.category_id, p.collection_id, p.brand_id, p.created_at, p.updated_at,
    av.value AS attribute_value, a.name AS attribute_name, pv.image_url AS image_url
FROM cart_items as ci
JOIN product_variants AS pv ON pv.id = ci.variant_id
JOIN products AS p ON p.id = pv.product_id
LEFT JOIN variant_attribute_values AS vav ON vav.id = pa.variant_id
LEFT JOIN attribute_values AS av ON vav.attribute_value_id = av.id
LEFT JOIN attributes AS a ON av.attribute_id = a.id
WHERE cart_id = $1
ORDER BY ci.id, ci.added_at DESC
`

type GetCartItemsByIDRow struct {
	CartItem       CartItem    `json:"cart_item"`
	Product        Product     `json:"product"`
	AttributeValue pgtype.Text `json:"attribute_value"`
	AttributeName  pgtype.Text `json:"attribute_name"`
	ImageUrl       pgtype.Text `json:"image_url"`
}

func (q *Queries) GetCartItemsByID(ctx context.Context, cartID uuid.UUID) ([]GetCartItemsByIDRow, error) {
	rows, err := q.db.Query(ctx, getCartItemsByID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsByIDRow{}
	for rows.Next() {
		var i GetCartItemsByIDRow
		if err := rows.Scan(
			&i.CartItem.ID,
			&i.CartItem.CartID,
			&i.CartItem.VariantID,
			&i.CartItem.Quantity,
			&i.CartItem.AddedAt,
			&i.Product.ID,
			&i.Product.Name,
			&i.Product.Description,
			&i.Product.BasePrice,
			&i.Product.BaseSku,
			&i.Product.Slug,
			&i.Product.IsActive,
			&i.Product.CategoryID,
			&i.Product.CollectionID,
			&i.Product.BrandID,
			&i.Product.CreatedAt,
			&i.Product.UpdatedAt,
			&i.AttributeValue,
			&i.AttributeName,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromCart = `-- name: RemoveProductFromCart :exec
DELETE FROM cart_items WHERE cart_id = $1 AND id = $2
`

type RemoveProductFromCartParams struct {
	CartID uuid.UUID `json:"cart_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) RemoveProductFromCart(ctx context.Context, arg RemoveProductFromCartParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCart, arg.CartID, arg.ID)
	return err
}

const updateCart = `-- name: UpdateCart :exec
UPDATE carts SET updated_at = NOW() WHERE id = $1 RETURNING id, user_id, session_id, updated_at, created_at
`

func (q *Queries) UpdateCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateCart, id)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items SET quantity = $1 WHERE id = $2 RETURNING id, cart_id, variant_id, quantity, added_at
`

type UpdateCartItemQuantityParams struct {
	Quantity int16     `json:"quantity"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.Quantity, arg.ID)
	return err
}
