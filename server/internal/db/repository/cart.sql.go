// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items WHERE id = $1
`

func (q *Queries) ClearCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearCart, id)
	return err
}

const countCartItems = `-- name: CountCartItems :one
SELECT COUNT(*) FROM cart_items WHERE id = $1
`

func (q *Queries) CountCartItems(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItems, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (id, user_id, session_id) VALUES ($1, $2, $3) RETURNING id, user_id, session_id, order_id, updated_at, created_at
`

type CreateCartParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	SessionID string    `json:"session_id"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.ID, arg.UserID, arg.SessionID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.OrderID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (id, cart_id, variant_id, quantity) VALUES ($1, $2, $3, $4) RETURNING id, cart_id, variant_id, quantity, added_at
`

type CreateCartItemParams struct {
	ID        uuid.UUID `json:"id"`
	CartID    uuid.UUID `json:"cart_id"`
	VariantID uuid.UUID `json:"variant_id"`
	Quantity  int16     `json:"quantity"`
}

// Cart Item Section
func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.ID,
		arg.CartID,
		arg.VariantID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCart = `-- name: GetCart :one
SELECT id, user_id, session_id, order_id, updated_at, created_at
FROM carts
WHERE carts.user_id = $1 OR carts.session_id = $2 AND carts.order_id IS NULL
ORDER BY carts.updated_at DESC
`

type GetCartParams struct {
	UserID    uuid.UUID `json:"user_id"`
	SessionID string    `json:"session_id"`
}

func (q *Queries) GetCart(ctx context.Context, arg GetCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, getCart, arg.UserID, arg.SessionID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.OrderID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, cart_id, variant_id, quantity, added_at FROM cart_items WHERE id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, id uuid.UUID) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCartItemByProductVariantID = `-- name: GetCartItemByProductVariantID :one
SELECT id, cart_id, variant_id, quantity, added_at FROM cart_items WHERE variant_id = $1 AND cart_id = $2
`

type GetCartItemByProductVariantIDParams struct {
	VariantID uuid.UUID `json:"variant_id"`
	CartID    uuid.UUID `json:"cart_id"`
}

func (q *Queries) GetCartItemByProductVariantID(ctx context.Context, arg GetCartItemByProductVariantIDParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByProductVariantID, arg.VariantID, arg.CartID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT 
    ci.id, ci.cart_id, ci.variant_id, ci.quantity, ci.added_at, 
    pv.id AS variant_id, pv.price, pv.stock, pv.sku, pv.stock as stock_qty,
    p.id AS product_id, p.name AS product_name,
    ci.id as cart_item_id, ci.quantity,
    av.id as attr_val_id, av.value AS attr_val_text, av.display_value as attr_display_val, a.name AS attr_name, a.id AS attr_id,
    i.id AS image_id, i.url AS image_url
FROM cart_items AS ci
JOIN product_variants AS pv ON pv.id = ci.variant_id
JOIN products AS p ON p.id = pv.product_id
JOIN variant_attribute_values AS vav ON vav.variant_id = pv.id
JOIN attribute_values AS av ON vav.attribute_value_id = av.id
JOIN attributes AS a ON av.attribute_id = a.id
LEFT JOIN image_assignments AS ia ON ia.entity_id = pv.id AND ia.entity_type = 'variant'
LEFT JOIN images AS i ON i.id = ia.image_id
WHERE ci.cart_id = $1
ORDER BY ci.added_at, ci.id, pv.id DESC
`

type GetCartItemsRow struct {
	CartItem       CartItem       `json:"cart_item"`
	VariantID      uuid.UUID      `json:"variant_id"`
	Price          pgtype.Numeric `json:"price"`
	Stock          int32          `json:"stock"`
	Sku            string         `json:"sku"`
	StockQty       int32          `json:"stock_qty"`
	ProductID      uuid.UUID      `json:"product_id"`
	ProductName    string         `json:"product_name"`
	CartItemID     uuid.UUID      `json:"cart_item_id"`
	Quantity       int16          `json:"quantity"`
	AttrValID      int32          `json:"attr_val_id"`
	AttrValText    string         `json:"attr_val_text"`
	AttrDisplayVal pgtype.Text    `json:"attr_display_val"`
	AttrName       string         `json:"attr_name"`
	AttrID         int32          `json:"attr_id"`
	ImageID        pgtype.Int4    `json:"image_id"`
	ImageUrl       pgtype.Text    `json:"image_url"`
}

func (q *Queries) GetCartItems(ctx context.Context, cartID uuid.UUID) ([]GetCartItemsRow, error) {
	rows, err := q.db.Query(ctx, getCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsRow{}
	for rows.Next() {
		var i GetCartItemsRow
		if err := rows.Scan(
			&i.CartItem.ID,
			&i.CartItem.CartID,
			&i.CartItem.VariantID,
			&i.CartItem.Quantity,
			&i.CartItem.AddedAt,
			&i.VariantID,
			&i.Price,
			&i.Stock,
			&i.Sku,
			&i.StockQty,
			&i.ProductID,
			&i.ProductName,
			&i.CartItemID,
			&i.Quantity,
			&i.AttrValID,
			&i.AttrValText,
			&i.AttrDisplayVal,
			&i.AttrName,
			&i.AttrID,
			&i.ImageID,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromCart = `-- name: RemoveProductFromCart :exec
DELETE FROM cart_items WHERE cart_id = $1 AND id = $2
`

type RemoveProductFromCartParams struct {
	CartID uuid.UUID `json:"cart_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) RemoveProductFromCart(ctx context.Context, arg RemoveProductFromCartParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCart, arg.CartID, arg.ID)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items SET quantity = $1 WHERE id = $2 RETURNING id, cart_id, variant_id, quantity, added_at
`

type UpdateCartItemQuantityParams struct {
	Quantity int16     `json:"quantity"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.Quantity, arg.ID)
	return err
}

const updateCartTimestamp = `-- name: UpdateCartTimestamp :exec
UPDATE carts SET updated_at = NOW() WHERE id = $1 RETURNING id, user_id, session_id, order_id, updated_at, created_at
`

func (q *Queries) UpdateCartTimestamp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateCartTimestamp, id)
	return err
}
