// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verify_email.sql

package repository

import (
	"context"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails (user_id, email, verify_code) VALUES ($1, $2, $3) RETURNING id, user_id, email, verify_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	UserID     int64  `json:"user_id"`
	Email      string `json:"email"`
	VerifyCode string `json:"verify_code"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail, arg.UserID, arg.Email, arg.VerifyCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyEmail = `-- name: GetVerifyEmail :one
SELECT id, user_id, email, verify_code, is_used, created_at, expired_at FROM verify_emails WHERE user_id = $1 AND email = $2
`

type GetVerifyEmailParams struct {
	UserID int64  `json:"user_id"`
	Email  string `json:"email"`
}

func (q *Queries) GetVerifyEmail(ctx context.Context, arg GetVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmail, arg.UserID, arg.Email)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyEmailByID = `-- name: GetVerifyEmailByID :one
SELECT id, user_id, email, verify_code, is_used, created_at, expired_at FROM verify_emails WHERE id = $1
`

func (q *Queries) GetVerifyEmailByID(ctx context.Context, id int32) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmailByID, id)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE verify_emails
SET is_used = TRUE
WHERE id = $1 AND verify_code = $2 AND expired_at > now()
RETURNING id, user_id, email, verify_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailParams struct {
	ID         int32  `json:"id"`
	VerifyCode string `json:"verify_code"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVerifyEmail, arg.ID, arg.VerifyCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.VerifyCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
