basePath: /api/v1
definitions:
  api.AddressResponse:
    properties:
      address_1:
        type: string
      address_2:
        type: string
      city:
        type: string
      default:
        type: boolean
      district:
        type: string
      id:
        type: integer
      phone:
        type: string
      ward:
        type: string
    type: object
  api.Attribute:
    properties:
      id:
        type: integer
      name:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  api.AttributeRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  api.CategoryProductRequest:
    properties:
      sort_order:
        type: integer
    type: object
  api.CategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      published:
        type: boolean
      sort_order:
        type: integer
    type: object
  api.CategoryResp:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/api.ProductListModel'
        type: array
    type: object
  api.CreateAddressParams:
    properties:
      city:
        type: string
      district:
        type: string
      is_default:
        type: boolean
      phone:
        maxLength: 15
        minLength: 10
        type: string
      street:
        type: string
      ward:
        type: string
    required:
    - city
    - district
    - phone
    - street
    type: object
  api.CreateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        maxLength: 1000
        minLength: 10
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      variants:
        items:
          $ref: '#/definitions/api.VariantRequest'
        type: array
    required:
    - description
    - name
    type: object
  api.GenericListResponse-api_Attribute:
    properties:
      data:
        items:
          $ref: '#/definitions/api.Attribute'
        type: array
      error:
        type: string
      message:
        type: string
      total:
        type: integer
    type: object
  api.GenericListResponse-api_ProductListModel:
    properties:
      data:
        items:
          $ref: '#/definitions/api.ProductListModel'
        type: array
      error:
        type: string
      message:
        type: string
      total:
        type: integer
    type: object
  api.GenericResponse-api_AddressResponse:
    properties:
      data:
        $ref: '#/definitions/api.AddressResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_Attribute:
    properties:
      data:
        $ref: '#/definitions/api.Attribute'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_OrderDetailResponse:
    properties:
      data:
        $ref: '#/definitions/api.OrderDetailResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_ProductListModel:
    properties:
      data:
        $ref: '#/definitions/api.ProductListModel'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_cartItemResponse:
    properties:
      data:
        $ref: '#/definitions/api.cartItemResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_cartResponse:
    properties:
      data:
        $ref: '#/definitions/api.cartResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_checkoutResponse:
    properties:
      data:
        $ref: '#/definitions/api.checkoutResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_loginResponse:
    properties:
      data:
        $ref: '#/definitions/api.loginResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-api_userResponse:
    properties:
      data:
        $ref: '#/definitions/api.userResponse'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-array_api_AddressResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.AddressResponse'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-array_api_userResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.userResponse'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-array_repository_Image:
    properties:
      data:
        items:
          $ref: '#/definitions/repository.Image'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-bool:
    properties:
      data:
        type: boolean
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-gin_H:
    properties:
      data:
        $ref: '#/definitions/gin.H'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_Cart:
    properties:
      data:
        $ref: '#/definitions/repository.Cart'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_Category:
    properties:
      data:
        $ref: '#/definitions/repository.Category'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_CategoryProduct:
    properties:
      data:
        $ref: '#/definitions/repository.CategoryProduct'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_CreateUserRow:
    properties:
      data:
        $ref: '#/definitions/repository.CreateUserRow'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_Image:
    properties:
      data:
        $ref: '#/definitions/repository.Image'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_Order:
    properties:
      data:
        $ref: '#/definitions/repository.Order'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_Product:
    properties:
      data:
        $ref: '#/definitions/repository.Product'
      error:
        type: string
      message:
        type: string
    type: object
  api.GenericResponse-repository_UpdateUserRow:
    properties:
      data:
        $ref: '#/definitions/repository.UpdateUserRow'
      error:
        type: string
      message:
        type: string
    type: object
  api.OrderDetailResponse:
    properties:
      id:
        type: string
      payment_info:
        $ref: '#/definitions/api.PaymentInfo'
      products:
        items:
          $ref: '#/definitions/api.OrderItemResponse'
        type: array
      status:
        $ref: '#/definitions/repository.OrderStatus'
      total:
        type: number
    type: object
  api.OrderItemResponse:
    properties:
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      quantity:
        type: integer
    type: object
  api.OrderListResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      payment_status:
        $ref: '#/definitions/repository.PaymentStatus'
      status:
        $ref: '#/definitions/repository.OrderStatus'
      total:
        type: number
      total_items:
        type: integer
      updated_at:
        type: string
    type: object
  api.PaymentInfo:
    properties:
      id:
        type: string
      payment_amount:
        type: number
      payment_gateway:
        type: string
      payment_method:
        type: string
      payment_status:
        type: string
      refund_id:
        type: string
    type: object
  api.PaymentRequest:
    properties:
      cart_id:
        minimum: 1
        type: integer
      gateway:
        type: string
    required:
    - cart_id
    - gateway
    type: object
  api.PaymentResponse:
    properties:
      details: {}
      gateway:
        $ref: '#/definitions/repository.PaymentGateway'
      status:
        $ref: '#/definitions/repository.PaymentStatus'
      transaction_id:
        type: string
    type: object
  api.ProductAttributeDetail:
    properties:
      id:
        type: integer
      name:
        type: string
      value:
        type: string
    type: object
  api.ProductListModel:
    properties:
      created_at:
        type: string
      description:
        type: string
      discount_to:
        type: integer
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price_from:
        type: number
      price_to:
        type: number
      variant_count:
        type: integer
    type: object
  api.UpdateAddressParams:
    properties:
      address_1:
        type: string
      address_2:
        type: string
      city:
        type: string
      district:
        type: string
      is_default:
        type: boolean
      phone:
        type: string
      ward:
        type: string
    type: object
  api.UpdateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        maxLength: 1000
        minLength: 10
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      variants:
        items:
          $ref: '#/definitions/repository.UpdateVariantTxParams'
        type: array
    type: object
  api.UpdateVariantRequest:
    properties:
      attributes:
        items:
          $ref: '#/definitions/api.VariantUpdateAttributeRequest'
        type: array
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    type: object
  api.VariantAttributeRequest:
    properties:
      attribute_id:
        type: integer
      value:
        type: string
    required:
    - attribute_id
    - value
    type: object
  api.VariantRequest:
    properties:
      attributes:
        items:
          $ref: '#/definitions/api.VariantAttributeRequest'
        type: array
      discount:
        minimum: 0
        type: integer
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    required:
    - price
    - stock
    type: object
  api.VariantResponse:
    properties:
      attributes:
        items:
          $ref: '#/definitions/api.ProductAttributeDetail'
        type: array
      created_at:
        type: string
      discount:
        type: integer
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
      variant_id:
        type: integer
    type: object
  api.VariantUpdateAttributeRequest:
    properties:
      id:
        type: integer
      value:
        type: string
    required:
    - id
    - value
    type: object
  api.addProductToCartRequest:
    properties:
      product_id:
        minimum: 1
        type: integer
      quantity:
        type: integer
      variant_id:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    - variant_id
    type: object
  api.addProductToCategoryRequest:
    properties:
      product_id:
        type: integer
    type: object
  api.addressResponse:
    properties:
      address:
        type: string
      address_2:
        type: string
      city:
        type: string
      district:
        type: string
      phone:
        type: string
      ward:
        type: string
    type: object
  api.cartItemAttributeModel:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  api.cartItemResponse:
    properties:
      attributes:
        items:
          $ref: '#/definitions/api.cartItemAttributeModel'
        type: array
      discount:
        type: integer
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
      sku:
        type: string
      stock:
        type: integer
      variant_id:
        type: integer
    type: object
  api.cartResponse:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/api.cartItemResponse'
        type: array
      created_at:
        type: string
      id:
        type: string
      total_price:
        type: number
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  api.checkoutRequest:
    properties:
      address_id:
        type: integer
      payment_gateway:
        enum:
        - stripe
        - paypal
        - visa
        - mastercard
        - apple_pay
        - google_pay
        - postpaid
        - momo
        - zalo_pay
        - vn_pay
        type: string
    required:
    - address_id
    - payment_gateway
    type: object
  api.checkoutResponse:
    properties:
      order_id:
        type: string
      payment_id:
        type: string
    type: object
  api.createUserRequest:
    properties:
      email:
        maxLength: 255
        minLength: 6
        type: string
      fullname:
        maxLength: 32
        minLength: 3
        type: string
      password:
        maxLength: 32
        minLength: 6
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - fullname
    - password
    - phone
    - username
    type: object
  api.errorResponse:
    properties:
      error:
        type: string
    type: object
  api.loginResponse:
    properties:
      refresh_token:
        type: string
      refresh_token_expire_at:
        type: string
      session_id:
        type: string
      token:
        type: string
      token_expire_at:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.loginUserRequest:
    properties:
      password:
        maxLength: 32
        minLength: 6
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  api.renewAccessTokenResp:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        $ref: '#/definitions/time.Duration'
    type: object
  api.updateCartItemRequest:
    properties:
      quantity:
        type: integer
    required:
    - quantity
    type: object
  api.updateUserRequest:
    properties:
      email:
        maxLength: 255
        minLength: 6
        type: string
      fullname:
        maxLength: 32
        minLength: 3
        type: string
      role:
        $ref: '#/definitions/repository.UserRole'
      user_id:
        type: string
    required:
    - user_id
    type: object
  api.userResponse:
    properties:
      addresses:
        items:
          $ref: '#/definitions/api.addressResponse'
        type: array
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      password_changed_at:
        type: string
      role:
        $ref: '#/definitions/repository.UserRole'
      updated_at:
        type: string
      username:
        type: string
      verified_email:
        type: boolean
      verified_phone:
        type: boolean
    type: object
  big.Int:
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Int8:
    properties:
      int64:
        type: integer
      valid:
        type: boolean
    type: object
  pgtype.Numeric:
    properties:
      exp:
        type: integer
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      int:
        $ref: '#/definitions/big.Int'
      naN:
        type: boolean
      valid:
        type: boolean
    type: object
  pgtype.Text:
    properties:
      string:
        type: string
      valid:
        type: boolean
    type: object
  pgtype.Timestamp:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        description: Time zone will be ignored when encoding to PostgreSQL.
        type: string
      valid:
        type: boolean
    type: object
  pgtype.Timestamptz:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        type: string
      valid:
        type: boolean
    type: object
  repository.Cart:
    properties:
      cart_id:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  repository.Category:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        $ref: '#/definitions/pgtype.Text'
      name:
        type: string
      published:
        type: boolean
      sort_order:
        type: integer
      updated_at:
        type: string
    type: object
  repository.CategoryProduct:
    properties:
      category_id:
        type: integer
      product_id:
        type: integer
      sort_order:
        type: integer
    type: object
  repository.CreateUserRow:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      role:
        $ref: '#/definitions/repository.UserRole'
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
      verified_email:
        type: boolean
      verified_phone:
        type: boolean
    type: object
  repository.Image:
    properties:
      created_at:
        $ref: '#/definitions/pgtype.Timestamp'
      external_id:
        $ref: '#/definitions/pgtype.Text'
      image_id:
        type: integer
      image_url:
        type: string
      product_id:
        $ref: '#/definitions/pgtype.Int8'
      updated_at:
        $ref: '#/definitions/pgtype.Timestamp'
      variant_id:
        $ref: '#/definitions/pgtype.Int8'
    type: object
  repository.Order:
    properties:
      cancelled_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      confirmed_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      created_at:
        type: string
      delivered_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      order_id:
        type: string
      refunded_at:
        $ref: '#/definitions/pgtype.Timestamptz'
      status:
        $ref: '#/definitions/repository.OrderStatus'
      total_price:
        $ref: '#/definitions/pgtype.Numeric'
      updated_at:
        type: string
      user_address_id:
        type: integer
      user_id:
        type: string
    type: object
  repository.OrderStatus:
    enum:
    - pending
    - confirmed
    - delivering
    - delivered
    - cancelled
    - refunded
    - completed
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusDelivering
    - OrderStatusDelivered
    - OrderStatusCancelled
    - OrderStatusRefunded
    - OrderStatusCompleted
  repository.PaymentGateway:
    enum:
    - stripe
    - paypal
    - visa
    - mastercard
    - apple_pay
    - google_pay
    - postpaid
    - momo
    - zalo_pay
    - vn_pay
    type: string
    x-enum-varnames:
    - PaymentGatewayStripe
    - PaymentGatewayPaypal
    - PaymentGatewayVisa
    - PaymentGatewayMastercard
    - PaymentGatewayApplePay
    - PaymentGatewayGooglePay
    - PaymentGatewayPostpaid
    - PaymentGatewayMomo
    - PaymentGatewayZaloPay
    - PaymentGatewayVnPay
  repository.PaymentStatus:
    enum:
    - pending
    - success
    - failed
    - cancelled
    - refunded
    - processing
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusSuccess
    - PaymentStatusFailed
    - PaymentStatusCancelled
    - PaymentStatusRefunded
    - PaymentStatusProcessing
  repository.Product:
    properties:
      archived:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      name:
        type: string
      product_id:
        type: integer
      updated_at:
        type: string
    type: object
  repository.ProductVariant:
    properties:
      created_at:
        type: string
      discount:
        type: integer
      price:
        $ref: '#/definitions/pgtype.Numeric'
      product_id:
        type: integer
      sku:
        $ref: '#/definitions/pgtype.Text'
      stock_quantity:
        type: integer
      updated_at:
        type: string
      variant_id:
        type: integer
    type: object
  repository.UpdateUserRow:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      role:
        $ref: '#/definitions/repository.UserRole'
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
      verified_email:
        type: boolean
      verified_phone:
        type: boolean
    type: object
  repository.UpdateVariantAttributeParams:
    properties:
      value:
        $ref: '#/definitions/pgtype.Text'
      variant_attribute_id:
        type: integer
    type: object
  repository.UpdateVariantTxParams:
    properties:
      attributes:
        items:
          $ref: '#/definitions/repository.UpdateVariantAttributeParams'
        type: array
      discount:
        minimum: 0
        type: integer
      name:
        minLength: 1
        type: string
      price:
        minimum: 0
        type: number
      sku:
        minLength: 1
        type: string
      stock:
        minimum: 0
        type: integer
      variant_id:
        minimum: 1
        type: integer
    required:
    - variant_id
    type: object
  repository.UserRole:
    enum:
    - admin
    - user
    - moderator
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleUser
    - UserRoleModerator
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
host: localhost:4000
info:
  contact: {}
  description: This is a sample server for a simple e-commerce API.
  title: E-Commerce API
paths:
  /address:
    get:
      consumes:
      - application/json
      description: Get list of addresses
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-array_api_AddressResponse'
      summary: Get list of addresses
      tags:
      - address
    post:
      consumes:
      - application/json
      description: Create a new address
      parameters:
      - description: Create Address
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.CreateAddressParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_AddressResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new address
      tags:
      - address
  /address/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove an address
      tags:
      - address
    put:
      consumes:
      - application/json
      description: Update an address
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Address
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.UpdateAddressParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_AddressResponse'
      summary: Update an address
      tags:
      - address
  /attributes:
    get:
      consumes:
      - application/json
      description: Get all attributes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericListResponse-api_Attribute'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get all attributes
      tags:
      - attributes
    post:
      consumes:
      - application/json
      description: Create an attribute
      parameters:
      - description: Attribute name
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.AttributeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.GenericResponse-api_Attribute'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create an attribute
      tags:
      - attributes
  /attributes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an attribute
      parameters:
      - description: Attribute ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete an attribute
      tags:
      - attributes
    get:
      consumes:
      - application/json
      description: Get an attribute
      parameters:
      - description: Attribute ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_Attribute'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get an attribute
      tags:
      - attributes
    put:
      consumes:
      - application/json
      description: Update an attribute
      parameters:
      - description: Attribute ID
        in: path
        name: id
        required: true
        type: integer
      - description: Attribute name
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.AttributeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_Attribute'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update an attribute
      tags:
      - attributes
  /cart:
    get:
      consumes:
      - application/json
      description: get cart details by user ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_cartResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get cart details by user ID
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: create a new cart for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create a new cart
      tags:
      - carts
  /cart/checkout:
    post:
      consumes:
      - application/json
      description: update product items in the cart
      parameters:
      - description: Update cart items input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.checkoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_checkoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update product items in the cart
      tags:
      - carts
  /cart/clear:
    put:
      consumes:
      - application/json
      description: clear the cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Clear the cart
      tags:
      - carts
  /cart/item:
    post:
      consumes:
      - application/json
      description: add a product to the cart
      parameters:
      - description: Add product to cart input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.addProductToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_cartItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Add a product to the cart
      tags:
      - carts
  /cart/item/{id}:
    delete:
      consumes:
      - application/json
      description: remove a product from the cart
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Remove a product from the cart
      tags:
      - carts
  /cart/item/{id}/quantity:
    put:
      consumes:
      - application/json
      description: update product items in the cart
      parameters:
      - description: Update cart items input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.updateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_cartItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update product items in the cart
      tags:
      - carts
  /categories:
    get:
      consumes:
      - application/json
      description: Get a list of Categories
      operationId: get-Categories
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.CategoryResp'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get a list of Categories
    post:
      consumes:
      - application/json
      description: Create a new Category
      operationId: create-Category
      parameters:
      - description: Category request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create a new Category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Category
      operationId: delete-Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete a Category
    get:
      consumes:
      - application/json
      description: Get a Category by ID
      operationId: get-Category-by-id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.CategoryResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get a Category by ID
    put:
      consumes:
      - application/json
      description: Update a Category
      operationId: update-Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update a Category
  /categories/{id}/product:
    delete:
      consumes:
      - application/json
      description: Delete a product from a Category
      operationId: delete-product-from-Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: body
        name: product_id
        required: true
        schema:
          $ref: '#/definitions/api.CategoryProductRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete a product from a Category
    post:
      consumes:
      - application/json
      description: Add a product to a Category
      operationId: add-product-to-Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.addProductToCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_CategoryProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Add a product to a Category
  /categories/{id}/product/sort-order:
    put:
      consumes:
      - application/json
      description: Update the sort order of a product in a Category
      operationId: update-product-sort-order
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product ID
        in: body
        name: product_id
        required: true
        schema:
          $ref: '#/definitions/api.CategoryProductRequest'
      - description: Sort order
        in: body
        name: sort_order
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update the sort order of a product in a Category
  /category/{id}/products:
    get:
      consumes:
      - application/json
      description: Get a list of products in a Category
      operationId: get-Category-products
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.ProductListModel'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get a list of products in a Category
  /images/product:
    post:
      consumes:
      - application/json
      description: upload a product image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-array_repository_Image'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Upload a product image by ID
      tags:
      - images
  /images/product/{product_id}:
    get:
      consumes:
      - application/json
      description: get list of product image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Image'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get list of product image by ID
      tags:
      - images
  /images/product/{product_id}/remove:
    delete:
      consumes:
      - application/json
      description: remove a product image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product image by ID
      tags:
      - images
  /images/product/{product_id}/variant/{variant_id}:
    get:
      consumes:
      - application/json
      description: get list of variant image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Variant ID
        in: path
        name: variant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Image'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get list of variant image by ID
      tags:
      - images
  /images/product/{product_id}/variant/{variant_id}/remove:
    delete:
      consumes:
      - application/json
      description: remove a variant image by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Variant ID
        in: path
        name: variant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a variant image by ID
      tags:
      - images
  /order/{order_id}:
    get:
      consumes:
      - application/json
      description: Get order detail by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_OrderDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get order detail
      tags:
      - orders
  /order/{order_id}/cancel:
    put:
      consumes:
      - application/json
      description: Cancel order by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Cancel order
      tags:
      - orders
  /order/{order_id}/refund:
    put:
      consumes:
      - application/json
      description: Refund order by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Refund order
      tags:
      - orders
  /order/{order_id}/status:
    put:
      consumes:
      - application/json
      description: Change order status by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Change order status
      tags:
      - orders
  /order/list:
    get:
      consumes:
      - application/json
      description: List orders of the current user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OrderListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: List orders
      tags:
      - orders
  /payment:
    post:
      consumes:
      - application/json
      description: Initiate payment
      parameters:
      - description: Payment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - BearerAuth: []
      summary: Initiate payment
      tags:
      - payment
  /payment/{order_id}:
    get:
      consumes:
      - application/json
      description: Get payment transaction by order ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - BearerAuth: []
      summary: Get payment transaction by order ID
      tags:
      - payment
  /payment/{payment_id}:
    get:
      consumes:
      - application/json
      description: Change payment status
      parameters:
      - description: Payment ID
        in: path
        name: payment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.errorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      security:
      - BearerAuth: []
      summary: Change payment status
      tags:
      - payment
  /product:
    post:
      consumes:
      - application/json
      description: create a new product with the input payload
      parameters:
      - description: Product input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new product
      tags:
      - products
  /product/{product_id}/variant/{variant_id}:
    put:
      consumes:
      - application/json
      description: Update a variant
      parameters:
      - description: Variant ID
        in: path
        name: variant_id
        required: true
        type: integer
      - description: Update Variant Request
        in: body
        name: UpdateVariantRequest
        required: true
        schema:
          $ref: '#/definitions/api.UpdateVariantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.ProductVariant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update a variant
      tags:
      - variant
  /products:
    get:
      consumes:
      - application/json
      description: get list of products
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.GenericListResponse-api_ProductListModel'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get list of products
      tags:
      - products
  /products/{product_id}:
    delete:
      consumes:
      - application/json
      description: remove a product by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-bool'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a product by ID
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get a product detail by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_ProductListModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a product detail by ID
      tags:
      - product detail
    put:
      consumes:
      - application/json
      description: update a product by ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Product input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a product by ID
      tags:
      - products
  /users:
    get:
      consumes:
      - application/json
      description: Get user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_userResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get user info
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_CreateUserRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    patch:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-repository_UpdateUserRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update user info
      tags:
      - users
  /users/list:
    get:
      consumes:
      - application/json
      description: List users
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-array_api_userResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List users
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login to the system
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-api_loginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Login to the system
      tags:
      - users
  /users/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.renewAccessTokenResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Refresh token
      tags:
      - users
  /variant/{product_id}:
    post:
      consumes:
      - application/json
      description: Create a variant
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: Create Variant Request
        in: body
        name: VariantRequest
        required: true
        schema:
          $ref: '#/definitions/api.VariantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/repository.ProductVariant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create a variant
      tags:
      - variant
  /variant/{variant_id}:
    delete:
      consumes:
      - application/json
      description: Delete a variant
      parameters:
      - description: Variant ID
        in: path
        name: variant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete a variant
      tags:
      - variant
    get:
      consumes:
      - application/json
      description: Get a variant
      parameters:
      - description: Variant ID
        in: path
        name: variant_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.VariantResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get a variant
      tags:
      - variant
  /webhook/stripe:
    post:
      consumes:
      - application/json
      description: Stripe webhook
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GenericResponse-gin_H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Stripe webhook
      tags:
      - webhook
swagger: "2.0"
