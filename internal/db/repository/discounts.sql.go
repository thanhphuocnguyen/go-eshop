// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: discounts.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDiscount = `-- name: DeleteDiscount :exec
UPDATE discounts
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteDiscount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDiscount, id)
	return err
}

const getDiscount = `-- name: GetDiscount :one
SELECT id, code, description, discount_type, discount_value, min_purchase_amount, max_discount_amount, usage_limit, used_count, is_active, starts_at, expires_at, created_at, updated_at, deleted_at
FROM discounts
WHERE id = $1
`

func (q *Queries) GetDiscount(ctx context.Context, id uuid.UUID) (Discount, error) {
	row := q.db.QueryRow(ctx, getDiscount, id)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.DiscountType,
		&i.DiscountValue,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.UsageLimit,
		&i.UsedCount,
		&i.IsActive,
		&i.StartsAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDiscountByCode = `-- name: GetDiscountByCode :one
SELECT id, code, description, discount_type, discount_value, min_purchase_amount, max_discount_amount, usage_limit, used_count, is_active, starts_at, expires_at, created_at, updated_at, deleted_at
FROM discounts
WHERE code = $1
LIMIT 1
`

func (q *Queries) GetDiscountByCode(ctx context.Context, code string) (Discount, error) {
	row := q.db.QueryRow(ctx, getDiscountByCode, code)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.DiscountType,
		&i.DiscountValue,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.UsageLimit,
		&i.UsedCount,
		&i.IsActive,
		&i.StartsAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDiscounts = `-- name: GetDiscounts :many
SELECT id, code, "description", discount_type, discount_value, min_purchase_amount, max_discount_amount, usage_limit, used_count, is_active, starts_at, expires_at
FROM discounts
WHERE code ILIKE COALESCE($3, discounts.code)
  AND "description" ILIKE COALESCE($4, discounts."description")
  AND discount_type = COALESCE($5, discounts.discount_type)
  AND discount_value = COALESCE($6, discounts.discount_value)
  AND min_purchase_amount = COALESCE($7, discounts.min_purchase_amount)
  AND max_discount_amount = COALESCE($8, discounts.max_discount_amount)
  AND usage_limit = COALESCE($9, discounts.usage_limit)
  AND used_count = COALESCE($10, discounts.used_count)
  AND is_active = COALESCE($11, discounts.is_active)
  AND starts_at >= COALESCE($12, discounts.starts_at)
  AND starts_at <= COALESCE($13, discounts.starts_at)
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetDiscountsParams struct {
	Limit             int64              `json:"limit"`
	Offset            int64              `json:"offset"`
	Code              *string            `json:"code"`
	Description       *string            `json:"description"`
	DiscountType      *string            `json:"discount_type"`
	DiscountValue     pgtype.Numeric     `json:"discount_value"`
	MinPurchaseAmount pgtype.Numeric     `json:"min_purchase_amount"`
	MaxDiscountAmount pgtype.Numeric     `json:"max_discount_amount"`
	UsageLimit        *int32             `json:"usage_limit"`
	UsedCount         *int32             `json:"used_count"`
	IsActive          *bool              `json:"is_active"`
	FormDate          pgtype.Timestamptz `json:"form_date"`
	ToDate            pgtype.Timestamptz `json:"to_date"`
}

type GetDiscountsRow struct {
	ID                uuid.UUID      `json:"id"`
	Code              string         `json:"code"`
	Description       *string        `json:"description"`
	DiscountType      string         `json:"discount_type"`
	DiscountValue     pgtype.Numeric `json:"discount_value"`
	MinPurchaseAmount pgtype.Numeric `json:"min_purchase_amount"`
	MaxDiscountAmount pgtype.Numeric `json:"max_discount_amount"`
	UsageLimit        *int32         `json:"usage_limit"`
	UsedCount         *int32         `json:"used_count"`
	IsActive          *bool          `json:"is_active"`
	StartsAt          time.Time      `json:"starts_at"`
	ExpiresAt         time.Time      `json:"expires_at"`
}

func (q *Queries) GetDiscounts(ctx context.Context, arg GetDiscountsParams) ([]GetDiscountsRow, error) {
	rows, err := q.db.Query(ctx, getDiscounts,
		arg.Limit,
		arg.Offset,
		arg.Code,
		arg.Description,
		arg.DiscountType,
		arg.DiscountValue,
		arg.MinPurchaseAmount,
		arg.MaxDiscountAmount,
		arg.UsageLimit,
		arg.UsedCount,
		arg.IsActive,
		arg.FormDate,
		arg.ToDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountsRow{}
	for rows.Next() {
		var i GetDiscountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Description,
			&i.DiscountType,
			&i.DiscountValue,
			&i.MinPurchaseAmount,
			&i.MaxDiscountAmount,
			&i.UsageLimit,
			&i.UsedCount,
			&i.IsActive,
			&i.StartsAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDiscount = `-- name: InsertDiscount :one
INSERT INTO discounts 
    (code, description, discount_type, discount_value, min_purchase_amount, max_discount_amount, is_active, usage_limit, used_count, starts_at, expires_at)
VALUES 
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id
`

type InsertDiscountParams struct {
	Code              string             `json:"code"`
	Description       *string            `json:"description"`
	DiscountType      string             `json:"discount_type"`
	DiscountValue     pgtype.Numeric     `json:"discount_value"`
	MinPurchaseAmount pgtype.Numeric     `json:"min_purchase_amount"`
	MaxDiscountAmount pgtype.Numeric     `json:"max_discount_amount"`
	IsActive          *bool              `json:"is_active"`
	UsageLimit        *int32             `json:"usage_limit"`
	UsedCount         *int32             `json:"used_count"`
	StartsAt          pgtype.Timestamptz `json:"starts_at"`
	ExpiresAt         pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) InsertDiscount(ctx context.Context, arg InsertDiscountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscount,
		arg.Code,
		arg.Description,
		arg.DiscountType,
		arg.DiscountValue,
		arg.MinPurchaseAmount,
		arg.MaxDiscountAmount,
		arg.IsActive,
		arg.UsageLimit,
		arg.UsedCount,
		arg.StartsAt,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertDiscountCategory = `-- name: InsertDiscountCategory :one
INSERT INTO discount_categories (discount_id, category_id)
VALUES ($1, $2)
RETURNING id
`

type InsertDiscountCategoryParams struct {
	DiscountID uuid.UUID `json:"discount_id"`
	CategoryID uuid.UUID `json:"category_id"`
}

func (q *Queries) InsertDiscountCategory(ctx context.Context, arg InsertDiscountCategoryParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscountCategory, arg.DiscountID, arg.CategoryID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertDiscountProduct = `-- name: InsertDiscountProduct :one
INSERT INTO discount_products (discount_id, product_id)
VALUES ($1, $2)
RETURNING id
`

type InsertDiscountProductParams struct {
	DiscountID uuid.UUID `json:"discount_id"`
	ProductID  uuid.UUID `json:"product_id"`
}

func (q *Queries) InsertDiscountProduct(ctx context.Context, arg InsertDiscountProductParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscountProduct, arg.DiscountID, arg.ProductID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertDiscountUser = `-- name: InsertDiscountUser :one
INSERT INTO discount_users (discount_id, user_id)
VALUES ($1, $2)
RETURNING id
`

type InsertDiscountUserParams struct {
	DiscountID uuid.UUID `json:"discount_id"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) InsertDiscountUser(ctx context.Context, arg InsertDiscountUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscountUser, arg.DiscountID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertOrderDiscount = `-- name: InsertOrderDiscount :one
INSERT INTO order_discounts (order_id, discount_id, discount_amount)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertOrderDiscountParams struct {
	OrderID        uuid.UUID      `json:"order_id"`
	DiscountID     uuid.UUID      `json:"discount_id"`
	DiscountAmount pgtype.Numeric `json:"discount_amount"`
}

func (q *Queries) InsertOrderDiscount(ctx context.Context, arg InsertOrderDiscountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertOrderDiscount, arg.OrderID, arg.DiscountID, arg.DiscountAmount)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateDiscount = `-- name: UpdateDiscount :one
UPDATE discounts
SET "description" = COALESCE($2, discounts.description),
    discount_type = COALESCE($3, discounts.discount_type),
    discount_value = COALESCE($4, discounts.discount_value),
    min_purchase_amount = COALESCE($5, discounts.min_purchase_amount),
    max_discount_amount = COALESCE($6, discounts.max_discount_amount),
    usage_limit = COALESCE($7, discounts.usage_limit),
    used_count = COALESCE($8, discounts.used_count),
    is_active = COALESCE($9, discounts.is_active),
    starts_at = COALESCE($10, discounts.starts_at),
    expires_at = COALESCE($11, discounts.expires_at)
WHERE id = $1
RETURNING id
`

type UpdateDiscountParams struct {
	ID                uuid.UUID          `json:"id"`
	Description       *string            `json:"description"`
	DiscountType      *string            `json:"discount_type"`
	DiscountValue     pgtype.Numeric     `json:"discount_value"`
	MinPurchaseAmount pgtype.Numeric     `json:"min_purchase_amount"`
	MaxDiscountAmount pgtype.Numeric     `json:"max_discount_amount"`
	UsageLimit        *int32             `json:"usage_limit"`
	UsedCount         *int32             `json:"used_count"`
	IsActive          *bool              `json:"is_active"`
	StartsAt          pgtype.Timestamptz `json:"starts_at"`
	ExpiresAt         pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateDiscount,
		arg.ID,
		arg.Description,
		arg.DiscountType,
		arg.DiscountValue,
		arg.MinPurchaseAmount,
		arg.MaxDiscountAmount,
		arg.UsageLimit,
		arg.UsedCount,
		arg.IsActive,
		arg.StartsAt,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
