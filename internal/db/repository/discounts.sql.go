// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: discounts.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countDiscountCategories = `-- name: CountDiscountCategories :one
SELECT COUNT(*) FROM discount_categories
WHERE discount_id = $1
`

func (q *Queries) CountDiscountCategories(ctx context.Context, discountID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countDiscountCategories, discountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countDiscountProducts = `-- name: CountDiscountProducts :one
SELECT COUNT(*) FROM discount_products
WHERE discount_id = $1
`

func (q *Queries) CountDiscountProducts(ctx context.Context, discountID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countDiscountProducts, discountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countDiscountUsers = `-- name: CountDiscountUsers :one
SELECT COUNT(*) FROM discount_users
WHERE discount_id = $1
`

func (q *Queries) CountDiscountUsers(ctx context.Context, discountID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countDiscountUsers, discountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countDiscounts = `-- name: CountDiscounts :one
SELECT COUNT(*) FROM discounts
`

func (q *Queries) CountDiscounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countDiscounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteCategoryDiscountsByDiscountID = `-- name: DeleteCategoryDiscountsByDiscountID :exec
DELETE FROM discount_categories
WHERE discount_id = $1
`

func (q *Queries) DeleteCategoryDiscountsByDiscountID(ctx context.Context, discountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategoryDiscountsByDiscountID, discountID)
	return err
}

const deleteDiscount = `-- name: DeleteDiscount :exec
UPDATE discounts
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteDiscount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDiscount, id)
	return err
}

const deleteDiscountCategory = `-- name: DeleteDiscountCategory :exec
DELETE FROM discount_categories
WHERE discount_id = $1
  AND category_id = $2
`

type DeleteDiscountCategoryParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	CategoryID uuid.UUID `json:"categoryId"`
}

func (q *Queries) DeleteDiscountCategory(ctx context.Context, arg DeleteDiscountCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteDiscountCategory, arg.DiscountID, arg.CategoryID)
	return err
}

const deleteProductDiscountsByDiscountID = `-- name: DeleteProductDiscountsByDiscountID :exec
DELETE FROM discount_products
WHERE discount_id = $1
`

func (q *Queries) DeleteProductDiscountsByDiscountID(ctx context.Context, discountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductDiscountsByDiscountID, discountID)
	return err
}

const deleteUserDiscountsByDiscountID = `-- name: DeleteUserDiscountsByDiscountID :exec
DELETE FROM discount_users
WHERE discount_id = $1
`

func (q *Queries) DeleteUserDiscountsByDiscountID(ctx context.Context, discountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserDiscountsByDiscountID, discountID)
	return err
}

const getDiscountByCode = `-- name: GetDiscountByCode :one
SELECT id, code, description, discount_type, discount_value, min_purchase_amount, max_discount_amount, usage_limit, used_count, is_active, starts_at, expires_at, created_at, updated_at, deleted_at
FROM discounts
WHERE code = $1
LIMIT 1
`

func (q *Queries) GetDiscountByCode(ctx context.Context, code string) (Discount, error) {
	row := q.db.QueryRow(ctx, getDiscountByCode, code)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.DiscountType,
		&i.DiscountValue,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.UsageLimit,
		&i.UsedCount,
		&i.IsActive,
		&i.StartsAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDiscountByID = `-- name: GetDiscountByID :one
SELECT id, code, description, discount_type, discount_value, min_purchase_amount, max_discount_amount, usage_limit, used_count, is_active, starts_at, expires_at, created_at, updated_at, deleted_at
FROM discounts
WHERE id = $1
`

func (q *Queries) GetDiscountByID(ctx context.Context, id uuid.UUID) (Discount, error) {
	row := q.db.QueryRow(ctx, getDiscountByID, id)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.DiscountType,
		&i.DiscountValue,
		&i.MinPurchaseAmount,
		&i.MaxDiscountAmount,
		&i.UsageLimit,
		&i.UsedCount,
		&i.IsActive,
		&i.StartsAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDiscountCategories = `-- name: GetDiscountCategories :many
SELECT dc.id, dc.discount_id, dc.category_id, c.name
FROM discount_categories dc
JOIN categories c ON dc.category_id = c.id
WHERE dc.discount_id = $1
ORDER BY dc.id
LIMIT $2
OFFSET $3
`

type GetDiscountCategoriesParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	Limit      int64     `json:"limit"`
	Offset     int64     `json:"offset"`
}

type GetDiscountCategoriesRow struct {
	ID         uuid.UUID `json:"id"`
	DiscountID uuid.UUID `json:"discountId"`
	CategoryID uuid.UUID `json:"categoryId"`
	Name       string    `json:"name"`
}

func (q *Queries) GetDiscountCategories(ctx context.Context, arg GetDiscountCategoriesParams) ([]GetDiscountCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getDiscountCategories, arg.DiscountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountCategoriesRow{}
	for rows.Next() {
		var i GetDiscountCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.DiscountID,
			&i.CategoryID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiscountProducts = `-- name: GetDiscountProducts :many
SELECT dp.id, dp.discount_id, dp.product_id, p.name, p.base_price, d.discount_type, d.discount_value
FROM discount_products dp
JOIN products p ON dp.product_id = p.id
JOIN discounts d ON dp.discount_id = d.id
WHERE dp.discount_id = $1
ORDER BY dp.id
LIMIT $2
OFFSET $3
`

type GetDiscountProductsParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	Limit      int64     `json:"limit"`
	Offset     int64     `json:"offset"`
}

type GetDiscountProductsRow struct {
	ID            uuid.UUID      `json:"id"`
	DiscountID    uuid.UUID      `json:"discountId"`
	ProductID     uuid.UUID      `json:"productId"`
	Name          string         `json:"name"`
	BasePrice     pgtype.Numeric `json:"basePrice"`
	DiscountType  string         `json:"discountType"`
	DiscountValue pgtype.Numeric `json:"discountValue"`
}

func (q *Queries) GetDiscountProducts(ctx context.Context, arg GetDiscountProductsParams) ([]GetDiscountProductsRow, error) {
	rows, err := q.db.Query(ctx, getDiscountProducts, arg.DiscountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountProductsRow{}
	for rows.Next() {
		var i GetDiscountProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.DiscountID,
			&i.ProductID,
			&i.Name,
			&i.BasePrice,
			&i.DiscountType,
			&i.DiscountValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiscountProductsAndCategories = `-- name: GetDiscountProductsAndCategories :many
SELECT dp.product_id, dc.category_id
FROM discounts d
LEFT JOIN discount_products dp ON d.id = dp.discount_id
LEFT JOIN discount_categories dc ON d.id = dc.discount_id
WHERE d.id = $1
  AND (dp.product_id IS NOT NULL OR dc.category_id IS NOT NULL)
ORDER BY dp.product_id, dc.category_id
`

type GetDiscountProductsAndCategoriesRow struct {
	ProductID  pgtype.UUID `json:"productId"`
	CategoryID pgtype.UUID `json:"categoryId"`
}

func (q *Queries) GetDiscountProductsAndCategories(ctx context.Context, id uuid.UUID) ([]GetDiscountProductsAndCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getDiscountProductsAndCategories, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountProductsAndCategoriesRow{}
	for rows.Next() {
		var i GetDiscountProductsAndCategoriesRow
		if err := rows.Scan(&i.ProductID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiscountUsages = `-- name: GetDiscountUsages :many
SELECT usage_limit, used_count, discount_amount, customer_name, order_id, total_price, order_discounts.created_at
FROM discounts
JOIN order_discounts ON discounts.id = order_discounts.discount_id
JOIN orders ON order_discounts.order_id = orders.id
WHERE discounts.id = $1
  AND orders.status IN ('completed', 'confirmed')
`

type GetDiscountUsagesRow struct {
	UsageLimit     *int32             `json:"usageLimit"`
	UsedCount      int32              `json:"usedCount"`
	DiscountAmount pgtype.Numeric     `json:"discountAmount"`
	CustomerName   string             `json:"customerName"`
	OrderID        uuid.UUID          `json:"orderId"`
	TotalPrice     pgtype.Numeric     `json:"totalPrice"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
}

func (q *Queries) GetDiscountUsages(ctx context.Context, id uuid.UUID) ([]GetDiscountUsagesRow, error) {
	rows, err := q.db.Query(ctx, getDiscountUsages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountUsagesRow{}
	for rows.Next() {
		var i GetDiscountUsagesRow
		if err := rows.Scan(
			&i.UsageLimit,
			&i.UsedCount,
			&i.DiscountAmount,
			&i.CustomerName,
			&i.OrderID,
			&i.TotalPrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiscountUsers = `-- name: GetDiscountUsers :many
SELECT du.id, du.discount_id, du.user_id, u.fullname, u.username
FROM discount_users du
JOIN users u ON du.user_id = u.id
WHERE du.discount_id = $1
ORDER BY du.id
LIMIT $2
OFFSET $3
`

type GetDiscountUsersParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	Limit      int64     `json:"limit"`
	Offset     int64     `json:"offset"`
}

type GetDiscountUsersRow struct {
	ID         uuid.UUID `json:"id"`
	DiscountID uuid.UUID `json:"discountId"`
	UserID     uuid.UUID `json:"userId"`
	Fullname   string    `json:"fullname"`
	Username   string    `json:"username"`
}

func (q *Queries) GetDiscountUsers(ctx context.Context, arg GetDiscountUsersParams) ([]GetDiscountUsersRow, error) {
	rows, err := q.db.Query(ctx, getDiscountUsers, arg.DiscountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountUsersRow{}
	for rows.Next() {
		var i GetDiscountUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.DiscountID,
			&i.UserID,
			&i.Fullname,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiscounts = `-- name: GetDiscounts :many
SELECT id, code, "description", discount_type, discount_value,
    min_purchase_amount, max_discount_amount, 
    usage_limit, used_count, is_active, starts_at, expires_at
FROM discounts
WHERE 
    discount_type = COALESCE($3, discounts.discount_type)
    AND is_active = COALESCE($4, TRUE)
    AND starts_at >= COALESCE($5, discounts.starts_at)
    AND starts_at <= COALESCE($6, discounts.starts_at)
    AND code ILIKE '%' || COALESCE($7, discounts.code) || '%'
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetDiscountsParams struct {
	Limit        int64              `json:"limit"`
	Offset       int64              `json:"offset"`
	DiscountType *string            `json:"discountType"`
	IsActive     *bool              `json:"isActive"`
	FromDate     pgtype.Timestamptz `json:"fromDate"`
	ToDate       pgtype.Timestamptz `json:"toDate"`
	Search       *string            `json:"search"`
}

type GetDiscountsRow struct {
	ID                uuid.UUID      `json:"id"`
	Code              string         `json:"code"`
	Description       *string        `json:"description"`
	DiscountType      string         `json:"discountType"`
	DiscountValue     pgtype.Numeric `json:"discountValue"`
	MinPurchaseAmount pgtype.Numeric `json:"minPurchaseAmount"`
	MaxDiscountAmount pgtype.Numeric `json:"maxDiscountAmount"`
	UsageLimit        *int32         `json:"usageLimit"`
	UsedCount         int32          `json:"usedCount"`
	IsActive          bool           `json:"isActive"`
	StartsAt          time.Time      `json:"startsAt"`
	ExpiresAt         time.Time      `json:"expiresAt"`
}

func (q *Queries) GetDiscounts(ctx context.Context, arg GetDiscountsParams) ([]GetDiscountsRow, error) {
	rows, err := q.db.Query(ctx, getDiscounts,
		arg.Limit,
		arg.Offset,
		arg.DiscountType,
		arg.IsActive,
		arg.FromDate,
		arg.ToDate,
		arg.Search,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiscountsRow{}
	for rows.Next() {
		var i GetDiscountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Description,
			&i.DiscountType,
			&i.DiscountValue,
			&i.MinPurchaseAmount,
			&i.MaxDiscountAmount,
			&i.UsageLimit,
			&i.UsedCount,
			&i.IsActive,
			&i.StartsAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertBulkCategoryDiscountsParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	CategoryID uuid.UUID `json:"categoryId"`
}

type InsertBulkProductDiscountsParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	ProductID  uuid.UUID `json:"productId"`
}

type InsertBulkUserDiscountsParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	UserID     uuid.UUID `json:"userId"`
}

const insertDiscount = `-- name: InsertDiscount :one
INSERT INTO discounts 
    (code, description, discount_type, discount_value, min_purchase_amount, max_discount_amount, is_active, usage_limit, starts_at, expires_at)
VALUES 
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id
`

type InsertDiscountParams struct {
	Code              string             `json:"code"`
	Description       *string            `json:"description"`
	DiscountType      string             `json:"discountType"`
	DiscountValue     pgtype.Numeric     `json:"discountValue"`
	MinPurchaseAmount pgtype.Numeric     `json:"minPurchaseAmount"`
	MaxDiscountAmount pgtype.Numeric     `json:"maxDiscountAmount"`
	IsActive          bool               `json:"isActive"`
	UsageLimit        *int32             `json:"usageLimit"`
	StartsAt          pgtype.Timestamptz `json:"startsAt"`
	ExpiresAt         pgtype.Timestamptz `json:"expiresAt"`
}

func (q *Queries) InsertDiscount(ctx context.Context, arg InsertDiscountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscount,
		arg.Code,
		arg.Description,
		arg.DiscountType,
		arg.DiscountValue,
		arg.MinPurchaseAmount,
		arg.MaxDiscountAmount,
		arg.IsActive,
		arg.UsageLimit,
		arg.StartsAt,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertDiscountCategory = `-- name: InsertDiscountCategory :one
INSERT INTO discount_categories (discount_id, category_id)
VALUES ($1, $2)
RETURNING id
`

type InsertDiscountCategoryParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	CategoryID uuid.UUID `json:"categoryId"`
}

func (q *Queries) InsertDiscountCategory(ctx context.Context, arg InsertDiscountCategoryParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscountCategory, arg.DiscountID, arg.CategoryID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertDiscountProduct = `-- name: InsertDiscountProduct :one
INSERT INTO discount_products (discount_id, product_id)
VALUES ($1, $2)
RETURNING id
`

type InsertDiscountProductParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	ProductID  uuid.UUID `json:"productId"`
}

func (q *Queries) InsertDiscountProduct(ctx context.Context, arg InsertDiscountProductParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscountProduct, arg.DiscountID, arg.ProductID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertDiscountUser = `-- name: InsertDiscountUser :one
INSERT INTO discount_users (discount_id, user_id)
VALUES ($1, $2)
RETURNING id
`

type InsertDiscountUserParams struct {
	DiscountID uuid.UUID `json:"discountId"`
	UserID     uuid.UUID `json:"userId"`
}

func (q *Queries) InsertDiscountUser(ctx context.Context, arg InsertDiscountUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertDiscountUser, arg.DiscountID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertOrderDiscount = `-- name: InsertOrderDiscount :one
INSERT INTO order_discounts (order_id, discount_id, discount_amount)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertOrderDiscountParams struct {
	OrderID        uuid.UUID      `json:"orderId"`
	DiscountID     uuid.UUID      `json:"discountId"`
	DiscountAmount pgtype.Numeric `json:"discountAmount"`
}

func (q *Queries) InsertOrderDiscount(ctx context.Context, arg InsertOrderDiscountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertOrderDiscount, arg.OrderID, arg.DiscountID, arg.DiscountAmount)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateDiscount = `-- name: UpdateDiscount :one
UPDATE discounts
SET "description" = COALESCE($2, discounts.description),
    discount_type = COALESCE($3, discounts.discount_type),
    discount_value = COALESCE($4, discounts.discount_value),
    min_purchase_amount = COALESCE($5, discounts.min_purchase_amount),
    max_discount_amount = COALESCE($6, discounts.max_discount_amount),
    usage_limit = COALESCE($7, discounts.usage_limit),
    used_count = COALESCE($8, discounts.used_count),
    is_active = COALESCE($9, discounts.is_active),
    starts_at = COALESCE($10, discounts.starts_at),
    expires_at = COALESCE($11, discounts.expires_at)
WHERE id = $1
RETURNING id
`

type UpdateDiscountParams struct {
	ID                uuid.UUID          `json:"id"`
	Description       *string            `json:"description"`
	DiscountType      *string            `json:"discountType"`
	DiscountValue     pgtype.Numeric     `json:"discountValue"`
	MinPurchaseAmount pgtype.Numeric     `json:"minPurchaseAmount"`
	MaxDiscountAmount pgtype.Numeric     `json:"maxDiscountAmount"`
	UsageLimit        *int32             `json:"usageLimit"`
	UsedCount         *int32             `json:"usedCount"`
	IsActive          *bool              `json:"isActive"`
	StartsAt          pgtype.Timestamptz `json:"startsAt"`
	ExpiresAt         pgtype.Timestamptz `json:"expiresAt"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateDiscount,
		arg.ID,
		arg.Description,
		arg.DiscountType,
		arg.DiscountValue,
		arg.MinPurchaseAmount,
		arg.MaxDiscountAmount,
		arg.UsageLimit,
		arg.UsedCount,
		arg.IsActive,
		arg.StartsAt,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
