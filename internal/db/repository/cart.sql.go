// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkoutCart = `-- name: CheckoutCart :exec
UPDATE carts SET order_id = $1 WHERE id = $2 RETURNING id, user_id, session_id, order_id, updated_at, created_at
`

type CheckoutCartParams struct {
	OrderID pgtype.UUID `json:"orderId"`
	ID      uuid.UUID   `json:"id"`
}

func (q *Queries) CheckoutCart(ctx context.Context, arg CheckoutCartParams) error {
	_, err := q.db.Exec(ctx, checkoutCart, arg.OrderID, arg.ID)
	return err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items WHERE id = $1
`

func (q *Queries) ClearCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearCart, id)
	return err
}

const countCartItems = `-- name: CountCartItems :one
SELECT COUNT(*) FROM cart_items WHERE id = $1
`

func (q *Queries) CountCartItems(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItems, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (user_id, session_id) VALUES ($1, $2) RETURNING id, user_id, session_id, order_id, updated_at, created_at
`

type CreateCartParams struct {
	UserID    pgtype.UUID `json:"userId"`
	SessionID *string     `json:"sessionId"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.UserID, arg.SessionID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.OrderID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (id, cart_id, variant_id, quantity) VALUES ($1, $2, $3, $4) RETURNING id, cart_id, variant_id, quantity, added_at
`

type CreateCartItemParams struct {
	ID        uuid.UUID `json:"id"`
	CartID    uuid.UUID `json:"cartId"`
	VariantID uuid.UUID `json:"variantId"`
	Quantity  int16     `json:"quantity"`
}

// Cart Item Section
func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.ID,
		arg.CartID,
		arg.VariantID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getAvailableDiscountsForCart = `-- name: GetAvailableDiscountsForCart :many
SELECT d.id, d.code, d.description, d.discount_type, d.discount_value, d.starts_at, d.expires_at, dc.category_id, dp.product_id,
       SUM(CASE WHEN dp.product_id IS NOT NULL THEN 1 ELSE 0 END) AS product_count,
       SUM(CASE WHEN dc.category_id IS NOT NULL THEN 1 ELSE 0 END) AS category_count
FROM cart_items ci
JOIN product_variants pv ON ci.variant_id = pv.id
JOIN products p ON pv.product_id = p.id
LEFT JOIN discount_products dp ON p.id = dp.product_id
LEFT JOIN discount_categories dc ON p.category_id = dc.category_id
LEFT JOIN discounts d ON dp.discount_id = d.id OR dc.discount_id = d.id
WHERE ci.cart_id = $1
AND d.deleted_at IS NULL
AND (d.starts_at IS NULL OR d.starts_at <= NOW())
AND (d.expires_at IS NULL OR d.expires_at >= NOW())
GROUP BY d.id, p.id, dc.category_id, dp.product_id
HAVING COUNT(DISTINCT dp.product_id) > 0 OR COUNT(DISTINCT dc.category_id) > 0
ORDER BY d.starts_at DESC, d.expires_at DESC
`

type GetAvailableDiscountsForCartRow struct {
	ID            pgtype.UUID        `json:"id"`
	Code          *string            `json:"code"`
	Description   *string            `json:"description"`
	DiscountType  *string            `json:"discountType"`
	DiscountValue pgtype.Numeric     `json:"discountValue"`
	StartsAt      pgtype.Timestamptz `json:"startsAt"`
	ExpiresAt     pgtype.Timestamptz `json:"expiresAt"`
	CategoryID    pgtype.UUID        `json:"categoryId"`
	ProductID     pgtype.UUID        `json:"productId"`
	ProductCount  int64              `json:"productCount"`
	CategoryCount int64              `json:"categoryCount"`
}

func (q *Queries) GetAvailableDiscountsForCart(ctx context.Context, cartID uuid.UUID) ([]GetAvailableDiscountsForCartRow, error) {
	rows, err := q.db.Query(ctx, getAvailableDiscountsForCart, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAvailableDiscountsForCartRow{}
	for rows.Next() {
		var i GetAvailableDiscountsForCartRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Description,
			&i.DiscountType,
			&i.DiscountValue,
			&i.StartsAt,
			&i.ExpiresAt,
			&i.CategoryID,
			&i.ProductID,
			&i.ProductCount,
			&i.CategoryCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCart = `-- name: GetCart :one
SELECT id, user_id, session_id, order_id, updated_at, created_at
FROM carts
WHERE (
    (carts.user_id IS NOT NULL AND carts.user_id = $1) OR 
    (carts.session_id IS NOT NULL AND carts.session_id = $2)
) AND carts.order_id IS NULL
ORDER BY carts.updated_at DESC
LIMIT 1
`

type GetCartParams struct {
	UserID    pgtype.UUID `json:"userId"`
	SessionID *string     `json:"sessionId"`
}

func (q *Queries) GetCart(ctx context.Context, arg GetCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, getCart, arg.UserID, arg.SessionID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.OrderID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, cart_id, variant_id, quantity, added_at FROM cart_items WHERE id = $1 AND cart_id = $2
`

type GetCartItemParams struct {
	ID     uuid.UUID `json:"id"`
	CartID uuid.UUID `json:"cartId"`
}

func (q *Queries) GetCartItem(ctx context.Context, arg GetCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, arg.ID, arg.CartID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCartItemByProductVariantID = `-- name: GetCartItemByProductVariantID :one
SELECT id, cart_id, variant_id, quantity, added_at FROM cart_items WHERE variant_id = $1 AND cart_id = $2
`

type GetCartItemByProductVariantIDParams struct {
	VariantID uuid.UUID `json:"variantId"`
	CartID    uuid.UUID `json:"cartId"`
}

func (q *Queries) GetCartItemByProductVariantID(ctx context.Context, arg GetCartItemByProductVariantIDParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByProductVariantID, arg.VariantID, arg.CartID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Quantity,
		&i.AddedAt,
	)
	return i, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT
    ci.id, ci.cart_id, ci.variant_id, ci.quantity, ci.added_at, 
    pv.id AS variant_id, pv.price, pv.stock, pv.sku, pv.stock as stock_qty,
    p.id AS product_id, p.name AS product_name, p.category_id,
    ci.id as cart_item_id, ci.quantity,
    av.id as attr_val_id, av.code AS attr_val_code, av.name as attr_val_name, a.name AS attr_name, a.id AS attr_id,
    i.id AS image_id, i.url AS image_url
FROM cart_items AS ci
JOIN product_variants AS pv ON pv.id = ci.variant_id
JOIN products AS p ON p.id = pv.product_id
JOIN variant_attribute_values AS vav ON vav.variant_id = pv.id
JOIN attribute_values AS av ON vav.attribute_value_id = av.id
JOIN attributes AS a ON av.attribute_id = a.id
LEFT JOIN image_assignments AS ia ON ia.entity_id = pv.id AND ia.entity_type = 'variant'
LEFT JOIN images AS i ON i.id = ia.image_id
WHERE ci.cart_id = $1
ORDER BY ci.added_at, ci.id, pv.id DESC
`

type GetCartItemsRow struct {
	CartItem    CartItem       `json:"cartItem"`
	VariantID   uuid.UUID      `json:"variantId"`
	Price       pgtype.Numeric `json:"price"`
	Stock       int32          `json:"stock"`
	Sku         string         `json:"sku"`
	StockQty    int32          `json:"stockQty"`
	ProductID   uuid.UUID      `json:"productId"`
	ProductName string         `json:"productName"`
	CategoryID  pgtype.UUID    `json:"categoryId"`
	CartItemID  uuid.UUID      `json:"cartItemId"`
	Quantity    int16          `json:"quantity"`
	AttrValID   uuid.UUID      `json:"attrValId"`
	AttrValCode string         `json:"attrValCode"`
	AttrValName string         `json:"attrValName"`
	AttrName    string         `json:"attrName"`
	AttrID      uuid.UUID      `json:"attrId"`
	ImageID     pgtype.UUID    `json:"imageId"`
	ImageUrl    *string        `json:"imageUrl"`
}

func (q *Queries) GetCartItems(ctx context.Context, cartID uuid.UUID) ([]GetCartItemsRow, error) {
	rows, err := q.db.Query(ctx, getCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsRow{}
	for rows.Next() {
		var i GetCartItemsRow
		if err := rows.Scan(
			&i.CartItem.ID,
			&i.CartItem.CartID,
			&i.CartItem.VariantID,
			&i.CartItem.Quantity,
			&i.CartItem.AddedAt,
			&i.VariantID,
			&i.Price,
			&i.Stock,
			&i.Sku,
			&i.StockQty,
			&i.ProductID,
			&i.ProductName,
			&i.CategoryID,
			&i.CartItemID,
			&i.Quantity,
			&i.AttrValID,
			&i.AttrValCode,
			&i.AttrValName,
			&i.AttrName,
			&i.AttrID,
			&i.ImageID,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartItemsForOrder = `-- name: GetCartItemsForOrder :many
SELECT 
    ci.id, ci.cart_id, ci.variant_id, ci.quantity, ci.added_at, 
    pv.id AS variant_id, pv.price, pv.stock, pv.sku, pv.stock as stock_qty,
    p.name AS product_name, p.id AS product_id, p.category_id,
    av.code AS attr_val_code, av.name as attr_val_name, a.name AS attr_name
FROM cart_items AS ci
JOIN product_variants AS pv ON pv.id = ci.variant_id
JOIN products AS p ON p.id = pv.product_id
JOIN variant_attribute_values AS vav ON vav.variant_id = pv.id
JOIN attribute_values AS av ON vav.attribute_value_id = av.id
JOIN attributes AS a ON av.attribute_id = a.id
WHERE ci.cart_id = $1
ORDER BY ci.added_at, ci.id, pv.id DESC
`

type GetCartItemsForOrderRow struct {
	CartItem    CartItem       `json:"cartItem"`
	VariantID   uuid.UUID      `json:"variantId"`
	Price       pgtype.Numeric `json:"price"`
	Stock       int32          `json:"stock"`
	Sku         string         `json:"sku"`
	StockQty    int32          `json:"stockQty"`
	ProductName string         `json:"productName"`
	ProductID   uuid.UUID      `json:"productId"`
	CategoryID  pgtype.UUID    `json:"categoryId"`
	AttrValCode string         `json:"attrValCode"`
	AttrValName string         `json:"attrValName"`
	AttrName    string         `json:"attrName"`
}

func (q *Queries) GetCartItemsForOrder(ctx context.Context, cartID uuid.UUID) ([]GetCartItemsForOrderRow, error) {
	rows, err := q.db.Query(ctx, getCartItemsForOrder, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsForOrderRow{}
	for rows.Next() {
		var i GetCartItemsForOrderRow
		if err := rows.Scan(
			&i.CartItem.ID,
			&i.CartItem.CartID,
			&i.CartItem.VariantID,
			&i.CartItem.Quantity,
			&i.CartItem.AddedAt,
			&i.VariantID,
			&i.Price,
			&i.Stock,
			&i.Sku,
			&i.StockQty,
			&i.ProductName,
			&i.ProductID,
			&i.CategoryID,
			&i.AttrValCode,
			&i.AttrValName,
			&i.AttrName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromCart = `-- name: RemoveProductFromCart :exec
DELETE FROM cart_items WHERE cart_id = $1 AND id = $2
`

type RemoveProductFromCartParams struct {
	CartID uuid.UUID `json:"cartId"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) RemoveProductFromCart(ctx context.Context, arg RemoveProductFromCartParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCart, arg.CartID, arg.ID)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items SET quantity = $1 WHERE id = $2 RETURNING id, cart_id, variant_id, quantity, added_at
`

type UpdateCartItemQuantityParams struct {
	Quantity int16     `json:"quantity"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.Quantity, arg.ID)
	return err
}

const updateCartTimestamp = `-- name: UpdateCartTimestamp :exec
UPDATE carts SET updated_at = NOW() WHERE id = $1 RETURNING id, user_id, session_id, order_id, updated_at, created_at
`

func (q *Queries) UpdateCartTimestamp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateCartTimestamp, id)
	return err
}
