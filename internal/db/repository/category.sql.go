// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: category.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCategories = `-- name: CountCategories :one
SELECT count(*) FROM categories
`

func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories
    (name, slug, description, image_url, image_id)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING id, name, description, image_url, image_id, published, remarkable, slug, display_order, created_at, updated_at
`

type CreateCategoryParams struct {
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
	Description *string `json:"description"`
	ImageUrl    *string `json:"image_url"`
	ImageID     *string `json:"image_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ImageUrl,
		arg.ImageID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.ImageID,
		&i.Published,
		&i.Remarkable,
		&i.Slug,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, name, description, image_url, image_id, published, remarkable, slug, display_order, created_at, updated_at FROM categories
WHERE
    published = COALESCE($3, true)
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetCategoriesParams struct {
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
	Published *bool `json:"published"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategories, arg.Limit, arg.Offset, arg.Published)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.ImageID,
			&i.Published,
			&i.Remarkable,
			&i.Slug,
			&i.DisplayOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT c.id, c.name, c.description, c.image_url, c.image_id, c.published, c.remarkable, c.slug, c.display_order, c.created_at, c.updated_at
FROM categories c
WHERE c.id = $1
LIMIT 1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.ImageID,
		&i.Published,
		&i.Remarkable,
		&i.Slug,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
SELECT c.id, c.name, c.description, c.image_url, c.image_id, c.published, c.remarkable, c.slug, c.display_order, c.created_at, c.updated_at
FROM categories c
WHERE c.slug = $1
LIMIT 1
`

func (q *Queries) GetCategoryBySlug(ctx context.Context, slug string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryBySlug, slug)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.ImageID,
		&i.Published,
		&i.Remarkable,
		&i.Slug,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryProductsByID = `-- name: GetCategoryProductsByID :many
SELECT
    c.id, c.name, c.description, c.image_url, c.image_id, c.published, c.remarkable, c.slug, c.display_order, c.created_at, c.updated_at,
    p.id, p.name as product_name, p.description as product_description
FROM
    categories c
LEFT JOIN
    products p ON c.id = p.id
LEFT JOIN
    image_assignments ia ON ia.entity_id = p.id AND ia.entity_type = 'product'
LEFT JOIN
    images i ON i.id = ia.image_id
WHERE
    c.id = $1
`

type GetCategoryProductsByIDRow struct {
	Category           Category    `json:"category"`
	ID                 pgtype.UUID `json:"id"`
	ProductName        *string     `json:"product_name"`
	ProductDescription *string     `json:"product_description"`
}

func (q *Queries) GetCategoryProductsByID(ctx context.Context, id uuid.UUID) ([]GetCategoryProductsByIDRow, error) {
	rows, err := q.db.Query(ctx, getCategoryProductsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategoryProductsByIDRow{}
	for rows.Next() {
		var i GetCategoryProductsByIDRow
		if err := rows.Scan(
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.Description,
			&i.Category.ImageUrl,
			&i.Category.ImageID,
			&i.Category.Published,
			&i.Category.Remarkable,
			&i.Category.Slug,
			&i.Category.DisplayOrder,
			&i.Category.CreatedAt,
			&i.Category.UpdatedAt,
			&i.ID,
			&i.ProductName,
			&i.ProductDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type SeedCategoriesParams struct {
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
	Description *string `json:"description"`
	ImageUrl    *string `json:"image_url"`
	ImageID     *string `json:"image_id"`
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE
    categories
SET
    name = COALESCE($2, name), 
    slug = COALESCE($3, slug),
    description = COALESCE($4, description),
    image_id = COALESCE($5, image_id),
    image_url = COALESCE($6, image_url), 
    remarkable = COALESCE($7, remarkable),
    published = COALESCE($8, published),
    updated_at = now()
WHERE
    id = $1
RETURNING id, name, description, image_url, image_id, published, remarkable, slug, display_order, created_at, updated_at
`

type UpdateCategoryParams struct {
	ID          uuid.UUID `json:"id"`
	Name        *string   `json:"name"`
	Slug        *string   `json:"slug"`
	Description *string   `json:"description"`
	ImageID     *string   `json:"image_id"`
	ImageUrl    *string   `json:"image_url"`
	Remarkable  *bool     `json:"remarkable"`
	Published   *bool     `json:"published"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ImageID,
		arg.ImageUrl,
		arg.Remarkable,
		arg.Published,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.ImageID,
		&i.Published,
		&i.Remarkable,
		&i.Slug,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
