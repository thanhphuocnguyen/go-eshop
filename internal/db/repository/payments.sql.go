// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO
    payments (
        order_id,
        amount,
        method,
        gateway,
        status,
        payment_intent_id,
        charge_id
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7
    )
RETURNING id, order_id, amount, status, method, gateway, refund_id, payment_intent_id, charge_id, error_code, error_message, created_at, updated_at
`

type CreatePaymentParams struct {
	OrderID         uuid.UUID      `json:"orderId"`
	Amount          pgtype.Numeric `json:"amount"`
	Method          PaymentMethod  `json:"method"`
	Gateway         *string        `json:"gateway"`
	Status          PaymentStatus  `json:"status"`
	PaymentIntentID *string        `json:"paymentIntentId"`
	ChargeID        *string        `json:"chargeId"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.Amount,
		arg.Method,
		arg.Gateway,
		arg.Status,
		arg.PaymentIntentID,
		arg.ChargeID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Status,
		&i.Method,
		&i.Gateway,
		&i.RefundID,
		&i.PaymentIntentID,
		&i.ChargeID,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPaymentTransaction = `-- name: CreatePaymentTransaction :one
INSERT INTO
    payment_transactions (
        payment_id,
        amount,
        status,
        gateway_transaction_id,
        gateway_response_code,
        gateway_response_message
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
RETURNING id, payment_id, amount, status, gateway_transaction_id, gateway_response_code, gateway_response_message, transaction_date, created_at
`

type CreatePaymentTransactionParams struct {
	PaymentID              uuid.UUID      `json:"paymentId"`
	Amount                 pgtype.Numeric `json:"amount"`
	Status                 PaymentStatus  `json:"status"`
	GatewayTransactionID   *string        `json:"gatewayTransactionId"`
	GatewayResponseCode    *string        `json:"gatewayResponseCode"`
	GatewayResponseMessage *string        `json:"gatewayResponseMessage"`
}

// Payment Transactions --
func (q *Queries) CreatePaymentTransaction(ctx context.Context, arg CreatePaymentTransactionParams) (PaymentTransaction, error) {
	row := q.db.QueryRow(ctx, createPaymentTransaction,
		arg.PaymentID,
		arg.Amount,
		arg.Status,
		arg.GatewayTransactionID,
		arg.GatewayResponseCode,
		arg.GatewayResponseMessage,
	)
	var i PaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Amount,
		&i.Status,
		&i.GatewayTransactionID,
		&i.GatewayResponseCode,
		&i.GatewayResponseMessage,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM
    payments
WHERE
    id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const deletePaymentTransaction = `-- name: DeletePaymentTransaction :exec
DELETE FROM
    payment_transactions
WHERE
    id = $1
`

func (q *Queries) DeletePaymentTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePaymentTransaction, id)
	return err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT
    id, order_id, amount, status, method, gateway, refund_id, payment_intent_id, charge_id, error_code, error_message, created_at, updated_at
FROM
    payments
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Status,
		&i.Method,
		&i.Gateway,
		&i.RefundID,
		&i.PaymentIntentID,
		&i.ChargeID,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT
    id, order_id, amount, status, method, gateway, refund_id, payment_intent_id, charge_id, error_code, error_message, created_at, updated_at
FROM
    payments
WHERE
    order_id = $1
LIMIT 1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Status,
		&i.Method,
		&i.Gateway,
		&i.RefundID,
		&i.PaymentIntentID,
		&i.ChargeID,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByPaymentIntentID = `-- name: GetPaymentByPaymentIntentID :one
SELECT
    id, order_id, amount, status, method, gateway, refund_id, payment_intent_id, charge_id, error_code, error_message, created_at, updated_at
FROM
    payments
WHERE
    payment_intent_id = $1
LIMIT 1
`

func (q *Queries) GetPaymentByPaymentIntentID(ctx context.Context, paymentIntentID *string) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByPaymentIntentID, paymentIntentID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Status,
		&i.Method,
		&i.Gateway,
		&i.RefundID,
		&i.PaymentIntentID,
		&i.ChargeID,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentTransactionByID = `-- name: GetPaymentTransactionByID :one
SELECT
    id, payment_id, amount, status, gateway_transaction_id, gateway_response_code, gateway_response_message, transaction_date, created_at
FROM
    payment_transactions
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetPaymentTransactionByID(ctx context.Context, id uuid.UUID) (PaymentTransaction, error) {
	row := q.db.QueryRow(ctx, getPaymentTransactionByID, id)
	var i PaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Amount,
		&i.Status,
		&i.GatewayTransactionID,
		&i.GatewayResponseCode,
		&i.GatewayResponseMessage,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentTransactionByPaymentID = `-- name: GetPaymentTransactionByPaymentID :one
SELECT
    id, payment_id, amount, status, gateway_transaction_id, gateway_response_code, gateway_response_message, transaction_date, created_at
FROM
    payment_transactions
WHERE
    payment_id = $1
LIMIT 1
`

func (q *Queries) GetPaymentTransactionByPaymentID(ctx context.Context, paymentID uuid.UUID) (PaymentTransaction, error) {
	row := q.db.QueryRow(ctx, getPaymentTransactionByPaymentID, paymentID)
	var i PaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.Amount,
		&i.Status,
		&i.GatewayTransactionID,
		&i.GatewayResponseCode,
		&i.GatewayResponseMessage,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE
    payments
SET
    amount = COALESCE($2, amount),
    method = COALESCE($3, method),
    refund_id = COALESCE($4, refund_id),
    status = COALESCE($5, status),
    gateway = COALESCE($6, gateway),
    payment_intent_id = COALESCE($7, payment_intent_id),
    charge_id = COALESCE($8, charge_id),
    error_code = COALESCE($9, error_code),
    error_message = COALESCE($10, error_message),
    updated_at = NOW()
WHERE
    id = $1
`

type UpdatePaymentParams struct {
	ID              uuid.UUID         `json:"id"`
	Amount          pgtype.Numeric    `json:"amount"`
	Method          NullPaymentMethod `json:"method"`
	RefundID        *string           `json:"refundId"`
	Status          NullPaymentStatus `json:"status"`
	Gateway         *string           `json:"gateway"`
	PaymentIntentID *string           `json:"paymentIntentId"`
	ChargeID        *string           `json:"chargeId"`
	ErrorCode       *string           `json:"errorCode"`
	ErrorMessage    *string           `json:"errorMessage"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.Exec(ctx, updatePayment,
		arg.ID,
		arg.Amount,
		arg.Method,
		arg.RefundID,
		arg.Status,
		arg.Gateway,
		arg.PaymentIntentID,
		arg.ChargeID,
		arg.ErrorCode,
		arg.ErrorMessage,
	)
	return err
}

const updatePaymentTransaction = `-- name: UpdatePaymentTransaction :exec
UPDATE
    payment_transactions
SET
    amount = COALESCE($2, amount),
    status = COALESCE($3, status),
    gateway_transaction_id = COALESCE($4, gateway_transaction_id),
    gateway_response_code = COALESCE($5, gateway_response_code),
    gateway_response_message = COALESCE($6, gateway_response_message)
WHERE
    id = $1
`

type UpdatePaymentTransactionParams struct {
	ID                     uuid.UUID         `json:"id"`
	Amount                 pgtype.Numeric    `json:"amount"`
	Status                 NullPaymentStatus `json:"status"`
	GatewayTransactionID   *string           `json:"gatewayTransactionId"`
	GatewayResponseCode    *string           `json:"gatewayResponseCode"`
	GatewayResponseMessage *string           `json:"gatewayResponseMessage"`
}

func (q *Queries) UpdatePaymentTransaction(ctx context.Context, arg UpdatePaymentTransactionParams) error {
	_, err := q.db.Exec(ctx, updatePaymentTransaction,
		arg.ID,
		arg.Amount,
		arg.Status,
		arg.GatewayTransactionID,
		arg.GatewayResponseCode,
		arg.GatewayResponseMessage,
	)
	return err
}
