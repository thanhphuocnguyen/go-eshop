// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AddBulkProductsParams struct {
	CategoryID   pgtype.UUID `json:"category_id"`
	CollectionID pgtype.UUID `json:"collection_id"`
	BrandID      pgtype.UUID `json:"brand_id"`
	Name         string      `json:"name"`
	Description  string      `json:"description"`
}

const archiveProduct = `-- name: ArchiveProduct :exec
UPDATE
    products
SET
    is_active = $1,
    updated_at = NOW()
WHERE
    id = $2
`

type ArchiveProductParams struct {
	IsActive *bool     `json:"is_active"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) ArchiveProduct(ctx context.Context, arg ArchiveProductParams) error {
	_, err := q.db.Exec(ctx, archiveProduct, arg.IsActive, arg.ID)
	return err
}

const archiveProductVariant = `-- name: ArchiveProductVariant :exec
UPDATE
    product_variants
SET
    is_active = $1,
    updated_at = NOW()
WHERE
    id = $2
`

type ArchiveProductVariantParams struct {
	IsActive *bool     `json:"is_active"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) ArchiveProductVariant(ctx context.Context, arg ArchiveProductVariantParams) error {
	_, err := q.db.Exec(ctx, archiveProductVariant, arg.IsActive, arg.ID)
	return err
}

const countProducts = `-- name: CountProducts :one
SELECT
    COUNT(*)
FROM
    products
WHERE
    is_active = COALESCE($1, is_active) AND
    name ILIKE COALESCE($2, name)
    AND category_id = COALESCE($3, category_id)
    AND collection_id = COALESCE($4, collection_id)
    AND brand_id = COALESCE($5, brand_id)
`

type CountProductsParams struct {
	IsActive     *bool       `json:"is_active"`
	Name         *string     `json:"name"`
	CategoryID   pgtype.UUID `json:"category_id"`
	CollectionID pgtype.UUID `json:"collection_id"`
	BrandID      pgtype.UUID `json:"brand_id"`
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts,
		arg.IsActive,
		arg.Name,
		arg.CategoryID,
		arg.CollectionID,
		arg.BrandID,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

type CreateBulkProductVariantsParams struct {
	ProductID uuid.UUID      `json:"product_id"`
	Sku       string         `json:"sku"`
	Price     pgtype.Numeric `json:"price"`
	Stock     int32          `json:"stock"`
	Weight    pgtype.Numeric `json:"weight"`
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products 
    (name, description, short_description, base_price, base_sku, slug, attributes, brand_id, collection_id, category_id) 
VALUES 
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, description, short_description, attributes, base_price, base_sku, slug, is_active, category_id, collection_id, brand_id, created_at, updated_at, avg_rating, rating_count, one_star_count, two_star_count, three_star_count, four_star_count, five_star_count
`

type CreateProductParams struct {
	Name             string         `json:"name"`
	Description      string         `json:"description"`
	ShortDescription *string        `json:"short_description"`
	BasePrice        pgtype.Numeric `json:"base_price"`
	BaseSku          string         `json:"base_sku"`
	Slug             string         `json:"slug"`
	Attributes       []uuid.UUID    `json:"attributes"`
	BrandID          pgtype.UUID    `json:"brand_id"`
	CollectionID     pgtype.UUID    `json:"collection_id"`
	CategoryID       pgtype.UUID    `json:"category_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.ShortDescription,
		arg.BasePrice,
		arg.BaseSku,
		arg.Slug,
		arg.Attributes,
		arg.BrandID,
		arg.CollectionID,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ShortDescription,
		&i.Attributes,
		&i.BasePrice,
		&i.BaseSku,
		&i.Slug,
		&i.IsActive,
		&i.CategoryID,
		&i.CollectionID,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvgRating,
		&i.RatingCount,
		&i.OneStarCount,
		&i.TwoStarCount,
		&i.ThreeStarCount,
		&i.FourStarCount,
		&i.FiveStarCount,
	)
	return i, err
}

const createProductVariant = `-- name: CreateProductVariant :one
INSERT INTO product_variants
    (product_id, description, sku, price, stock, weight)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING id, product_id, description, sku, price, stock, weight, is_active, created_at, updated_at
`

type CreateProductVariantParams struct {
	ProductID   uuid.UUID      `json:"product_id"`
	Description *string        `json:"description"`
	Sku         string         `json:"sku"`
	Price       pgtype.Numeric `json:"price"`
	Stock       int32          `json:"stock"`
	Weight      pgtype.Numeric `json:"weight"`
}

func (q *Queries) CreateProductVariant(ctx context.Context, arg CreateProductVariantParams) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, createProductVariant,
		arg.ProductID,
		arg.Description,
		arg.Sku,
		arg.Price,
		arg.Stock,
		arg.Weight,
	)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Stock,
		&i.Weight,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM
    products
WHERE
    id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const deleteProductVariant = `-- name: DeleteProductVariant :exec
DELETE FROM
    product_variants
WHERE
    id = $1
`

func (q *Queries) DeleteProductVariant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductVariant, id)
	return err
}

const getLinkedProductsByCategory = `-- name: GetLinkedProductsByCategory :many
SELECT
    p.id, p.name, p.short_description, first_img.id AS img_id, first_img.url AS img_url, COUNT(v.id) AS variant_count
FROM
    products AS p
LEFT JOIN product_variants as v ON p.id = v.product_id
LEFT JOIN LATERAL (
    SELECT img.id, img.url
    FROM image_assignments as ia
    JOIN images as img ON img.id = ia.image_id
    WHERE ia.entity_id = p.id AND ia.entity_type = 'product'
    ORDER BY ia.display_order ASC, ia.id ASC
    LIMIT 1
) AS first_img ON true
WHERE
    p.collection_id = COALESCE($1, p.collection_id) AND
    p.category_id = COALESCE($4, p.category_id) AND
    p.brand_id = COALESCE($5, p.brand_id)
GROUP BY
    p.id, first_img.id, first_img.url
ORDER BY
    p.id
LIMIT
    $2
OFFSET
    $3
`

type GetLinkedProductsByCategoryParams struct {
	CollectionID pgtype.UUID `json:"collection_id"`
	Limit        int64       `json:"limit"`
	Offset       int64       `json:"offset"`
	CategoryID   pgtype.UUID `json:"category_id"`
	BrandID      pgtype.UUID `json:"brand_id"`
}

type GetLinkedProductsByCategoryRow struct {
	ID               uuid.UUID `json:"id"`
	Name             string    `json:"name"`
	ShortDescription *string   `json:"short_description"`
	ImgID            uuid.UUID `json:"img_id"`
	ImgUrl           string    `json:"img_url"`
	VariantCount     int64     `json:"variant_count"`
}

func (q *Queries) GetLinkedProductsByCategory(ctx context.Context, arg GetLinkedProductsByCategoryParams) ([]GetLinkedProductsByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getLinkedProductsByCategory,
		arg.CollectionID,
		arg.Limit,
		arg.Offset,
		arg.CategoryID,
		arg.BrandID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLinkedProductsByCategoryRow{}
	for rows.Next() {
		var i GetLinkedProductsByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortDescription,
			&i.ImgID,
			&i.ImgUrl,
			&i.VariantCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT
    products.id, products.name, products.description, products.short_description, products.attributes, products.base_price, products.base_sku, products.slug, products.is_active, products.category_id, products.collection_id, products.brand_id, products.created_at, products.updated_at, products.avg_rating, products.rating_count, products.one_star_count, products.two_star_count, products.three_star_count, products.four_star_count, products.five_star_count
FROM
    products
WHERE
    products.id = $1 AND
    is_active = COALESCE($2, TRUE)
GROUP BY
    products.id
`

type GetProductByIDParams struct {
	ID       uuid.UUID `json:"id"`
	IsActive *bool     `json:"is_active"`
}

func (q *Queries) GetProductByID(ctx context.Context, arg GetProductByIDParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, arg.ID, arg.IsActive)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ShortDescription,
		&i.Attributes,
		&i.BasePrice,
		&i.BaseSku,
		&i.Slug,
		&i.IsActive,
		&i.CategoryID,
		&i.CollectionID,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvgRating,
		&i.RatingCount,
		&i.OneStarCount,
		&i.TwoStarCount,
		&i.ThreeStarCount,
		&i.FourStarCount,
		&i.FiveStarCount,
	)
	return i, err
}

const getProductBySlug = `-- name: GetProductBySlug :one
SELECT
    products.id, products.name, products.description, products.short_description, products.attributes, products.base_price, products.base_sku, products.slug, products.is_active, products.category_id, products.collection_id, products.brand_id, products.created_at, products.updated_at, products.avg_rating, products.rating_count, products.one_star_count, products.two_star_count, products.three_star_count, products.four_star_count, products.five_star_count
FROM    
    products
WHERE
    products.slug = $1 AND
    is_active = COALESCE($2, TRUE)
`

type GetProductBySlugParams struct {
	Slug     string `json:"slug"`
	IsActive *bool  `json:"is_active"`
}

func (q *Queries) GetProductBySlug(ctx context.Context, arg GetProductBySlugParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProductBySlug, arg.Slug, arg.IsActive)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ShortDescription,
		&i.Attributes,
		&i.BasePrice,
		&i.BaseSku,
		&i.Slug,
		&i.IsActive,
		&i.CategoryID,
		&i.CollectionID,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvgRating,
		&i.RatingCount,
		&i.OneStarCount,
		&i.TwoStarCount,
		&i.ThreeStarCount,
		&i.FourStarCount,
		&i.FiveStarCount,
	)
	return i, err
}

const getProductDetail = `-- name: GetProductDetail :many
SELECT
    p.id as product_id, p.name, p.description, p.base_price,
    p.base_sku, p.slug, p.updated_at, p.created_at, p.is_active,
    p.short_description, p.attributes,
    p.rating_count, p.one_star_count, p.two_star_count,
    p.three_star_count, p.four_star_count, p.five_star_count,
    c.id AS category_id, c.name AS category_name,
    cl.id AS collection_id, cl.name AS collection_name,
    b.id AS brand_id, b.name AS brand_name
FROM
    products p
LEFT JOIN categories as c ON p.category_id = c.id
LEFT JOIN brands AS b ON p.brand_id = b.id
LEFT JOIN collections as cl ON p.collection_id = cl.id
WHERE
    (p.id = $1 OR p.slug = $2) AND
    p.is_active = COALESCE($3, TRUE)
ORDER BY
    p.id
`

type GetProductDetailParams struct {
	ID       uuid.UUID `json:"id"`
	Slug     string    `json:"slug"`
	IsActive *bool     `json:"is_active"`
}

type GetProductDetailRow struct {
	ProductID        uuid.UUID      `json:"product_id"`
	Name             string         `json:"name"`
	Description      string         `json:"description"`
	BasePrice        pgtype.Numeric `json:"base_price"`
	BaseSku          string         `json:"base_sku"`
	Slug             string         `json:"slug"`
	UpdatedAt        time.Time      `json:"updated_at"`
	CreatedAt        time.Time      `json:"created_at"`
	IsActive         *bool          `json:"is_active"`
	ShortDescription *string        `json:"short_description"`
	Attributes       []uuid.UUID    `json:"attributes"`
	RatingCount      int32          `json:"rating_count"`
	OneStarCount     int32          `json:"one_star_count"`
	TwoStarCount     int32          `json:"two_star_count"`
	ThreeStarCount   int32          `json:"three_star_count"`
	FourStarCount    int32          `json:"four_star_count"`
	FiveStarCount    int32          `json:"five_star_count"`
	CategoryID       pgtype.UUID    `json:"category_id"`
	CategoryName     *string        `json:"category_name"`
	CollectionID     pgtype.UUID    `json:"collection_id"`
	CollectionName   *string        `json:"collection_name"`
	BrandID          pgtype.UUID    `json:"brand_id"`
	BrandName        *string        `json:"brand_name"`
}

func (q *Queries) GetProductDetail(ctx context.Context, arg GetProductDetailParams) ([]GetProductDetailRow, error) {
	rows, err := q.db.Query(ctx, getProductDetail, arg.ID, arg.Slug, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductDetailRow{}
	for rows.Next() {
		var i GetProductDetailRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.BasePrice,
			&i.BaseSku,
			&i.Slug,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.IsActive,
			&i.ShortDescription,
			&i.Attributes,
			&i.RatingCount,
			&i.OneStarCount,
			&i.TwoStarCount,
			&i.ThreeStarCount,
			&i.FourStarCount,
			&i.FiveStarCount,
			&i.CategoryID,
			&i.CategoryName,
			&i.CollectionID,
			&i.CollectionName,
			&i.BrandID,
			&i.BrandName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductVariantByID = `-- name: GetProductVariantByID :one
SELECT
    product_variants.id, product_variants.product_id, product_variants.description, product_variants.sku, product_variants.price, product_variants.stock, product_variants.weight, product_variants.is_active, product_variants.created_at, product_variants.updated_at
FROM
    product_variants
WHERE
    id = $1
`

func (q *Queries) GetProductVariantByID(ctx context.Context, id uuid.UUID) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, getProductVariantByID, id)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Stock,
		&i.Weight,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductVariants = `-- name: GetProductVariants :many
SELECT
    v.id, v.product_id, v.description, v.sku, v.price, v.stock, v.weight, v.is_active, v.created_at, v.updated_at,
    a.id as attr_id, a.name as attr_name,
    av.id as attr_val_id, av.code as attr_val_code, av.display_order as attr_display_order, 
    av.is_active as attr_val_is_active, av.name as attr_val_name
FROM
    product_variants AS v
JOIN variant_attribute_values as vav ON v.id = vav.variant_id
JOIN attribute_values as av ON vav.attribute_value_id = av.id
JOIN attributes as a ON av.attribute_id = a.id
WHERE
    v.product_id = $1 AND
    v.is_active = COALESCE($2, TRUE)
ORDER BY
    a.id, av.display_order, v.created_at DESC
`

type GetProductVariantsParams struct {
	ProductID uuid.UUID `json:"product_id"`
	IsActive  *bool     `json:"is_active"`
}

type GetProductVariantsRow struct {
	ID               uuid.UUID      `json:"id"`
	ProductID        uuid.UUID      `json:"product_id"`
	Description      *string        `json:"description"`
	Sku              string         `json:"sku"`
	Price            pgtype.Numeric `json:"price"`
	Stock            int32          `json:"stock"`
	Weight           pgtype.Numeric `json:"weight"`
	IsActive         *bool          `json:"is_active"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
	AttrID           uuid.UUID      `json:"attr_id"`
	AttrName         string         `json:"attr_name"`
	AttrValID        uuid.UUID      `json:"attr_val_id"`
	AttrValCode      string         `json:"attr_val_code"`
	AttrDisplayOrder int16          `json:"attr_display_order"`
	AttrValIsActive  *bool          `json:"attr_val_is_active"`
	AttrValName      string         `json:"attr_val_name"`
}

func (q *Queries) GetProductVariants(ctx context.Context, arg GetProductVariantsParams) ([]GetProductVariantsRow, error) {
	rows, err := q.db.Query(ctx, getProductVariants, arg.ProductID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductVariantsRow{}
	for rows.Next() {
		var i GetProductVariantsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Description,
			&i.Sku,
			&i.Price,
			&i.Stock,
			&i.Weight,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AttrID,
			&i.AttrName,
			&i.AttrValID,
			&i.AttrValCode,
			&i.AttrDisplayOrder,
			&i.AttrValIsActive,
			&i.AttrValName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProducts = `-- name: GetProducts :many
SELECT
    p.id, p.name, p.description, p.short_description, p.attributes, p.base_price, p.base_sku, p.slug, p.is_active, p.category_id, p.collection_id, p.brand_id, p.created_at, p.updated_at, p.avg_rating, p.rating_count, p.one_star_count, p.two_star_count, p.three_star_count, p.four_star_count, p.five_star_count,
    first_img.id AS img_id, first_img.url AS img_url,
    COUNT(v.id) AS variant_count, MIN(v.price)::DECIMAL AS min_price, MAX(v.price)::DECIMAL AS max_price
FROM products as p
LEFT JOIN product_variants as v ON p.id = v.product_id
LEFT JOIN LATERAL (
    SELECT img.id, img.url
    FROM image_assignments as ia
    LEFT JOIN images as img ON img.id = ia.image_id
    WHERE ia.entity_id = p.id AND ia.entity_type = 'product'
    ORDER BY ia.display_order ASC, ia.id ASC
    LIMIT 1
) AS first_img ON true
WHERE
    p.is_active = COALESCE($3, p.is_active) 
    AND (p.name ILIKE COALESCE($4, p.name) OR p.base_sku ILIKE COALESCE($4, p.base_sku) OR p.description ILIKE COALESCE($4, p.description))
    AND p.category_id = COALESCE($5, p.category_id)
    AND p.collection_id = COALESCE($6, p.collection_id)
    AND p.brand_id = COALESCE($7, p.brand_id)
    AND p.slug ILIKE COALESCE($8, p.slug)
GROUP BY
    p.id, first_img.id, first_img.url
ORDER BY
    $9::text
LIMIT $1 OFFSET $2
`

type GetProductsParams struct {
	Limit        int64       `json:"limit"`
	Offset       int64       `json:"offset"`
	IsActive     *bool       `json:"is_active"`
	Search       *string     `json:"search"`
	CategoryID   pgtype.UUID `json:"category_id"`
	CollectionID pgtype.UUID `json:"collection_id"`
	BrandID      pgtype.UUID `json:"brand_id"`
	Slug         *string     `json:"slug"`
	Orderby      string      `json:"orderby"`
}

type GetProductsRow struct {
	ID               uuid.UUID      `json:"id"`
	Name             string         `json:"name"`
	Description      string         `json:"description"`
	ShortDescription *string        `json:"short_description"`
	Attributes       []uuid.UUID    `json:"attributes"`
	BasePrice        pgtype.Numeric `json:"base_price"`
	BaseSku          string         `json:"base_sku"`
	Slug             string         `json:"slug"`
	IsActive         *bool          `json:"is_active"`
	CategoryID       pgtype.UUID    `json:"category_id"`
	CollectionID     pgtype.UUID    `json:"collection_id"`
	BrandID          pgtype.UUID    `json:"brand_id"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
	AvgRating        pgtype.Numeric `json:"avg_rating"`
	RatingCount      int32          `json:"rating_count"`
	OneStarCount     int32          `json:"one_star_count"`
	TwoStarCount     int32          `json:"two_star_count"`
	ThreeStarCount   int32          `json:"three_star_count"`
	FourStarCount    int32          `json:"four_star_count"`
	FiveStarCount    int32          `json:"five_star_count"`
	ImgID            pgtype.UUID    `json:"img_id"`
	ImgUrl           *string        `json:"img_url"`
	VariantCount     int64          `json:"variant_count"`
	MinPrice         pgtype.Numeric `json:"min_price"`
	MaxPrice         pgtype.Numeric `json:"max_price"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts,
		arg.Limit,
		arg.Offset,
		arg.IsActive,
		arg.Search,
		arg.CategoryID,
		arg.CollectionID,
		arg.BrandID,
		arg.Slug,
		arg.Orderby,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsRow{}
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ShortDescription,
			&i.Attributes,
			&i.BasePrice,
			&i.BaseSku,
			&i.Slug,
			&i.IsActive,
			&i.CategoryID,
			&i.CollectionID,
			&i.BrandID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AvgRating,
			&i.RatingCount,
			&i.OneStarCount,
			&i.TwoStarCount,
			&i.ThreeStarCount,
			&i.FourStarCount,
			&i.FiveStarCount,
			&i.ImgID,
			&i.ImgUrl,
			&i.VariantCount,
			&i.MinPrice,
			&i.MaxPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE
    products
SET
    name = coalesce($1, name),
    description = coalesce($2, description),
    short_description = coalesce($3, short_description),
    brand_id = coalesce($4, brand_id),
    attributes = coalesce($5, attributes),
    collection_id = coalesce($6, collection_id),
    category_id = coalesce($7, category_id),
    slug = coalesce($8, slug),
    base_price = coalesce($9, base_price),
    base_sku = coalesce($10, base_sku),
    is_active = coalesce($11, is_active),
    updated_at = NOW()
WHERE
    id = $12
RETURNING id, name, description, short_description, attributes, base_price, base_sku, slug, is_active, category_id, collection_id, brand_id, created_at, updated_at, avg_rating, rating_count, one_star_count, two_star_count, three_star_count, four_star_count, five_star_count
`

type UpdateProductParams struct {
	Name             *string        `json:"name"`
	Description      *string        `json:"description"`
	ShortDescription *string        `json:"short_description"`
	BrandID          pgtype.UUID    `json:"brand_id"`
	Attributes       []uuid.UUID    `json:"attributes"`
	CollectionID     pgtype.UUID    `json:"collection_id"`
	CategoryID       pgtype.UUID    `json:"category_id"`
	Slug             *string        `json:"slug"`
	BasePrice        pgtype.Numeric `json:"base_price"`
	BaseSku          *string        `json:"base_sku"`
	IsActive         *bool          `json:"is_active"`
	ID               uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.ShortDescription,
		arg.BrandID,
		arg.Attributes,
		arg.CollectionID,
		arg.CategoryID,
		arg.Slug,
		arg.BasePrice,
		arg.BaseSku,
		arg.IsActive,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ShortDescription,
		&i.Attributes,
		&i.BasePrice,
		&i.BaseSku,
		&i.Slug,
		&i.IsActive,
		&i.CategoryID,
		&i.CollectionID,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvgRating,
		&i.RatingCount,
		&i.OneStarCount,
		&i.TwoStarCount,
		&i.ThreeStarCount,
		&i.FourStarCount,
		&i.FiveStarCount,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE
    product_variants
SET
    stock = stock - $1
WHERE
    id = $2
RETURNING id, product_id, description, sku, price, stock, weight, is_active, created_at, updated_at
`

type UpdateProductStockParams struct {
	Stock int32     `json:"stock"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, updateProductStock, arg.Stock, arg.ID)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Stock,
		&i.Weight,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductVariant = `-- name: UpdateProductVariant :one
UPDATE
    product_variants
SET
    sku = coalesce($1, sku),
    price = coalesce($2, price),
    stock = coalesce($3, stock),
    weight = coalesce($4, weight),
    is_active = coalesce($5, is_active),
    updated_at = NOW()
WHERE
    id = $6
RETURNING id, product_id, description, sku, price, stock, weight, is_active, created_at, updated_at
`

type UpdateProductVariantParams struct {
	Sku      *string        `json:"sku"`
	Price    pgtype.Numeric `json:"price"`
	Stock    *int32         `json:"stock"`
	Weight   pgtype.Numeric `json:"weight"`
	IsActive *bool          `json:"is_active"`
	ID       uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateProductVariant(ctx context.Context, arg UpdateProductVariantParams) (ProductVariant, error) {
	row := q.db.QueryRow(ctx, updateProductVariant,
		arg.Sku,
		arg.Price,
		arg.Stock,
		arg.Weight,
		arg.IsActive,
		arg.ID,
	)
	var i ProductVariant
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Description,
		&i.Sku,
		&i.Price,
		&i.Stock,
		&i.Weight,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
