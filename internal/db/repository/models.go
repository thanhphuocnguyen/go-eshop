// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CardType string

const (
	CardTypeDebit  CardType = "debit"
	CardTypeCredit CardType = "credit"
)

func (e *CardType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardType(s)
	case string:
		*e = CardType(s)
	default:
		return fmt.Errorf("unsupported scan type for CardType: %T", src)
	}
	return nil
}

type NullCardType struct {
	CardType CardType `json:"cardType"`
	Valid    bool     `json:"valid"` // Valid is true if CardType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardType) Scan(value interface{}) error {
	if value == nil {
		ns.CardType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardType), nil
}

type CartStatus string

const (
	CartStatusActive     CartStatus = "active"
	CartStatusCheckedOut CartStatus = "checked_out"
)

func (e *CartStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CartStatus(s)
	case string:
		*e = CartStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CartStatus: %T", src)
	}
	return nil
}

type NullCartStatus struct {
	CartStatus CartStatus `json:"cartStatus"`
	Valid      bool       `json:"valid"` // Valid is true if CartStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCartStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CartStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CartStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCartStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CartStatus), nil
}

type EntityType string

const (
	EntityTypeProduct        EntityType = "product"
	EntityTypeProductVariant EntityType = "product_variant"
	EntityTypeCategory       EntityType = "category"
	EntityTypeBrand          EntityType = "brand"
	EntityTypeUser           EntityType = "user"
	EntityTypeOrder          EntityType = "order"
	EntityTypeCart           EntityType = "cart"
	EntityTypePayment        EntityType = "payment"
)

func (e *EntityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntityType(s)
	case string:
		*e = EntityType(s)
	default:
		return fmt.Errorf("unsupported scan type for EntityType: %T", src)
	}
	return nil
}

type NullEntityType struct {
	EntityType EntityType `json:"entityType"`
	Valid      bool       `json:"valid"` // Valid is true if EntityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntityType) Scan(value interface{}) error {
	if value == nil {
		ns.EntityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntityType), nil
}

type ImageRole string

const (
	ImageRoleGallery    ImageRole = "gallery"
	ImageRoleThumbnail  ImageRole = "thumbnail"
	ImageRoleBanner     ImageRole = "banner"
	ImageRoleAvatar     ImageRole = "avatar"
	ImageRoleCover      ImageRole = "cover"
	ImageRoleLogo       ImageRole = "logo"
	ImageRoleIcon       ImageRole = "icon"
	ImageRoleBackground ImageRole = "background"
)

func (e *ImageRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageRole(s)
	case string:
		*e = ImageRole(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageRole: %T", src)
	}
	return nil
}

type NullImageRole struct {
	ImageRole ImageRole `json:"imageRole"`
	Valid     bool      `json:"valid"` // Valid is true if ImageRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageRole) Scan(value interface{}) error {
	if value == nil {
		ns.ImageRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageRole), nil
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "pending"
	OrderStatusConfirmed  OrderStatus = "confirmed"
	OrderStatusDelivering OrderStatus = "delivering"
	OrderStatusDelivered  OrderStatus = "delivered"
	OrderStatusCancelled  OrderStatus = "cancelled"
	OrderStatusRefunded   OrderStatus = "refunded"
	OrderStatusCompleted  OrderStatus = "completed"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"orderStatus"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type PaymentGateway string

const (
	PaymentGatewayStripe     PaymentGateway = "stripe"
	PaymentGatewayPaypal     PaymentGateway = "paypal"
	PaymentGatewayVisa       PaymentGateway = "visa"
	PaymentGatewayMastercard PaymentGateway = "mastercard"
	PaymentGatewayApplePay   PaymentGateway = "apple_pay"
	PaymentGatewayPostpaid   PaymentGateway = "postpaid"
	PaymentGatewayMomo       PaymentGateway = "momo"
	PaymentGatewayZaloPay    PaymentGateway = "zalo_pay"
	PaymentGatewayVnPay      PaymentGateway = "vn_pay"
)

func (e *PaymentGateway) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentGateway(s)
	case string:
		*e = PaymentGateway(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentGateway: %T", src)
	}
	return nil
}

type NullPaymentGateway struct {
	PaymentGateway PaymentGateway `json:"paymentGateway"`
	Valid          bool           `json:"valid"` // Valid is true if PaymentGateway is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentGateway) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentGateway, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentGateway.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentGateway) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentGateway), nil
}

type PaymentMethod string

const (
	PaymentMethodCreditCard   PaymentMethod = "credit_card"
	PaymentMethodPaypal       PaymentMethod = "paypal"
	PaymentMethodStripe       PaymentMethod = "stripe"
	PaymentMethodApplePay     PaymentMethod = "apple_pay"
	PaymentMethodBankTransfer PaymentMethod = "bank_transfer"
	PaymentMethodCod          PaymentMethod = "cod"
)

func (e *PaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethod(s)
	case string:
		*e = PaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentMethod struct {
	PaymentMethod PaymentMethod `json:"paymentMethod"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethod), nil
}

type PaymentStatus string

const (
	PaymentStatusPending    PaymentStatus = "pending"
	PaymentStatusSuccess    PaymentStatus = "success"
	PaymentStatusFailed     PaymentStatus = "failed"
	PaymentStatusCancelled  PaymentStatus = "cancelled"
	PaymentStatusRefunded   PaymentStatus = "refunded"
	PaymentStatusProcessing PaymentStatus = "processing"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"paymentStatus"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "admin"
	UserRoleUser      UserRole = "user"
	UserRoleModerator UserRole = "moderator"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"userRole"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Attribute struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

type AttributeValue struct {
	ID           uuid.UUID `json:"id"`
	AttributeID  uuid.UUID `json:"attributeId"`
	Name         string    `json:"name"`
	Code         string    `json:"code"`
	IsActive     *bool     `json:"isActive"`
	DisplayOrder int16     `json:"displayOrder"`
	CreatedAt    time.Time `json:"createdAt"`
}

type Brand struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	ImageUrl     *string   `json:"imageUrl"`
	ImageID      *string   `json:"imageId"`
	Description  *string   `json:"description"`
	Slug         string    `json:"slug"`
	Remarkable   *bool     `json:"remarkable"`
	DisplayOrder *int32    `json:"displayOrder"`
	Published    bool      `json:"published"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
}

type Cart struct {
	ID        uuid.UUID   `json:"id"`
	UserID    pgtype.UUID `json:"userId"`
	SessionID *string     `json:"sessionId"`
	OrderID   pgtype.UUID `json:"orderId"`
	UpdatedAt time.Time   `json:"updatedAt"`
	CreatedAt time.Time   `json:"createdAt"`
}

type CartItem struct {
	ID        uuid.UUID `json:"id"`
	CartID    uuid.UUID `json:"cartId"`
	VariantID uuid.UUID `json:"variantId"`
	Quantity  int16     `json:"quantity"`
	AddedAt   time.Time `json:"addedAt"`
}

type Category struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Description  *string   `json:"description"`
	ImageUrl     *string   `json:"imageUrl"`
	ImageID      *string   `json:"imageId"`
	Published    bool      `json:"published"`
	Remarkable   *bool     `json:"remarkable"`
	Slug         string    `json:"slug"`
	DisplayOrder *int32    `json:"displayOrder"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
}

type Collection struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	ImageUrl     *string   `json:"imageUrl"`
	ImageID      *string   `json:"imageId"`
	Description  *string   `json:"description"`
	Slug         string    `json:"slug"`
	Remarkable   *bool     `json:"remarkable"`
	DisplayOrder *int32    `json:"displayOrder"`
	Published    bool      `json:"published"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
}

type Discount struct {
	ID                uuid.UUID          `json:"id"`
	Code              string             `json:"code"`
	Description       *string            `json:"description"`
	DiscountType      string             `json:"discountType"`
	DiscountValue     pgtype.Numeric     `json:"discountValue"`
	MinPurchaseAmount pgtype.Numeric     `json:"minPurchaseAmount"`
	MaxDiscountAmount pgtype.Numeric     `json:"maxDiscountAmount"`
	UsageLimit        *int32             `json:"usageLimit"`
	UsedCount         int32              `json:"usedCount"`
	IsActive          bool               `json:"isActive"`
	StartsAt          time.Time          `json:"startsAt"`
	ExpiresAt         time.Time          `json:"expiresAt"`
	CreatedAt         time.Time          `json:"createdAt"`
	UpdatedAt         time.Time          `json:"updatedAt"`
	DeletedAt         pgtype.Timestamptz `json:"deletedAt"`
}

type DiscountCategory struct {
	ID         uuid.UUID          `json:"id"`
	DiscountID uuid.UUID          `json:"discountId"`
	CategoryID uuid.UUID          `json:"categoryId"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
}

type DiscountProduct struct {
	ID         uuid.UUID          `json:"id"`
	DiscountID uuid.UUID          `json:"discountId"`
	ProductID  uuid.UUID          `json:"productId"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
}

type DiscountUser struct {
	ID         uuid.UUID          `json:"id"`
	DiscountID uuid.UUID          `json:"discountId"`
	UserID     uuid.UUID          `json:"userId"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt"`
}

type FeaturedProduct struct {
	ID         uuid.UUID   `json:"id"`
	FeaturedID pgtype.UUID `json:"featuredId"`
	ProductID  pgtype.UUID `json:"productId"`
	SortOrder  int16       `json:"sortOrder"`
}

type FeaturedSection struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	ImageUrl    *string   `json:"imageUrl"`
	ImageID     *string   `json:"imageId"`
	Description *string   `json:"description"`
	Remarkable  *bool     `json:"remarkable"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type Image struct {
	ID         uuid.UUID `json:"id"`
	ExternalID string    `json:"externalId"`
	Url        string    `json:"url"`
	AltText    *string   `json:"altText"`
	Caption    *string   `json:"caption"`
	MimeType   *string   `json:"mimeType"`
	FileSize   *int64    `json:"fileSize"`
	Width      *int32    `json:"width"`
	Height     *int32    `json:"height"`
	UploadedAt time.Time `json:"uploadedAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
}

type ImageAssignment struct {
	ID           uuid.UUID `json:"id"`
	ImageID      uuid.UUID `json:"imageId"`
	EntityID     uuid.UUID `json:"entityId"`
	EntityType   string    `json:"entityType"`
	DisplayOrder int16     `json:"displayOrder"`
	Role         string    `json:"role"`
	CreatedAt    time.Time `json:"createdAt"`
}

type Order struct {
	ID                    uuid.UUID               `json:"id"`
	CustomerID            uuid.UUID               `json:"customerId"`
	CustomerEmail         string                  `json:"customerEmail"`
	CustomerName          string                  `json:"customerName"`
	CustomerPhone         string                  `json:"customerPhone"`
	ShippingAddress       ShippingAddressSnapshot `json:"shippingAddress"`
	TotalPrice            pgtype.Numeric          `json:"totalPrice"`
	Status                OrderStatus             `json:"status"`
	ConfirmedAt           pgtype.Timestamptz      `json:"confirmedAt"`
	DeliveredAt           pgtype.Timestamptz      `json:"deliveredAt"`
	CancelledAt           pgtype.Timestamptz      `json:"cancelledAt"`
	ShippingMethod        *string                 `json:"shippingMethod"`
	RefundedAt            pgtype.Timestamptz      `json:"refundedAt"`
	OrderDate             time.Time               `json:"orderDate"`
	UpdatedAt             time.Time               `json:"updatedAt"`
	CreatedAt             time.Time               `json:"createdAt"`
	ShippingMethodID      pgtype.UUID             `json:"shippingMethodId"`
	ShippingRateID        pgtype.UUID             `json:"shippingRateId"`
	ShippingCost          pgtype.Numeric          `json:"shippingCost"`
	EstimatedDeliveryDate pgtype.Timestamptz      `json:"estimatedDeliveryDate"`
	TrackingNumber        *string                 `json:"trackingNumber"`
	TrackingUrl           *string                 `json:"trackingUrl"`
	ShippingProvider      *string                 `json:"shippingProvider"`
	ShippingNotes         *string                 `json:"shippingNotes"`
}

type OrderDiscount struct {
	ID             uuid.UUID          `json:"id"`
	OrderID        uuid.UUID          `json:"orderId"`
	DiscountID     uuid.UUID          `json:"discountId"`
	DiscountAmount pgtype.Numeric     `json:"discountAmount"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
}

type OrderItem struct {
	ID                   uuid.UUID               `json:"id"`
	OrderID              uuid.UUID               `json:"orderId"`
	VariantID            uuid.UUID               `json:"variantId"`
	Quantity             int16                   `json:"quantity"`
	PricePerUnitSnapshot pgtype.Numeric          `json:"pricePerUnitSnapshot"`
	LineTotalSnapshot    pgtype.Numeric          `json:"lineTotalSnapshot"`
	ProductNameSnapshot  string                  `json:"productNameSnapshot"`
	VariantSkuSnapshot   string                  `json:"variantSkuSnapshot"`
	AttributesSnapshot   []AttributeDataSnapshot `json:"attributesSnapshot"`
	CreatedAt            time.Time               `json:"createdAt"`
	UpdatedAt            time.Time               `json:"updatedAt"`
	DiscountedPrice      pgtype.Numeric          `json:"discountedPrice"`
}

type Payment struct {
	ID                     uuid.UUID          `json:"id"`
	OrderID                uuid.UUID          `json:"orderId"`
	Amount                 pgtype.Numeric     `json:"amount"`
	Status                 PaymentStatus      `json:"status"`
	PaymentMethod          PaymentMethod      `json:"paymentMethod"`
	PaymentGateway         NullPaymentGateway `json:"paymentGateway"`
	RefundID               *string            `json:"refundId"`
	GatewayPaymentIntentID *string            `json:"gatewayPaymentIntentId"`
	GatewayChargeID        *string            `json:"gatewayChargeId"`
	ErrorCode              *string            `json:"errorCode"`
	ErrorMessage           *string            `json:"errorMessage"`
	CreatedAt              pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt              pgtype.Timestamptz `json:"updatedAt"`
}

type PaymentTransaction struct {
	ID                     uuid.UUID          `json:"id"`
	PaymentID              uuid.UUID          `json:"paymentId"`
	Amount                 pgtype.Numeric     `json:"amount"`
	Status                 PaymentStatus      `json:"status"`
	GatewayTransactionID   *string            `json:"gatewayTransactionId"`
	GatewayResponseCode    *string            `json:"gatewayResponseCode"`
	GatewayResponseMessage *string            `json:"gatewayResponseMessage"`
	TransactionDate        pgtype.Timestamptz `json:"transactionDate"`
	CreatedAt              pgtype.Timestamptz `json:"createdAt"`
}

type Product struct {
	ID               uuid.UUID      `json:"id"`
	Name             string         `json:"name"`
	Description      string         `json:"description"`
	ShortDescription *string        `json:"shortDescription"`
	Attributes       []uuid.UUID    `json:"attributes"`
	BasePrice        pgtype.Numeric `json:"basePrice"`
	BaseSku          string         `json:"baseSku"`
	Slug             string         `json:"slug"`
	IsActive         *bool          `json:"isActive"`
	CategoryID       pgtype.UUID    `json:"categoryId"`
	CollectionID     pgtype.UUID    `json:"collectionId"`
	BrandID          pgtype.UUID    `json:"brandId"`
	CreatedAt        time.Time      `json:"createdAt"`
	UpdatedAt        time.Time      `json:"updatedAt"`
	AvgRating        pgtype.Numeric `json:"avgRating"`
	RatingCount      int32          `json:"ratingCount"`
	OneStarCount     int32          `json:"oneStarCount"`
	TwoStarCount     int32          `json:"twoStarCount"`
	ThreeStarCount   int32          `json:"threeStarCount"`
	FourStarCount    int32          `json:"fourStarCount"`
	FiveStarCount    int32          `json:"fiveStarCount"`
}

type ProductRating struct {
	ID               uuid.UUID      `json:"id"`
	ProductID        uuid.UUID      `json:"productId"`
	UserID           uuid.UUID      `json:"userId"`
	OrderItemID      pgtype.UUID    `json:"orderItemId"`
	Rating           pgtype.Numeric `json:"rating"`
	ReviewTitle      *string        `json:"reviewTitle"`
	ReviewContent    *string        `json:"reviewContent"`
	VerifiedPurchase bool           `json:"verifiedPurchase"`
	IsVisible        bool           `json:"isVisible"`
	IsApproved       bool           `json:"isApproved"`
	HelpfulVotes     int32          `json:"helpfulVotes"`
	UnhelpfulVotes   int32          `json:"unhelpfulVotes"`
	CreatedAt        time.Time      `json:"createdAt"`
	UpdatedAt        time.Time      `json:"updatedAt"`
}

type ProductVariant struct {
	ID          uuid.UUID      `json:"id"`
	ProductID   uuid.UUID      `json:"productId"`
	Description *string        `json:"description"`
	Sku         string         `json:"sku"`
	Price       pgtype.Numeric `json:"price"`
	Stock       int32          `json:"stock"`
	Weight      pgtype.Numeric `json:"weight"`
	IsActive    *bool          `json:"isActive"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
}

type RatingReply struct {
	ID        uuid.UUID `json:"id"`
	RatingID  uuid.UUID `json:"ratingId"`
	ReplyBy   uuid.UUID `json:"replyBy"`
	Content   string    `json:"content"`
	IsVisible bool      `json:"isVisible"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type RatingVote struct {
	ID        uuid.UUID `json:"id"`
	RatingID  uuid.UUID `json:"ratingId"`
	UserID    uuid.UUID `json:"userId"`
	IsHelpful bool      `json:"isHelpful"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"userId"`
	RefreshToken string    `json:"refreshToken"`
	UserAgent    string    `json:"userAgent"`
	ClientIp     string    `json:"clientIp"`
	Blocked      bool      `json:"blocked"`
	ExpiredAt    time.Time `json:"expiredAt"`
	CreatedAt    time.Time `json:"createdAt"`
}

type Shipment struct {
	ID               uuid.UUID          `json:"id"`
	OrderID          uuid.UUID          `json:"orderId"`
	Status           string             `json:"status"`
	ShippedAt        pgtype.Timestamptz `json:"shippedAt"`
	DeliveredAt      pgtype.Timestamptz `json:"deliveredAt"`
	TrackingNumber   *string            `json:"trackingNumber"`
	TrackingUrl      *string            `json:"trackingUrl"`
	ShippingProvider *string            `json:"shippingProvider"`
	ShippingNotes    *string            `json:"shippingNotes"`
	CreatedAt        time.Time          `json:"createdAt"`
	UpdatedAt        time.Time          `json:"updatedAt"`
}

type ShipmentItem struct {
	ID          uuid.UUID `json:"id"`
	ShipmentID  uuid.UUID `json:"shipmentId"`
	OrderItemID uuid.UUID `json:"orderItemId"`
	Quantity    int32     `json:"quantity"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type ShippingMethod struct {
	ID                    uuid.UUID `json:"id"`
	Name                  string    `json:"name"`
	Description           *string   `json:"description"`
	IsActive              bool      `json:"isActive"`
	RequiresAddress       bool      `json:"requiresAddress"`
	EstimatedDeliveryTime *string   `json:"estimatedDeliveryTime"`
	IconUrl               *string   `json:"iconUrl"`
	CreatedAt             time.Time `json:"createdAt"`
	UpdatedAt             time.Time `json:"updatedAt"`
}

type ShippingRate struct {
	ID                    uuid.UUID      `json:"id"`
	ShippingMethodID      uuid.UUID      `json:"shippingMethodId"`
	ShippingZoneID        uuid.UUID      `json:"shippingZoneId"`
	Name                  string         `json:"name"`
	BaseRate              pgtype.Numeric `json:"baseRate"`
	MinOrderAmount        pgtype.Numeric `json:"minOrderAmount"`
	MaxOrderAmount        pgtype.Numeric `json:"maxOrderAmount"`
	FreeShippingThreshold pgtype.Numeric `json:"freeShippingThreshold"`
	IsActive              bool           `json:"isActive"`
	CreatedAt             time.Time      `json:"createdAt"`
	UpdatedAt             time.Time      `json:"updatedAt"`
}

type ShippingRateCondition struct {
	ID             uuid.UUID      `json:"id"`
	ShippingRateID uuid.UUID      `json:"shippingRateId"`
	ConditionType  string         `json:"conditionType"`
	MinValue       pgtype.Numeric `json:"minValue"`
	MaxValue       pgtype.Numeric `json:"maxValue"`
	AdditionalFee  pgtype.Numeric `json:"additionalFee"`
	CategoryIds    []uuid.UUID    `json:"categoryIds"`
	CreatedAt      time.Time      `json:"createdAt"`
	UpdatedAt      time.Time      `json:"updatedAt"`
}

type ShippingZone struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	Countries   []string  `json:"countries"`
	States      []string  `json:"states"`
	ZipCodes    []string  `json:"zipCodes"`
	IsActive    bool      `json:"isActive"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type User struct {
	ID                uuid.UUID   `json:"id"`
	Role              UserRole    `json:"role"`
	Username          string      `json:"username"`
	Email             string      `json:"email"`
	Phone             string      `json:"phone"`
	Fullname          string      `json:"fullname"`
	HashedPassword    string      `json:"hashedPassword"`
	VerifiedEmail     bool        `json:"verifiedEmail"`
	VerifiedPhone     bool        `json:"verifiedPhone"`
	PasswordChangedAt time.Time   `json:"passwordChangedAt"`
	UpdatedAt         time.Time   `json:"updatedAt"`
	CreatedAt         time.Time   `json:"createdAt"`
	Locked            bool        `json:"locked"`
	AvatarUrl         *string     `json:"avatarUrl"`
	AvatarImageID     pgtype.UUID `json:"avatarImageId"`
}

type UserAddress struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"userId"`
	Phone     string    `json:"phone"`
	Street    string    `json:"street"`
	Ward      *string   `json:"ward"`
	District  string    `json:"district"`
	City      string    `json:"city"`
	Default   bool      `json:"default"`
	Deleted   bool      `json:"deleted"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type UserPaymentInfo struct {
	ID             uuid.UUID          `json:"id"`
	UserID         pgtype.UUID        `json:"userId"`
	CardNumber     string             `json:"cardNumber"`
	CardholderName string             `json:"cardholderName"`
	ExpirationDate pgtype.Date        `json:"expirationDate"`
	BillingAddress string             `json:"billingAddress"`
	Default        *bool              `json:"default"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt      pgtype.Timestamptz `json:"updatedAt"`
}

type VariantAttributeValue struct {
	VariantID        uuid.UUID `json:"variantId"`
	AttributeValueID uuid.UUID `json:"attributeValueId"`
}

type VerifyEmail struct {
	ID         uuid.UUID `json:"id"`
	UserID     uuid.UUID `json:"userId"`
	Email      string    `json:"email"`
	VerifyCode string    `json:"verifyCode"`
	IsUsed     bool      `json:"isUsed"`
	CreatedAt  time.Time `json:"createdAt"`
	ExpiredAt  time.Time `json:"expiredAt"`
}
