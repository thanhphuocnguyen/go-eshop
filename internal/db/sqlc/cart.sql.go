// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProductToCart = `-- name: AddProductToCart :one
INSERT INTO cart_items(cart_id, product_id, quantity) VALUES ($1, $2, $3) RETURNING id, product_id, cart_id, quantity, created_at
`

type AddProductToCartParams struct {
	CartID    int64 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int16 `json:"quantity"`
}

func (q *Queries) AddProductToCart(ctx context.Context, arg AddProductToCartParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, addProductToCart, arg.CartID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CartID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO 
    carts (user_id) 
VALUES 
    ($1) 
RETURNING id, checked_out_at, user_id, updated_at, created_at
`

func (q *Queries) CreateCart(ctx context.Context, userID int64) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.CheckedOutAt,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCartByID = `-- name: GetCartByID :one
SELECT c.id, c.user_id, ci.quantity, p.id as product_id, p.name, p.description, p.price, p.image_url
FROM carts AS c
INNER JOIN cart_items AS ci ON carts.id = cart_items.cart_id
INNER JOIN products AS p ON cart_items.product_id = products.id
WHERE c.id = $1
LIMIT 1
`

type GetCartByIDRow struct {
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
	Quantity    int16          `json:"quantity"`
	ProductID   int64          `json:"product_id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Price       pgtype.Numeric `json:"price"`
	ImageUrl    pgtype.Text    `json:"image_url"`
}

func (q *Queries) GetCartByID(ctx context.Context, id int64) (GetCartByIDRow, error) {
	row := q.db.QueryRow(ctx, getCartByID, id)
	var i GetCartByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Quantity,
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.ImageUrl,
	)
	return i, err
}

const removeProductFromCart = `-- name: RemoveProductFromCart :exec
DELETE FROM cart_items WHERE cart_id = $1 AND product_id = $2
`

type RemoveProductFromCartParams struct {
	CartID    int64 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) RemoveProductFromCart(ctx context.Context, arg RemoveProductFromCartParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCart, arg.CartID, arg.ProductID)
	return err
}
