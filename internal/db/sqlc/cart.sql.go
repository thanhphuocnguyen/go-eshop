// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package sqlc

import (
	"context"
)

const addProductToCart = `-- name: AddProductToCart :one
INSERT INTO cart_items(cart_id, product_id, quantity) VALUES ($1, $2, $3) RETURNING id, product_id, cart_id, quantity, created_at
`

type AddProductToCartParams struct {
	CartID    int32 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int16 `json:"quantity"`
}

func (q *Queries) AddProductToCart(ctx context.Context, arg AddProductToCartParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, addProductToCart, arg.CartID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CartID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO 
    carts (user_id) 
VALUES 
    ($1) 
RETURNING id, user_id, updated_at, created_at
`

func (q *Queries) CreateCart(ctx context.Context, userID int64) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCart = `-- name: GetCart :one
SELECT id, user_id, updated_at, created_at FROM carts WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetCart(ctx context.Context, userID int64) (Cart, error) {
	row := q.db.QueryRow(ctx, getCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const removeProductFromCart = `-- name: RemoveProductFromCart :exec
DELETE FROM cart_items WHERE cart_id = $1 AND id = $2
`

type RemoveProductFromCartParams struct {
	CartID int32 `json:"cart_id"`
	ID     int32 `json:"id"`
}

func (q *Queries) RemoveProductFromCart(ctx context.Context, arg RemoveProductFromCartParams) error {
	_, err := q.db.Exec(ctx, removeProductFromCart, arg.CartID, arg.ID)
	return err
}

const updateCart = `-- name: UpdateCart :exec
UPDATE carts SET updated_at = NOW() WHERE id = $1 RETURNING id, user_id, updated_at, created_at
`

func (q *Queries) UpdateCart(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateCart, id)
	return err
}
