// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart_item.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProductToCart = `-- name: AddProductToCart :one
INSERT INTO cart_items 
    (cart_id, product_id, quantity) 
VALUES 
    ($1, $2, $3) 
RETURNING id, product_id, cart_id, quantity, created_at
`

type AddProductToCartParams struct {
	CartID    int32 `json:"cart_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int16 `json:"quantity"`
}

func (q *Queries) AddProductToCart(ctx context.Context, arg AddProductToCartParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, addProductToCart, arg.CartID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CartID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items WHERE cart_id = $1
`

func (q *Queries) ClearCart(ctx context.Context, cartID int32) error {
	_, err := q.db.Exec(ctx, clearCart, cartID)
	return err
}

const countCartItem = `-- name: CountCartItem :one
SELECT COUNT(*) FROM cart_items WHERE cart_id = $1
`

func (q *Queries) CountCartItem(ctx context.Context, cartID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItem, cartID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, product_id, cart_id, quantity, created_at FROM cart_items WHERE id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, id int32) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CartID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getCartItemByProductID = `-- name: GetCartItemByProductID :one
SELECT id, product_id, cart_id, quantity, created_at FROM cart_items WHERE product_id = $1
`

func (q *Queries) GetCartItemByProductID(ctx context.Context, productID int64) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByProductID, productID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CartID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getCartItemWithProduct = `-- name: GetCartItemWithProduct :one
SELECT cart_items.id, cart_items.product_id, cart_items.cart_id, cart_items.quantity, cart_items.created_at, p.name AS product_name, p.price AS product_price, p.stock AS product_stock, img.image_url AS image_url
FROM cart_items
JOIN products AS p ON cart_items.product_id = p.id
LEFT JOIN images as img ON p.id = img.product_id AND img.is_primary = true
WHERE cart_items.id = $1
`

type GetCartItemWithProductRow struct {
	ID           int32          `json:"id"`
	ProductID    int64          `json:"product_id"`
	CartID       int32          `json:"cart_id"`
	Quantity     int16          `json:"quantity"`
	CreatedAt    time.Time      `json:"created_at"`
	ProductName  string         `json:"product_name"`
	ProductPrice pgtype.Numeric `json:"product_price"`
	ProductStock int32          `json:"product_stock"`
	ImageUrl     pgtype.Text    `json:"image_url"`
}

func (q *Queries) GetCartItemWithProduct(ctx context.Context, id int32) (GetCartItemWithProductRow, error) {
	row := q.db.QueryRow(ctx, getCartItemWithProduct, id)
	var i GetCartItemWithProductRow
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CartID,
		&i.Quantity,
		&i.CreatedAt,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductStock,
		&i.ImageUrl,
	)
	return i, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT cart_items.id, cart_items.product_id, cart_items.cart_id, cart_items.quantity, cart_items.created_at, p.name AS product_name, p.price AS product_price, p.stock AS product_stock, img.image_url AS image_url
FROM cart_items
JOIN products AS p ON cart_items.product_id = p.id
LEFT JOIN images as img ON p.id = img.product_id AND img.is_primary = true
WHERE cart_id = $1
`

type GetCartItemsRow struct {
	ID           int32          `json:"id"`
	ProductID    int64          `json:"product_id"`
	CartID       int32          `json:"cart_id"`
	Quantity     int16          `json:"quantity"`
	CreatedAt    time.Time      `json:"created_at"`
	ProductName  string         `json:"product_name"`
	ProductPrice pgtype.Numeric `json:"product_price"`
	ProductStock int32          `json:"product_stock"`
	ImageUrl     pgtype.Text    `json:"image_url"`
}

func (q *Queries) GetCartItems(ctx context.Context, cartID int32) ([]GetCartItemsRow, error) {
	rows, err := q.db.Query(ctx, getCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartItemsRow
	for rows.Next() {
		var i GetCartItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.CartID,
			&i.Quantity,
			&i.CreatedAt,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductStock,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items SET quantity = $1 WHERE id = $2 RETURNING id, product_id, cart_id, quantity, created_at
`

type UpdateCartItemQuantityParams struct {
	Quantity int16 `json:"quantity"`
	ID       int32 `json:"id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.Quantity, arg.ID)
	return err
}
