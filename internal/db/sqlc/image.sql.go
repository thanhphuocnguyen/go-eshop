// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: image.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (product_id, variant_id, image_url, cloudinary_id) VALUES ($1, $2, $3, $4) RETURNING image_id, product_id, variant_id, image_url, cloudinary_id, is_primary, created_at, updated_at
`

type CreateImageParams struct {
	ProductID    pgtype.Int8 `json:"product_id"`
	VariantID    pgtype.Int8 `json:"variant_id"`
	ImageUrl     string      `json:"image_url"`
	CloudinaryID pgtype.Text `json:"cloudinary_id"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.ProductID,
		arg.VariantID,
		arg.ImageUrl,
		arg.CloudinaryID,
	)
	var i Image
	err := row.Scan(
		&i.ImageID,
		&i.ProductID,
		&i.VariantID,
		&i.ImageUrl,
		&i.CloudinaryID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE image_id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, imageID int32) error {
	_, err := q.db.Exec(ctx, deleteImage, imageID)
	return err
}

const getImageByID = `-- name: GetImageByID :one
SELECT image_id, product_id, variant_id, image_url, cloudinary_id, is_primary, created_at, updated_at FROM images WHERE image_id = $1 LIMIT 1
`

func (q *Queries) GetImageByID(ctx context.Context, imageID int32) (Image, error) {
	row := q.db.QueryRow(ctx, getImageByID, imageID)
	var i Image
	err := row.Scan(
		&i.ImageID,
		&i.ProductID,
		&i.VariantID,
		&i.ImageUrl,
		&i.CloudinaryID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImagesByProductID = `-- name: GetImagesByProductID :one
SELECT image_id, product_id, variant_id, image_url, cloudinary_id, is_primary, created_at, updated_at FROM images WHERE product_id = $1 AND image_id = $2
`

type GetImagesByProductIDParams struct {
	ProductID pgtype.Int8 `json:"product_id"`
	ImageID   int32       `json:"image_id"`
}

func (q *Queries) GetImagesByProductID(ctx context.Context, arg GetImagesByProductIDParams) (Image, error) {
	row := q.db.QueryRow(ctx, getImagesByProductID, arg.ProductID, arg.ImageID)
	var i Image
	err := row.Scan(
		&i.ImageID,
		&i.ProductID,
		&i.VariantID,
		&i.ImageUrl,
		&i.CloudinaryID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImagesByVariantID = `-- name: GetImagesByVariantID :many
SELECT image_id, product_id, variant_id, image_url, cloudinary_id, is_primary, created_at, updated_at FROM images WHERE variant_id = $1
`

func (q *Queries) GetImagesByVariantID(ctx context.Context, variantID pgtype.Int8) ([]Image, error) {
	rows, err := q.db.Query(ctx, getImagesByVariantID, variantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ImageID,
			&i.ProductID,
			&i.VariantID,
			&i.ImageUrl,
			&i.CloudinaryID,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
